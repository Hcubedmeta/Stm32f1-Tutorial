
LCD_ili9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b18  08003f8c  08003f8c  00004f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa4  08005aa4  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005aa4  08005aa4  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005aa4  08005aa4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa4  08005aa4  00006aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005aac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000060  08005b0c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005b0c  00007288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b3d  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac0  00000000  00000000  0000dbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000583  00000000  00000000  0000fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191e3  00000000  00000000  0001038b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009af1  00000000  00000000  0002956e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090274  00000000  00000000  0003305f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c32d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002294  00000000  00000000  000c3318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000c55ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000
 8000204:	08003f74 	.word	0x08003f74

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000064 	.word	0x20000064
 8000220:	08003f74 	.word	0x08003f74

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	@ 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__gesf2>:
 8000440:	f04f 3cff 	mov.w	ip, #4294967295
 8000444:	e006      	b.n	8000454 <__cmpsf2+0x4>
 8000446:	bf00      	nop

08000448 <__lesf2>:
 8000448:	f04f 0c01 	mov.w	ip, #1
 800044c:	e002      	b.n	8000454 <__cmpsf2+0x4>
 800044e:	bf00      	nop

08000450 <__cmpsf2>:
 8000450:	f04f 0c01 	mov.w	ip, #1
 8000454:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000458:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800045c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000460:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000464:	bf18      	it	ne
 8000466:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800046a:	d011      	beq.n	8000490 <__cmpsf2+0x40>
 800046c:	b001      	add	sp, #4
 800046e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000472:	bf18      	it	ne
 8000474:	ea90 0f01 	teqne	r0, r1
 8000478:	bf58      	it	pl
 800047a:	ebb2 0003 	subspl.w	r0, r2, r3
 800047e:	bf88      	it	hi
 8000480:	17c8      	asrhi	r0, r1, #31
 8000482:	bf38      	it	cc
 8000484:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000488:	bf18      	it	ne
 800048a:	f040 0001 	orrne.w	r0, r0, #1
 800048e:	4770      	bx	lr
 8000490:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000494:	d102      	bne.n	800049c <__cmpsf2+0x4c>
 8000496:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800049a:	d105      	bne.n	80004a8 <__cmpsf2+0x58>
 800049c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80004a0:	d1e4      	bne.n	800046c <__cmpsf2+0x1c>
 80004a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80004a6:	d0e1      	beq.n	800046c <__cmpsf2+0x1c>
 80004a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <__aeabi_cfrcmple>:
 80004b0:	4684      	mov	ip, r0
 80004b2:	4608      	mov	r0, r1
 80004b4:	4661      	mov	r1, ip
 80004b6:	e7ff      	b.n	80004b8 <__aeabi_cfcmpeq>

080004b8 <__aeabi_cfcmpeq>:
 80004b8:	b50f      	push	{r0, r1, r2, r3, lr}
 80004ba:	f7ff ffc9 	bl	8000450 <__cmpsf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	bf48      	it	mi
 80004c2:	f110 0f00 	cmnmi.w	r0, #0
 80004c6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080004c8 <__aeabi_fcmpeq>:
 80004c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004cc:	f7ff fff4 	bl	80004b8 <__aeabi_cfcmpeq>
 80004d0:	bf0c      	ite	eq
 80004d2:	2001      	moveq	r0, #1
 80004d4:	2000      	movne	r0, #0
 80004d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80004da:	bf00      	nop

080004dc <__aeabi_fcmplt>:
 80004dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004e0:	f7ff ffea 	bl	80004b8 <__aeabi_cfcmpeq>
 80004e4:	bf34      	ite	cc
 80004e6:	2001      	movcc	r0, #1
 80004e8:	2000      	movcs	r0, #0
 80004ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80004ee:	bf00      	nop

080004f0 <__aeabi_fcmple>:
 80004f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004f4:	f7ff ffe0 	bl	80004b8 <__aeabi_cfcmpeq>
 80004f8:	bf94      	ite	ls
 80004fa:	2001      	movls	r0, #1
 80004fc:	2000      	movhi	r0, #0
 80004fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000502:	bf00      	nop

08000504 <__aeabi_fcmpge>:
 8000504:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000508:	f7ff ffd2 	bl	80004b0 <__aeabi_cfrcmple>
 800050c:	bf94      	ite	ls
 800050e:	2001      	movls	r0, #1
 8000510:	2000      	movhi	r0, #0
 8000512:	f85d fb08 	ldr.w	pc, [sp], #8
 8000516:	bf00      	nop

08000518 <__aeabi_fcmpgt>:
 8000518:	f84d ed08 	str.w	lr, [sp, #-8]!
 800051c:	f7ff ffc8 	bl	80004b0 <__aeabi_cfrcmple>
 8000520:	bf34      	ite	cc
 8000522:	2001      	movcc	r0, #1
 8000524:	2000      	movcs	r0, #0
 8000526:	f85d fb08 	ldr.w	pc, [sp], #8
 800052a:	bf00      	nop

0800052c <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b089      	sub	sp, #36	@ 0x24
 8000530:	af00      	add	r7, sp, #0
 8000532:	4604      	mov	r4, r0
 8000534:	4608      	mov	r0, r1
 8000536:	4611      	mov	r1, r2
 8000538:	461a      	mov	r2, r3
 800053a:	4623      	mov	r3, r4
 800053c:	80fb      	strh	r3, [r7, #6]
 800053e:	4603      	mov	r3, r0
 8000540:	80bb      	strh	r3, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	807b      	strh	r3, [r7, #2]
 8000546:	4613      	mov	r3, r2
 8000548:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 800054a:	887b      	ldrh	r3, [r7, #2]
 800054c:	3b01      	subs	r3, #1
 800054e:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 8000566:	e08d      	b.n	8000684 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	b29a      	uxth	r2, r3
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	4413      	add	r3, r2
 8000570:	b298      	uxth	r0, r3
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	b29a      	uxth	r2, r3
 8000576:	88bb      	ldrh	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	b29b      	uxth	r3, r3
 800057c:	883a      	ldrh	r2, [r7, #0]
 800057e:	4619      	mov	r1, r3
 8000580:	f000 fd88 	bl	8001094 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	b29a      	uxth	r2, r3
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4413      	add	r3, r2
 800058c:	b298      	uxth	r0, r3
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	b29a      	uxth	r2, r3
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	b29b      	uxth	r3, r3
 8000598:	883a      	ldrh	r2, [r7, #0]
 800059a:	4619      	mov	r1, r3
 800059c:	f000 fd7a 	bl	8001094 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	88fa      	ldrh	r2, [r7, #6]
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	b298      	uxth	r0, r3
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	88bb      	ldrh	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	883a      	ldrh	r2, [r7, #0]
 80005b6:	4619      	mov	r1, r3
 80005b8:	f000 fd6c 	bl	8001094 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	88fa      	ldrh	r2, [r7, #6]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	b298      	uxth	r0, r3
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	88bb      	ldrh	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	883a      	ldrh	r2, [r7, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	f000 fd5e 	bl	8001094 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	b298      	uxth	r0, r3
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	88ba      	ldrh	r2, [r7, #4]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	883a      	ldrh	r2, [r7, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	f000 fd50 	bl	8001094 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	b298      	uxth	r0, r3
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	b29b      	uxth	r3, r3
 8000602:	88ba      	ldrh	r2, [r7, #4]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	b29b      	uxth	r3, r3
 8000608:	883a      	ldrh	r2, [r7, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	f000 fd42 	bl	8001094 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	b29a      	uxth	r2, r3
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	4413      	add	r3, r2
 8000618:	b298      	uxth	r0, r3
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	b29b      	uxth	r3, r3
 800061e:	88ba      	ldrh	r2, [r7, #4]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	b29b      	uxth	r3, r3
 8000624:	883a      	ldrh	r2, [r7, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	f000 fd34 	bl	8001094 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	b29a      	uxth	r2, r3
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	4413      	add	r3, r2
 8000634:	b298      	uxth	r0, r3
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	b29b      	uxth	r3, r3
 800063a:	88ba      	ldrh	r2, [r7, #4]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	883a      	ldrh	r2, [r7, #0]
 8000642:	4619      	mov	r1, r3
 8000644:	f000 fd26 	bl	8001094 <ILI9341_DrawPixel>

		if (err <= 0)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	dc09      	bgt.n	8000662 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	3301      	adds	r3, #1
 8000652:	61bb      	str	r3, [r7, #24]
			err += dy;
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	4413      	add	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
			dy += 2;
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	3302      	adds	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	dd0d      	ble.n	8000684 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	3b01      	subs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
			dx += 2;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	3302      	adds	r3, #2
 8000672:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	425b      	negs	r3, r3
 8000678:	005a      	lsls	r2, r3, #1
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	4413      	add	r3, r2
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	429a      	cmp	r2, r3
 800068a:	f6bf af6d 	bge.w	8000568 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3724      	adds	r7, #36	@ 0x24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}

08000698 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b08b      	sub	sp, #44	@ 0x2c
 800069c:	af00      	add	r7, sp, #0
 800069e:	4604      	mov	r4, r0
 80006a0:	4608      	mov	r0, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	461a      	mov	r2, r3
 80006a6:	4623      	mov	r3, r4
 80006a8:	80fb      	strh	r3, [r7, #6]
 80006aa:	4603      	mov	r3, r0
 80006ac:	80bb      	strh	r3, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	807b      	strh	r3, [r7, #2]
 80006b2:	4613      	mov	r3, r2
 80006b4:	803b      	strh	r3, [r7, #0]

	int x = radius;
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 80006be:	887b      	ldrh	r3, [r7, #2]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	f1c3 0301 	rsb	r3, r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

	while (x >= y)
 80006d0:	e061      	b.n	8000796 <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 80006d2:	88fa      	ldrh	r2, [r7, #6]
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	e018      	b.n	800070e <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	b298      	uxth	r0, r3
 80006e0:	6a3b      	ldr	r3, [r7, #32]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	88bb      	ldrh	r3, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	883a      	ldrh	r2, [r7, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f000 fcd1 	bl	8001094 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	b298      	uxth	r0, r3
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	88ba      	ldrh	r2, [r7, #4]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	b29b      	uxth	r3, r3
 8000700:	883a      	ldrh	r2, [r7, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	f000 fcc6 	bl	8001094 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	3301      	adds	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	4413      	add	r3, r2
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	429a      	cmp	r2, r3
 8000718:	dde0      	ble.n	80006dc <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e018      	b.n	8000756 <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	b298      	uxth	r0, r3
 8000728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072a:	b29a      	uxth	r2, r3
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	b29b      	uxth	r3, r3
 8000732:	883a      	ldrh	r2, [r7, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f000 fcad 	bl	8001094 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	b298      	uxth	r0, r3
 800073e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000740:	b29b      	uxth	r3, r3
 8000742:	88ba      	ldrh	r2, [r7, #4]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b29b      	uxth	r3, r3
 8000748:	883a      	ldrh	r2, [r7, #0]
 800074a:	4619      	mov	r1, r3
 800074c:	f000 fca2 	bl	8001094 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3301      	adds	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	88fa      	ldrh	r2, [r7, #6]
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	4413      	add	r3, r2
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	429a      	cmp	r2, r3
 8000760:	dde0      	ble.n	8000724 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	3301      	adds	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	4413      	add	r3, r2
 800076e:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	3302      	adds	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	005a      	lsls	r2, r3, #1
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	4413      	add	r3, r2
 800077e:	2b00      	cmp	r3, #0
 8000780:	dd09      	ble.n	8000796 <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 8000782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000784:	3b01      	subs	r3, #1
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	4413      	add	r3, r2
 800078e:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	3302      	adds	r3, #2
 8000794:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8000796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	429a      	cmp	r2, r3
 800079c:	da99      	bge.n	80006d2 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	372c      	adds	r7, #44	@ 0x2c
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd90      	pop	{r4, r7, pc}

080007a8 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4604      	mov	r4, r0
 80007b0:	4608      	mov	r0, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	461a      	mov	r2, r3
 80007b6:	4623      	mov	r3, r4
 80007b8:	80fb      	strh	r3, [r7, #6]
 80007ba:	4603      	mov	r3, r0
 80007bc:	80bb      	strh	r3, [r7, #4]
 80007be:	460b      	mov	r3, r1
 80007c0:	807b      	strh	r3, [r7, #2]
 80007c2:	4613      	mov	r3, r2
 80007c4:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 80007dc:	887a      	ldrh	r2, [r7, #2]
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fdd8 	bl	8000398 <__aeabi_i2f>
 80007e8:	4603      	mov	r3, r0
 80007ea:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negX = 1;
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f7ff fe73 	bl	80004dc <__aeabi_fcmplt>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <ILI9341_DrawHollowRectangleCoord+0x58>
 80007fc:	2301      	movs	r3, #1
 80007fe:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 8000806:	883a      	ldrh	r2, [r7, #0]
 8000808:	88bb      	ldrh	r3, [r7, #4]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fdc3 	bl	8000398 <__aeabi_i2f>
 8000812:	4603      	mov	r3, r0
 8000814:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negY = 1;
 8000816:	f04f 0100 	mov.w	r1, #0
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f7ff fe5e 	bl	80004dc <__aeabi_fcmplt>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <ILI9341_DrawHollowRectangleCoord+0x82>
 8000826:	2301      	movs	r3, #1
 8000828:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 800082a:	7cfb      	ldrb	r3, [r7, #19]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8000830:	887a      	ldrh	r2, [r7, #2]
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	82fb      	strh	r3, [r7, #22]
 8000838:	e003      	b.n	8000842 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 8000842:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000844:	8afa      	ldrh	r2, [r7, #22]
 8000846:	88b9      	ldrh	r1, [r7, #4]
 8000848:	88f8      	ldrh	r0, [r7, #6]
 800084a:	f000 fce5 	bl	8001218 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 800084e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000850:	8afa      	ldrh	r2, [r7, #22]
 8000852:	8839      	ldrh	r1, [r7, #0]
 8000854:	88f8      	ldrh	r0, [r7, #6]
 8000856:	f000 fcdf 	bl	8001218 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 800085a:	7cbb      	ldrb	r3, [r7, #18]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d104      	bne.n	800086a <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 8000860:	883a      	ldrh	r2, [r7, #0]
 8000862:	88bb      	ldrh	r3, [r7, #4]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	82bb      	strh	r3, [r7, #20]
 8000868:	e003      	b.n	8000872 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 800086a:	88ba      	ldrh	r2, [r7, #4]
 800086c:	883b      	ldrh	r3, [r7, #0]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 8000872:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000874:	8aba      	ldrh	r2, [r7, #20]
 8000876:	88b9      	ldrh	r1, [r7, #4]
 8000878:	88f8      	ldrh	r0, [r7, #6]
 800087a:	f000 fd11 	bl	80012a0 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 800087e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000880:	8aba      	ldrh	r2, [r7, #20]
 8000882:	88b9      	ldrh	r1, [r7, #4]
 8000884:	8878      	ldrh	r0, [r7, #2]
 8000886:	f000 fd0b 	bl	80012a0 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 800088a:	8afb      	ldrh	r3, [r7, #22]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <ILI9341_DrawHollowRectangleCoord+0xee>
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 8000896:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000898:	8839      	ldrh	r1, [r7, #0]
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fbf9 	bl	8001094 <ILI9341_DrawPixel>
	}
}
 80008a2:	bf00      	nop
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}

080008aa <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80008aa:	b590      	push	{r4, r7, lr}
 80008ac:	b08d      	sub	sp, #52	@ 0x34
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	4611      	mov	r1, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	460b      	mov	r3, r1
 80008bc:	81bb      	strh	r3, [r7, #12]
 80008be:	4613      	mov	r3, r2
 80008c0:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b1e      	cmp	r3, #30
 80008c6:	d964      	bls.n	8000992 <ILI9341_DrawChar+0xe8>
 80008c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db60      	blt.n	8000992 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3301      	adds	r3, #1
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	3302      	adds	r3, #2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	3303      	adds	r3, #3
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	3b20      	subs	r3, #32
 80008f2:	7ffa      	ldrb	r2, [r7, #31]
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	3304      	adds	r3, #4
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000900:	7fbb      	ldrb	r3, [r7, #30]
 8000902:	b29a      	uxth	r2, r3
 8000904:	7f7b      	ldrb	r3, [r7, #29]
 8000906:	b29c      	uxth	r4, r3
 8000908:	88f9      	ldrh	r1, [r7, #6]
 800090a:	89b8      	ldrh	r0, [r7, #12]
 800090c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	4623      	mov	r3, r4
 8000912:	f000 fc25 	bl	8001160 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
 800091a:	e035      	b.n	8000988 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
 8000920:	e02b      	b.n	800097a <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000922:	7f3b      	ldrb	r3, [r7, #28]
 8000924:	6a3a      	ldr	r2, [r7, #32]
 8000926:	fb03 f202 	mul.w	r2, r3, r2
 800092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092c:	10db      	asrs	r3, r3, #3
 800092e:	f003 031f 	and.w	r3, r3, #31
 8000932:	4413      	add	r3, r2
 8000934:	3301      	adds	r3, #1
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	2201      	movs	r2, #1
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800094c:	7dfa      	ldrb	r2, [r7, #23]
 800094e:	7dbb      	ldrb	r3, [r7, #22]
 8000950:	4013      	ands	r3, r2
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00d      	beq.n	8000974 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	b29a      	uxth	r2, r3
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	b298      	uxth	r0, r3
 8000962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000964:	b29a      	uxth	r2, r3
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	4413      	add	r3, r2
 800096a:	b29b      	uxth	r3, r3
 800096c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800096e:	4619      	mov	r1, r3
 8000970:	f000 fb90 	bl	8001094 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	3301      	adds	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	6a3a      	ldr	r2, [r7, #32]
 800097e:	429a      	cmp	r2, r3
 8000980:	dbcf      	blt.n	8000922 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000984:	3301      	adds	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
 8000988:	7f7b      	ldrb	r3, [r7, #29]
 800098a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800098c:	429a      	cmp	r2, r3
 800098e:	dbc5      	blt.n	800091c <ILI9341_DrawChar+0x72>
 8000990:	e000      	b.n	8000994 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000992:	bf00      	nop
			}
		}
	}
}
 8000994:	372c      	adds	r7, #44	@ 0x2c
 8000996:	46bd      	mov	sp, r7
 8000998:	bd90      	pop	{r4, r7, pc}

0800099a <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b08a      	sub	sp, #40	@ 0x28
 800099e:	af02      	add	r7, sp, #8
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	4611      	mov	r1, r2
 80009a6:	461a      	mov	r2, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	80fb      	strh	r3, [r7, #6]
 80009ac:	4613      	mov	r3, r2
 80009ae:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3301      	adds	r3, #1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80009be:	e02d      	b.n	8000a1c <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	7818      	ldrb	r0, [r3, #0]
 80009c4:	88b9      	ldrh	r1, [r7, #4]
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	460b      	mov	r3, r1
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	f7ff ff69 	bl	80008aa <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3b20      	subs	r3, #32
 80009de:	7ffa      	ldrb	r2, [r7, #31]
 80009e0:	fb02 f303 	mul.w	r3, r2, r3
 80009e4:	3304      	adds	r3, #4
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4413      	add	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	1c9a      	adds	r2, r3, #2
 80009f6:	7fbb      	ldrb	r3, [r7, #30]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	da07      	bge.n	8000a0c <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80009fc:	7dfb      	ldrb	r3, [r7, #23]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	4413      	add	r3, r2
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	3302      	adds	r3, #2
 8000a08:	80fb      	strh	r3, [r7, #6]
 8000a0a:	e004      	b.n	8000a16 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000a0c:	7fbb      	ldrb	r3, [r7, #30]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	4413      	add	r3, r2
 8000a14:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1cd      	bne.n	80009c0 <ILI9341_DrawText+0x26>
	}
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  // Deselect when Tx Complete
  if(hspi == HSPI_INSTANCE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a06      	ldr	r2, [pc, #24]	@ (8000a54 <HAL_SPI_TxCpltCallback+0x24>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d104      	bne.n	8000a4a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <HAL_SPI_TxCpltCallback+0x28>)
 8000a46:	f001 fe27 	bl	8002698 <HAL_GPIO_WritePin>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	40010c00 	.word	0x40010c00

08000a5c <ILI9341_SPI_Tx>:


static void ILI9341_SPI_Tx(uint8_t data)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000a66:	bf00      	nop
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <ILI9341_SPI_Tx+0x30>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d1f8      	bne.n	8000a68 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <ILI9341_SPI_Tx+0x30>)
 8000a7e:	f002 fbc9 	bl	8003214 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000007c 	.word	0x2000007c

08000a90 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000a9c:	bf00      	nop
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <ILI9341_SPI_TxBuffer+0x30>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d1f8      	bne.n	8000a9e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <ILI9341_SPI_TxBuffer+0x30>)
 8000ab4:	f002 fbae 	bl	8003214 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000007c 	.word	0x2000007c

08000ac4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	4808      	ldr	r0, [pc, #32]	@ (8000af4 <ILI9341_WriteCommand+0x30>)
 8000ad4:	f001 fde0 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <ILI9341_WriteCommand+0x34>)
 8000ade:	f001 fddb 	bl	8002698 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ffb9 	bl	8000a5c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010800 	.word	0x40010800
 8000af8:	40010c00 	.word	0x40010c00

08000afc <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b06:	2201      	movs	r2, #1
 8000b08:	2140      	movs	r1, #64	@ 0x40
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <ILI9341_WriteData+0x30>)
 8000b0c:	f001 fdc4 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b10:	2200      	movs	r2, #0
 8000b12:	2101      	movs	r1, #1
 8000b14:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <ILI9341_WriteData+0x34>)
 8000b16:	f001 fdbf 	bl	8002698 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff9d 	bl	8000a5c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b40:	2201      	movs	r2, #1
 8000b42:	2140      	movs	r1, #64	@ 0x40
 8000b44:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <ILI9341_WriteBuffer+0x34>)
 8000b46:	f001 fda7 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <ILI9341_WriteBuffer+0x38>)
 8000b50:	f001 fda2 	bl	8002698 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	4619      	mov	r1, r3
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff99 	bl	8000a90 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000bae:	202a      	movs	r0, #42	@ 0x2a
 8000bb0:	f7ff ff88 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ffba 	bl	8000b34 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000bd0:	883b      	ldrh	r3, [r7, #0]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000bda:	883b      	ldrh	r3, [r7, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000be0:	202b      	movs	r0, #43	@ 0x2b
 8000be2:	f7ff ff6f 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2104      	movs	r1, #4
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffa1 	bl	8000b34 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000bf2:	202c      	movs	r0, #44	@ 0x2c
 8000bf4:	f7ff ff66 	bl	8000ac4 <ILI9341_WriteCommand>
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}

08000c00 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <ILI9341_Reset+0x3c>)
 8000c0a:	f001 fd45 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f000 ff3c 	bl	8001a8c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000c14:	2200      	movs	r2, #0
 8000c16:	2101      	movs	r1, #1
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <ILI9341_Reset+0x40>)
 8000c1a:	f001 fd3d 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f000 ff34 	bl	8001a8c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000c24:	2201      	movs	r2, #1
 8000c26:	2110      	movs	r1, #16
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <ILI9341_Reset+0x3c>)
 8000c2a:	f001 fd35 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2101      	movs	r1, #1
 8000c32:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <ILI9341_Reset+0x40>)
 8000c34:	f001 fd30 	bl	8002698 <HAL_GPIO_WritePin>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <ILI9341_Enable+0x14>)
 8000c4e:	f001 fd23 	bl	8002698 <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010800 	.word	0x40010800

08000c5c <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000c60:	f7ff fff0 	bl	8000c44 <ILI9341_Enable>
	ILI9341_Reset();
 8000c64:	f7ff ffcc 	bl	8000c00 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff ff2b 	bl	8000ac4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f000 ff0c 	bl	8001a8c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000c74:	20cb      	movs	r0, #203	@ 0xcb
 8000c76:	f7ff ff25 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000c7a:	2039      	movs	r0, #57	@ 0x39
 8000c7c:	f7ff ff3e 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000c80:	202c      	movs	r0, #44	@ 0x2c
 8000c82:	f7ff ff3b 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff ff38 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000c8c:	2034      	movs	r0, #52	@ 0x34
 8000c8e:	f7ff ff35 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f7ff ff32 	bl	8000afc <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000c98:	20cf      	movs	r0, #207	@ 0xcf
 8000c9a:	f7ff ff13 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ff2c 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000ca4:	20c1      	movs	r0, #193	@ 0xc1
 8000ca6:	f7ff ff29 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000caa:	2030      	movs	r0, #48	@ 0x30
 8000cac:	f7ff ff26 	bl	8000afc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000cb0:	20e8      	movs	r0, #232	@ 0xe8
 8000cb2:	f7ff ff07 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000cb6:	2085      	movs	r0, #133	@ 0x85
 8000cb8:	f7ff ff20 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff1d 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000cc2:	2078      	movs	r0, #120	@ 0x78
 8000cc4:	f7ff ff1a 	bl	8000afc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000cc8:	20ea      	movs	r0, #234	@ 0xea
 8000cca:	f7ff fefb 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff ff14 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff ff11 	bl	8000afc <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000cda:	20ed      	movs	r0, #237	@ 0xed
 8000cdc:	f7ff fef2 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000ce0:	2064      	movs	r0, #100	@ 0x64
 8000ce2:	f7ff ff0b 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f7ff ff08 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000cec:	2012      	movs	r0, #18
 8000cee:	f7ff ff05 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000cf2:	2081      	movs	r0, #129	@ 0x81
 8000cf4:	f7ff ff02 	bl	8000afc <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000cf8:	20f7      	movs	r0, #247	@ 0xf7
 8000cfa:	f7ff fee3 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000cfe:	2020      	movs	r0, #32
 8000d00:	f7ff fefc 	bl	8000afc <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000d04:	20c0      	movs	r0, #192	@ 0xc0
 8000d06:	f7ff fedd 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000d0a:	2023      	movs	r0, #35	@ 0x23
 8000d0c:	f7ff fef6 	bl	8000afc <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000d10:	20c1      	movs	r0, #193	@ 0xc1
 8000d12:	f7ff fed7 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000d16:	2010      	movs	r0, #16
 8000d18:	f7ff fef0 	bl	8000afc <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000d1c:	20c5      	movs	r0, #197	@ 0xc5
 8000d1e:	f7ff fed1 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000d22:	203e      	movs	r0, #62	@ 0x3e
 8000d24:	f7ff feea 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000d28:	2028      	movs	r0, #40	@ 0x28
 8000d2a:	f7ff fee7 	bl	8000afc <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000d2e:	20c7      	movs	r0, #199	@ 0xc7
 8000d30:	f7ff fec8 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000d34:	2086      	movs	r0, #134	@ 0x86
 8000d36:	f7ff fee1 	bl	8000afc <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000d3a:	2036      	movs	r0, #54	@ 0x36
 8000d3c:	f7ff fec2 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000d40:	2048      	movs	r0, #72	@ 0x48
 8000d42:	f7ff fedb 	bl	8000afc <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000d46:	203a      	movs	r0, #58	@ 0x3a
 8000d48:	f7ff febc 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000d4c:	2055      	movs	r0, #85	@ 0x55
 8000d4e:	f7ff fed5 	bl	8000afc <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000d52:	20b1      	movs	r0, #177	@ 0xb1
 8000d54:	f7ff feb6 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fecf 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000d5e:	2018      	movs	r0, #24
 8000d60:	f7ff fecc 	bl	8000afc <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000d64:	20b6      	movs	r0, #182	@ 0xb6
 8000d66:	f7ff fead 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	f7ff fec6 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000d70:	2082      	movs	r0, #130	@ 0x82
 8000d72:	f7ff fec3 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000d76:	2027      	movs	r0, #39	@ 0x27
 8000d78:	f7ff fec0 	bl	8000afc <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000d7c:	20f2      	movs	r0, #242	@ 0xf2
 8000d7e:	f7ff fea1 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff feba 	bl	8000afc <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000d88:	2026      	movs	r0, #38	@ 0x26
 8000d8a:	f7ff fe9b 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff feb4 	bl	8000afc <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000d94:	20e0      	movs	r0, #224	@ 0xe0
 8000d96:	f7ff fe95 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f7ff feae 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000da0:	2031      	movs	r0, #49	@ 0x31
 8000da2:	f7ff feab 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000da6:	202b      	movs	r0, #43	@ 0x2b
 8000da8:	f7ff fea8 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000dac:	200c      	movs	r0, #12
 8000dae:	f7ff fea5 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000db2:	200e      	movs	r0, #14
 8000db4:	f7ff fea2 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000db8:	2008      	movs	r0, #8
 8000dba:	f7ff fe9f 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000dbe:	204e      	movs	r0, #78	@ 0x4e
 8000dc0:	f7ff fe9c 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000dc4:	20f1      	movs	r0, #241	@ 0xf1
 8000dc6:	f7ff fe99 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000dca:	2037      	movs	r0, #55	@ 0x37
 8000dcc:	f7ff fe96 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000dd0:	2007      	movs	r0, #7
 8000dd2:	f7ff fe93 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000dd6:	2010      	movs	r0, #16
 8000dd8:	f7ff fe90 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f7ff fe8d 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000de2:	200e      	movs	r0, #14
 8000de4:	f7ff fe8a 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000de8:	2009      	movs	r0, #9
 8000dea:	f7ff fe87 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fe84 	bl	8000afc <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000df4:	20e1      	movs	r0, #225	@ 0xe1
 8000df6:	f7ff fe65 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fe7e 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000e00:	200e      	movs	r0, #14
 8000e02:	f7ff fe7b 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000e06:	2014      	movs	r0, #20
 8000e08:	f7ff fe78 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f7ff fe75 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000e12:	2011      	movs	r0, #17
 8000e14:	f7ff fe72 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000e18:	2007      	movs	r0, #7
 8000e1a:	f7ff fe6f 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e1e:	2031      	movs	r0, #49	@ 0x31
 8000e20:	f7ff fe6c 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000e24:	20c1      	movs	r0, #193	@ 0xc1
 8000e26:	f7ff fe69 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000e2a:	2048      	movs	r0, #72	@ 0x48
 8000e2c:	f7ff fe66 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000e30:	2008      	movs	r0, #8
 8000e32:	f7ff fe63 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f7ff fe60 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000e3c:	200c      	movs	r0, #12
 8000e3e:	f7ff fe5d 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000e42:	2031      	movs	r0, #49	@ 0x31
 8000e44:	f7ff fe5a 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000e48:	2036      	movs	r0, #54	@ 0x36
 8000e4a:	f7ff fe57 	bl	8000afc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff fe54 	bl	8000afc <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000e54:	2011      	movs	r0, #17
 8000e56:	f7ff fe35 	bl	8000ac4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000e5a:	2064      	movs	r0, #100	@ 0x64
 8000e5c:	f000 fe16 	bl	8001a8c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000e60:	2029      	movs	r0, #41	@ 0x29
 8000e62:	f7ff fe2f 	bl	8000ac4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f802 	bl	8000e70 <ILI9341_SetRotation>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000e7a:	2036      	movs	r0, #54	@ 0x36
 8000e7c:	f7ff fe22 	bl	8000ac4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f000 fe03 	bl	8001a8c <HAL_Delay>

	switch(rotation)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d837      	bhi.n	8000efc <ILI9341_SetRotation+0x8c>
 8000e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e94 <ILI9341_SetRotation+0x24>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000ebb 	.word	0x08000ebb
 8000e9c:	08000ed1 	.word	0x08000ed1
 8000ea0:	08000ee7 	.word	0x08000ee7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000ea4:	2048      	movs	r0, #72	@ 0x48
 8000ea6:	f7ff fe29 	bl	8000afc <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <ILI9341_SetRotation+0x98>)
 8000eac:	22f0      	movs	r2, #240	@ 0xf0
 8000eae:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <ILI9341_SetRotation+0x9c>)
 8000eb2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000eb6:	801a      	strh	r2, [r3, #0]
		break;
 8000eb8:	e021      	b.n	8000efe <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000eba:	2028      	movs	r0, #40	@ 0x28
 8000ebc:	f7ff fe1e 	bl	8000afc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <ILI9341_SetRotation+0x98>)
 8000ec2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ec6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <ILI9341_SetRotation+0x9c>)
 8000eca:	22f0      	movs	r2, #240	@ 0xf0
 8000ecc:	801a      	strh	r2, [r3, #0]
		break;
 8000ece:	e016      	b.n	8000efe <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000ed0:	2088      	movs	r0, #136	@ 0x88
 8000ed2:	f7ff fe13 	bl	8000afc <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <ILI9341_SetRotation+0x98>)
 8000ed8:	22f0      	movs	r2, #240	@ 0xf0
 8000eda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <ILI9341_SetRotation+0x9c>)
 8000ede:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ee2:	801a      	strh	r2, [r3, #0]
		break;
 8000ee4:	e00b      	b.n	8000efe <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000ee6:	20e8      	movs	r0, #232	@ 0xe8
 8000ee8:	f7ff fe08 	bl	8000afc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <ILI9341_SetRotation+0x98>)
 8000eee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ef2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <ILI9341_SetRotation+0x9c>)
 8000ef6:	22f0      	movs	r2, #240	@ 0xf0
 8000ef8:	801a      	strh	r2, [r3, #0]
		break;
 8000efa:	e000      	b.n	8000efe <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000efc:	bf00      	nop
	}
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000002 	.word	0x20000002
 8000f0c:	20000000 	.word	0x20000000

08000f10 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f14:	b08d      	sub	sp, #52	@ 0x34
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	6039      	str	r1, [r7, #0]
 8000f1c:	80fb      	strh	r3, [r7, #6]
 8000f1e:	466b      	mov	r3, sp
 8000f20:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f2e:	d202      	bcs.n	8000f36 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f34:	e002      	b.n	8000f3c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000f36:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2140      	movs	r1, #64	@ 0x40
 8000f40:	483e      	ldr	r0, [pc, #248]	@ (800103c <ILI9341_DrawColorBurst+0x12c>)
 8000f42:	f001 fba9 	bl	8002698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	483d      	ldr	r0, [pc, #244]	@ (8001040 <ILI9341_DrawColorBurst+0x130>)
 8000f4c:	f001 fba4 	bl	8002698 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	2300      	movs	r3, #0
 8000f64:	4688      	mov	r8, r1
 8000f66:	4699      	mov	r9, r3
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	461d      	mov	r5, r3
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	00eb      	lsls	r3, r5, #3
 8000f8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f90:	00e2      	lsls	r2, r4, #3
 8000f92:	1dcb      	adds	r3, r1, #7
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	ebad 0d03 	sub.w	sp, sp, r3
 8000f9c:	466b      	mov	r3, sp
 8000f9e:	3300      	adds	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fa6:	e00e      	b.n	8000fc6 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fac:	4413      	add	r3, r2
 8000fae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fb2:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	88fa      	ldrh	r2, [r7, #6]
 8000fba:	b2d1      	uxtb	r1, r2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d3ec      	bcc.n	8000fa8 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fe2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000fe8:	fb01 f202 	mul.w	r2, r1, r2
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d010      	beq.n	8001018 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffa:	e009      	b.n	8001010 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	230a      	movs	r3, #10
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	480f      	ldr	r0, [pc, #60]	@ (8001044 <ILI9341_DrawColorBurst+0x134>)
 8001006:	f001 ffc1 	bl	8002f8c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3f1      	bcc.n	8000ffc <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	b29a      	uxth	r2, r3
 800101c:	230a      	movs	r3, #10
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	4808      	ldr	r0, [pc, #32]	@ (8001044 <ILI9341_DrawColorBurst+0x134>)
 8001022:	f001 ffb3 	bl	8002f8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2101      	movs	r1, #1
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <ILI9341_DrawColorBurst+0x130>)
 800102c:	f001 fb34 	bl	8002698 <HAL_GPIO_WritePin>
 8001030:	46b5      	mov	sp, r6
}
 8001032:	bf00      	nop
 8001034:	3734      	adds	r7, #52	@ 0x34
 8001036:	46bd      	mov	sp, r7
 8001038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00
 8001044:	2000007c 	.word	0x2000007c

08001048 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <ILI9341_FillScreen+0x44>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <ILI9341_FillScreen+0x48>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	2100      	movs	r1, #0
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fd85 	bl	8000b70 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <ILI9341_FillScreen+0x44>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <ILI9341_FillScreen+0x48>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	461a      	mov	r2, r3
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff46 	bl	8000f10 <ILI9341_DrawColorBurst>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000002 	.word	0x20000002
 8001090:	20000000 	.word	0x20000000

08001094 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	80bb      	strh	r3, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80010a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001158 <ILI9341_DrawPixel+0xc4>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d24d      	bcs.n	800114e <ILI9341_DrawPixel+0xba>
 80010b2:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <ILI9341_DrawPixel+0xc8>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	88ba      	ldrh	r2, [r7, #4]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d247      	bcs.n	800114e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	753b      	strb	r3, [r7, #20]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	757b      	strb	r3, [r7, #21]
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	3301      	adds	r3, #1
 80010d2:	121b      	asrs	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	75bb      	strb	r3, [r7, #22]
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	743b      	strb	r3, [r7, #16]
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	747b      	strb	r3, [r7, #17]
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	3301      	adds	r3, #1
 80010f6:	121b      	asrs	r3, r3, #8
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	74bb      	strb	r3, [r7, #18]
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	3301      	adds	r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	b29b      	uxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	733b      	strb	r3, [r7, #12]
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001116:	202a      	movs	r0, #42	@ 0x2a
 8001118:	f7ff fcd4 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fd06 	bl	8000b34 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001128:	202b      	movs	r0, #43	@ 0x2b
 800112a:	f7ff fccb 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2104      	movs	r1, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fcfd 	bl	8000b34 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800113a:	202c      	movs	r0, #44	@ 0x2c
 800113c:	f7ff fcc2 	bl	8000ac4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fcf4 	bl	8000b34 <ILI9341_WriteBuffer>
 800114c:	e000      	b.n	8001150 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800114e:	bf00      	nop
}
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000002 	.word	0x20000002
 800115c:	20000000 	.word	0x20000000

08001160 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <ILI9341_DrawRectangle+0xb0>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	429a      	cmp	r2, r3
 8001188:	d23d      	bcs.n	8001206 <ILI9341_DrawRectangle+0xa6>
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <ILI9341_DrawRectangle+0xb4>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	88ba      	ldrh	r2, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d237      	bcs.n	8001206 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	4413      	add	r3, r2
 800119c:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <ILI9341_DrawRectangle+0xb0>)
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	b292      	uxth	r2, r2
 80011a2:	4293      	cmp	r3, r2
 80011a4:	dd05      	ble.n	80011b2 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <ILI9341_DrawRectangle+0xb0>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80011b2:	88ba      	ldrh	r2, [r7, #4]
 80011b4:	883b      	ldrh	r3, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <ILI9341_DrawRectangle+0xb4>)
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	b292      	uxth	r2, r2
 80011be:	4293      	cmp	r3, r2
 80011c0:	dd05      	ble.n	80011ce <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <ILI9341_DrawRectangle+0xb4>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29c      	uxth	r4, r3
 80011da:	88ba      	ldrh	r2, [r7, #4]
 80011dc:	883b      	ldrh	r3, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	88b9      	ldrh	r1, [r7, #4]
 80011e8:	88f8      	ldrh	r0, [r7, #6]
 80011ea:	4622      	mov	r2, r4
 80011ec:	f7ff fcc0 	bl	8000b70 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80011f0:	883b      	ldrh	r3, [r7, #0]
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	8b3b      	ldrh	r3, [r7, #24]
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe86 	bl	8000f10 <ILI9341_DrawColorBurst>
 8001204:	e000      	b.n	8001208 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001206:	bf00      	nop
}
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	bf00      	nop
 8001210:	20000002 	.word	0x20000002
 8001214:	20000000 	.word	0x20000000

08001218 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4603      	mov	r3, r0
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	4613      	mov	r3, r2
 8001234:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <ILI9341_DrawHLine+0x80>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	88fa      	ldrh	r2, [r7, #6]
 800123e:	429a      	cmp	r2, r3
 8001240:	d225      	bcs.n	800128e <ILI9341_DrawHLine+0x76>
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <ILI9341_DrawHLine+0x84>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	88ba      	ldrh	r2, [r7, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	d21f      	bcs.n	800128e <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	4413      	add	r3, r2
 8001254:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <ILI9341_DrawHLine+0x80>)
 8001256:	8812      	ldrh	r2, [r2, #0]
 8001258:	b292      	uxth	r2, r2
 800125a:	4293      	cmp	r3, r2
 800125c:	dd05      	ble.n	800126a <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <ILI9341_DrawHLine+0x80>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29a      	uxth	r2, r3
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4413      	add	r3, r2
 8001270:	b29b      	uxth	r3, r3
 8001272:	3b01      	subs	r3, #1
 8001274:	b29a      	uxth	r2, r3
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	88b9      	ldrh	r1, [r7, #4]
 800127a:	88f8      	ldrh	r0, [r7, #6]
 800127c:	f7ff fc78 	bl	8000b70 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	883b      	ldrh	r3, [r7, #0]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fe42 	bl	8000f10 <ILI9341_DrawColorBurst>
 800128c:	e000      	b.n	8001290 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800128e:	bf00      	nop
}
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000002 	.word	0x20000002
 800129c:	20000000 	.word	0x20000000

080012a0 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4604      	mov	r4, r0
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4623      	mov	r3, r4
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	4603      	mov	r3, r0
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]
 80012ba:	4613      	mov	r3, r2
 80012bc:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <ILI9341_DrawVLine+0x80>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d225      	bcs.n	8001316 <ILI9341_DrawVLine+0x76>
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <ILI9341_DrawVLine+0x84>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	88ba      	ldrh	r2, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d21f      	bcs.n	8001316 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80012d6:	88ba      	ldrh	r2, [r7, #4]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4413      	add	r3, r2
 80012dc:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <ILI9341_DrawVLine+0x84>)
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	b292      	uxth	r2, r2
 80012e2:	4293      	cmp	r3, r2
 80012e4:	dd05      	ble.n	80012f2 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <ILI9341_DrawVLine+0x84>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	88fa      	ldrh	r2, [r7, #6]
 8001300:	88b9      	ldrh	r1, [r7, #4]
 8001302:	88f8      	ldrh	r0, [r7, #6]
 8001304:	f7ff fc34 	bl	8000b70 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fdfe 	bl	8000f10 <ILI9341_DrawColorBurst>
 8001314:	e000      	b.n	8001318 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001316:	bf00      	nop
}
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	bf00      	nop
 8001320:	20000002 	.word	0x20000002
 8001324:	20000000 	.word	0x20000000

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 fb4b 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f91b 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f000 f9b1 	bl	800169c <MX_GPIO_Init>
  MX_DMA_Init();
 800133a:	f000 f991 	bl	8001660 <MX_DMA_Init>
  MX_SPI1_Init();
 800133e:	f000 f959 	bl	80015f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001342:	f7ff fc8b 	bl	8000c5c <ILI9341_Init>

  	// Simple Text writing (Text, Font, X, Y, Color, BackColor)
  	// Available Fonts are FONT1, FONT2, FONT3 and FONT4
  	ILI9341_FillScreen(WHITE);
 8001346:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800134a:	f7ff fe7d 	bl	8001048 <ILI9341_FillScreen>
  	ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fd8e 	bl	8000e70 <ILI9341_SetRotation>
  	ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001354:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	2300      	movs	r3, #0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	236e      	movs	r3, #110	@ 0x6e
 8001360:	225a      	movs	r2, #90	@ 0x5a
 8001362:	497d      	ldr	r1, [pc, #500]	@ (8001558 <main+0x230>)
 8001364:	487d      	ldr	r0, [pc, #500]	@ (800155c <main+0x234>)
 8001366:	f7ff fb18 	bl	800099a <ILI9341_DrawText>
  	HAL_Delay(1000);
 800136a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136e:	f000 fb8d 	bl	8001a8c <HAL_Delay>

  	//Writing numbers
  	ILI9341_FillScreen(BLACK);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fe68 	bl	8001048 <ILI9341_FillScreen>

  	 static char BufferText[30];
  	 for (uint8_t i = 0; i <= 5; i++) {
 8001378:	2300      	movs	r3, #0
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	e07b      	b.n	8001476 <main+0x14e>
  	 sprintf(BufferText, "COUNT : %d", i);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	461a      	mov	r2, r3
 8001382:	4977      	ldr	r1, [pc, #476]	@ (8001560 <main+0x238>)
 8001384:	4877      	ldr	r0, [pc, #476]	@ (8001564 <main+0x23c>)
 8001386:	f002 f945 	bl	8003614 <siprintf>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 800138a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	2300      	movs	r3, #0
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	230a      	movs	r3, #10
 8001396:	220a      	movs	r2, #10
 8001398:	4973      	ldr	r1, [pc, #460]	@ (8001568 <main+0x240>)
 800139a:	4872      	ldr	r0, [pc, #456]	@ (8001564 <main+0x23c>)
 800139c:	f7ff fafd 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 80013a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	231f      	movs	r3, #31
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	231e      	movs	r3, #30
 80013ac:	220a      	movs	r2, #10
 80013ae:	496e      	ldr	r1, [pc, #440]	@ (8001568 <main+0x240>)
 80013b0:	486c      	ldr	r0, [pc, #432]	@ (8001564 <main+0x23c>)
 80013b2:	f7ff faf2 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 80013b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2332      	movs	r3, #50	@ 0x32
 80013c4:	220a      	movs	r2, #10
 80013c6:	4968      	ldr	r1, [pc, #416]	@ (8001568 <main+0x240>)
 80013c8:	4866      	ldr	r0, [pc, #408]	@ (8001564 <main+0x23c>)
 80013ca:	f7ff fae6 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 80013ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2346      	movs	r3, #70	@ 0x46
 80013dc:	220a      	movs	r2, #10
 80013de:	4962      	ldr	r1, [pc, #392]	@ (8001568 <main+0x240>)
 80013e0:	4860      	ldr	r0, [pc, #384]	@ (8001564 <main+0x23c>)
 80013e2:	f7ff fada 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 80013e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	235a      	movs	r3, #90	@ 0x5a
 80013f4:	220a      	movs	r2, #10
 80013f6:	495c      	ldr	r1, [pc, #368]	@ (8001568 <main+0x240>)
 80013f8:	485a      	ldr	r0, [pc, #360]	@ (8001564 <main+0x23c>)
 80013fa:	f7ff face 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 80013fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	f647 030f 	movw	r3, #30735	@ 0x780f
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	236e      	movs	r3, #110	@ 0x6e
 800140c:	220a      	movs	r2, #10
 800140e:	4956      	ldr	r1, [pc, #344]	@ (8001568 <main+0x240>)
 8001410:	4854      	ldr	r0, [pc, #336]	@ (8001564 <main+0x23c>)
 8001412:	f7ff fac2 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 8001416:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2382      	movs	r3, #130	@ 0x82
 8001424:	220a      	movs	r2, #10
 8001426:	4950      	ldr	r1, [pc, #320]	@ (8001568 <main+0x240>)
 8001428:	484e      	ldr	r0, [pc, #312]	@ (8001564 <main+0x23c>)
 800142a:	f7ff fab6 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 800142e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2396      	movs	r3, #150	@ 0x96
 800143c:	220a      	movs	r2, #10
 800143e:	494a      	ldr	r1, [pc, #296]	@ (8001568 <main+0x240>)
 8001440:	4848      	ldr	r0, [pc, #288]	@ (8001564 <main+0x23c>)
 8001442:	f7ff faaa 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001446:	2300      	movs	r3, #0
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	23aa      	movs	r3, #170	@ 0xaa
 8001452:	220a      	movs	r2, #10
 8001454:	4944      	ldr	r1, [pc, #272]	@ (8001568 <main+0x240>)
 8001456:	4843      	ldr	r0, [pc, #268]	@ (8001564 <main+0x23c>)
 8001458:	f7ff fa9f 	bl	800099a <ILI9341_DrawText>
  	 ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 800145c:	2300      	movs	r3, #0
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	231f      	movs	r3, #31
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	23be      	movs	r3, #190	@ 0xbe
 8001466:	220a      	movs	r2, #10
 8001468:	493f      	ldr	r1, [pc, #252]	@ (8001568 <main+0x240>)
 800146a:	483e      	ldr	r0, [pc, #248]	@ (8001564 <main+0x23c>)
 800146c:	f7ff fa95 	bl	800099a <ILI9341_DrawText>
  	 for (uint8_t i = 0; i <= 5; i++) {
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3301      	adds	r3, #1
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b05      	cmp	r3, #5
 800147a:	d980      	bls.n	800137e <main+0x56>
  	 }

  	 // Horizontal Line (X, Y, Length, Color)
  	 ILI9341_FillScreen(WHITE);
 800147c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001480:	f7ff fde2 	bl	8001048 <ILI9341_FillScreen>
  	 ILI9341_DrawHLine(50, 120, 200, NAVY);
 8001484:	230f      	movs	r3, #15
 8001486:	22c8      	movs	r2, #200	@ 0xc8
 8001488:	2178      	movs	r1, #120	@ 0x78
 800148a:	2032      	movs	r0, #50	@ 0x32
 800148c:	f7ff fec4 	bl	8001218 <ILI9341_DrawHLine>
  	 HAL_Delay(1000);
 8001490:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001494:	f000 fafa 	bl	8001a8c <HAL_Delay>

  	 // Vertical Line (X, Y, Length, Color)
  	 ILI9341_FillScreen(WHITE);
 8001498:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800149c:	f7ff fdd4 	bl	8001048 <ILI9341_FillScreen>
  	 ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 80014a0:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80014a4:	2296      	movs	r2, #150	@ 0x96
 80014a6:	2128      	movs	r1, #40	@ 0x28
 80014a8:	20a0      	movs	r0, #160	@ 0xa0
 80014aa:	f7ff fef9 	bl	80012a0 <ILI9341_DrawVLine>
  	 HAL_Delay(1000);
 80014ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b2:	f000 faeb 	bl	8001a8c <HAL_Delay>

  	 // Hollow Circle (Centre X, Centre Y, Radius, Color)
  	 ILI9341_FillScreen(WHITE);
 80014b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014ba:	f7ff fdc5 	bl	8001048 <ILI9341_FillScreen>
  	 ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 80014be:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80014c2:	2250      	movs	r2, #80	@ 0x50
 80014c4:	2178      	movs	r1, #120	@ 0x78
 80014c6:	20a0      	movs	r0, #160	@ 0xa0
 80014c8:	f7ff f830 	bl	800052c <ILI9341_DrawHollowCircle>
  	 HAL_Delay(1000);
 80014cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d0:	f000 fadc 	bl	8001a8c <HAL_Delay>

  	 // Filled Circle (Centre X, Centre Y, Radius, Color)
  	 ILI9341_FillScreen(WHITE);
 80014d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014d8:	f7ff fdb6 	bl	8001048 <ILI9341_FillScreen>
  	 ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 80014dc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014e0:	2232      	movs	r2, #50	@ 0x32
 80014e2:	2178      	movs	r1, #120	@ 0x78
 80014e4:	20a0      	movs	r0, #160	@ 0xa0
 80014e6:	f7ff f8d7 	bl	8000698 <ILI9341_DrawFilledCircle>
  	 HAL_Delay(1000);
 80014ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ee:	f000 facd 	bl	8001a8c <HAL_Delay>

  	 // Filled Rectangle (Start X, Start Y, Length X, Length Y)
  	 ILI9341_FillScreen(WHITE);
 80014f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80014f6:	f7ff fda7 	bl	8001048 <ILI9341_FillScreen>
  	 ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 80014fa:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	238c      	movs	r3, #140	@ 0x8c
 8001502:	22dc      	movs	r2, #220	@ 0xdc
 8001504:	2132      	movs	r1, #50	@ 0x32
 8001506:	2032      	movs	r0, #50	@ 0x32
 8001508:	f7ff fe2a 	bl	8001160 <ILI9341_DrawRectangle>
  	 HAL_Delay(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001510:	f000 fabc 	bl	8001a8c <HAL_Delay>

  	 // Hollow Rectangle (Start X, Start Y, End X, End Y)
  	 ILI9341_FillScreen(WHITE);
 8001514:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001518:	f7ff fd96 	bl	8001048 <ILI9341_FillScreen>
  	 ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 800151c:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	23be      	movs	r3, #190	@ 0xbe
 8001524:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001528:	2132      	movs	r1, #50	@ 0x32
 800152a:	2032      	movs	r0, #50	@ 0x32
 800152c:	f7ff f93c 	bl	80007a8 <ILI9341_DrawHollowRectangleCoord>
  	 HAL_Delay(1000);
 8001530:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001534:	f000 faaa 	bl	8001a8c <HAL_Delay>

  	 // Simple Pixel Only (X, Y, Color)
  	 ILI9341_FillScreen(WHITE);
 8001538:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800153c:	f7ff fd84 	bl	8001048 <ILI9341_FillScreen>
  	 ILI9341_DrawPixel(100, 100, BLACK);
 8001540:	2200      	movs	r2, #0
 8001542:	2164      	movs	r1, #100	@ 0x64
 8001544:	2064      	movs	r0, #100	@ 0x64
 8001546:	f7ff fda5 	bl	8001094 <ILI9341_DrawPixel>
  	 HAL_Delay(1000);
 800154a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154e:	f000 fa9d 	bl	8001a8c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001552:	bf00      	nop
 8001554:	e7fd      	b.n	8001552 <main+0x22a>
 8001556:	bf00      	nop
 8001558:	08004908 	.word	0x08004908
 800155c:	08003f8c 	.word	0x08003f8c
 8001560:	08003f98 	.word	0x08003f98
 8001564:	20000118 	.word	0x20000118
 8001568:	08003fa4 	.word	0x08003fa4

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b090      	sub	sp, #64	@ 0x40
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2228      	movs	r2, #40	@ 0x28
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f002 f86a 	bl	8003654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 f888 	bl	80026c8 <HAL_RCC_OscConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80015be:	f000 f8cb 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c2:	230f      	movs	r3, #15
 80015c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c6:	2302      	movs	r3, #2
 80015c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 faf6 	bl	8002bcc <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80015e6:	f000 f8b7 	bl	8001758 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	@ 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <MX_SPI1_Init+0x64>)
 80015fa:	4a18      	ldr	r2, [pc, #96]	@ (800165c <MX_SPI1_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001600:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_SPI1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001624:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001628:	2208      	movs	r2, #8
 800162a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <MX_SPI1_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001640:	220a      	movs	r2, #10
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <MX_SPI1_Init+0x64>)
 8001646:	f001 fc1d 	bl	8002e84 <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001650:	f000 f882 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000007c 	.word	0x2000007c
 800165c:	40013000 	.word	0x40013000

08001660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_DMA_Init+0x38>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <MX_DMA_Init+0x38>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_DMA_Init+0x38>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	200d      	movs	r0, #13
 8001684:	f000 fafd 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001688:	200d      	movs	r0, #13
 800168a:	f000 fb16 	bl	8001cba <HAL_NVIC_EnableIRQ>

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a25      	ldr	r2, [pc, #148]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b20      	ldr	r3, [pc, #128]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a1f      	ldr	r2, [pc, #124]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <MX_GPIO_Init+0xb0>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2150      	movs	r1, #80	@ 0x50
 80016fc:	4814      	ldr	r0, [pc, #80]	@ (8001750 <MX_GPIO_Init+0xb4>)
 80016fe:	f000 ffcb 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2101      	movs	r1, #1
 8001706:	4813      	ldr	r0, [pc, #76]	@ (8001754 <MX_GPIO_Init+0xb8>)
 8001708:	f000 ffc6 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 800170c:	2350      	movs	r3, #80	@ 0x50
 800170e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4619      	mov	r1, r3
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <MX_GPIO_Init+0xb4>)
 8001724:	f000 fe24 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_GPIO_Init+0xb8>)
 8001740:	f000 fe16 	bl	8002370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800
 8001754:	40010c00 	.word	0x40010c00

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <Error_Handler+0x8>

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_MspInit+0x5c>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <HAL_MspInit+0x5c>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6193      	str	r3, [r2, #24]
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_MspInit+0x5c>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <HAL_MspInit+0x5c>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a0e      	ldr	r2, [pc, #56]	@ (80017c0 <HAL_MspInit+0x5c>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <HAL_MspInit+0x5c>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_MspInit+0x60>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_MspInit+0x60>)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000

080017c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_SPI_MspInit+0xbc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d149      	bne.n	800187c <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e8:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <HAL_SPI_MspInit+0xc0>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <HAL_SPI_MspInit+0xc0>)
 80017ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <HAL_SPI_MspInit+0xc0>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b21      	ldr	r3, [pc, #132]	@ (8001888 <HAL_SPI_MspInit+0xc0>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a20      	ldr	r2, [pc, #128]	@ (8001888 <HAL_SPI_MspInit+0xc0>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b1e      	ldr	r3, [pc, #120]	@ (8001888 <HAL_SPI_MspInit+0xc0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001818:	23a0      	movs	r3, #160	@ 0xa0
 800181a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4818      	ldr	r0, [pc, #96]	@ (800188c <HAL_SPI_MspInit+0xc4>)
 800182c:	f000 fda0 	bl	8002370 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001832:	4a18      	ldr	r2, [pc, #96]	@ (8001894 <HAL_SPI_MspInit+0xcc>)
 8001834:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001838:	2210      	movs	r2, #16
 800183a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001844:	2280      	movs	r2, #128	@ 0x80
 8001846:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001862:	f000 fa45 	bl	8001cf0 <HAL_DMA_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 800186c:	f7ff ff74 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001874:	649a      	str	r2, [r3, #72]	@ 0x48
 8001876:	4a06      	ldr	r2, [pc, #24]	@ (8001890 <HAL_SPI_MspInit+0xc8>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40013000 	.word	0x40013000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800
 8001890:	200000d4 	.word	0x200000d4
 8001894:	40020030 	.word	0x40020030

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <NMI_Handler+0x4>

080018a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <MemManage_Handler+0x4>

080018b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <UsageFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f8b4 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <DMA1_Channel3_IRQHandler+0x10>)
 80018f6:	f000 fad1 	bl	8001e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000d4 	.word	0x200000d4

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f001 fe96 	bl	8003664 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000c000 	.word	0x2000c000
 8001964:	00000400 	.word	0x00000400
 8001968:	20000138 	.word	0x20000138
 800196c:	20000288 	.word	0x20000288

08001970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800197c:	f7ff fff8 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001982:	490c      	ldr	r1, [pc, #48]	@ (80019b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001984:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a09      	ldr	r2, [pc, #36]	@ (80019bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001998:	4c09      	ldr	r4, [pc, #36]	@ (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a6:	f001 fe63 	bl	8003670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019aa:	f7ff fcbd 	bl	8001328 <main>
  bx lr
 80019ae:	4770      	bx	lr
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80019b8:	08005aac 	.word	0x08005aac
  ldr r2, =_sbss
 80019bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80019c0:	20000288 	.word	0x20000288

080019c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC1_2_IRQHandler>
	...

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <HAL_Init+0x28>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a07      	ldr	r2, [pc, #28]	@ (80019f0 <HAL_Init+0x28>)
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 f947 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019de:	200f      	movs	r0, #15
 80019e0:	f000 f808 	bl	80019f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e4:	f7ff febe 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40022000 	.word	0x40022000

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_InitTick+0x54>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_InitTick+0x58>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f95f 	bl	8001cd6 <HAL_SYSTICK_Config>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00e      	b.n	8001a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d80a      	bhi.n	8001a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f000 f927 	bl	8001c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a34:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <HAL_InitTick+0x5c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	2000000c 	.word	0x2000000c
 8001a50:	20000008 	.word	0x20000008

08001a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_IncTick+0x1c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a03      	ldr	r2, [pc, #12]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	2000013c 	.word	0x2000013c

08001a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	@ (8001a88 <HAL_GetTick+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	2000013c 	.word	0x2000013c

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffe0 	bl	8001a78 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4906      	ldr	r1, [pc, #24]	@ (8001b6c <__NVIC_EnableIRQ+0x34>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	@ (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	@ (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff90 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff2d 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff42 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff90 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5f 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff35 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffa2 	bl	8001c28 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e059      	b.n	8001dba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <HAL_DMA_Init+0xd4>)
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d80f      	bhi.n	8001d32 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <HAL_DMA_Init+0xd8>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dcc <HAL_DMA_Init+0xdc>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	@ (8001dd0 <HAL_DMA_Init+0xe0>)
 8001d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d30:	e00e      	b.n	8001d50 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <HAL_DMA_Init+0xe4>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a23      	ldr	r2, [pc, #140]	@ (8001dcc <HAL_DMA_Init+0xdc>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	009a      	lsls	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a22      	ldr	r2, [pc, #136]	@ (8001dd8 <HAL_DMA_Init+0xe8>)
 8001d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40020407 	.word	0x40020407
 8001dc8:	bffdfff8 	.word	0xbffdfff8
 8001dcc:	cccccccd 	.word	0xcccccccd
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	bffdfbf8 	.word	0xbffdfbf8
 8001dd8:	40020400 	.word	0x40020400

08001ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Start_IT+0x20>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e04b      	b.n	8001e94 <HAL_DMA_Start_IT+0xb8>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d13a      	bne.n	8001e86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fa6d 	bl	8002314 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 020e 	orr.w	r2, r2, #14
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e00f      	b.n	8001e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 020a 	orr.w	r2, r2, #10
 8001e72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e005      	b.n	8001e92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	2204      	movs	r2, #4
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80f1 	beq.w	80020a8 <HAL_DMA_IRQHandler+0x20c>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80eb 	beq.w	80020a8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8002074 <HAL_DMA_IRQHandler+0x1d8>)
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d958      	bls.n	8001fae <HAL_DMA_IRQHandler+0x112>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	@ (8002078 <HAL_DMA_IRQHandler+0x1dc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d04f      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x10a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800207c <HAL_DMA_IRQHandler+0x1e0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d048      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x106>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <HAL_DMA_IRQHandler+0x1e4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x100>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a59      	ldr	r2, [pc, #356]	@ (8002084 <HAL_DMA_IRQHandler+0x1e8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d038      	beq.n	8001f96 <HAL_DMA_IRQHandler+0xfa>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <HAL_DMA_IRQHandler+0x1ec>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d030      	beq.n	8001f90 <HAL_DMA_IRQHandler+0xf4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a56      	ldr	r2, [pc, #344]	@ (800208c <HAL_DMA_IRQHandler+0x1f0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d028      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xee>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002074 <HAL_DMA_IRQHandler+0x1d8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d020      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xe8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a52      	ldr	r2, [pc, #328]	@ (8002090 <HAL_DMA_IRQHandler+0x1f4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d019      	beq.n	8001f80 <HAL_DMA_IRQHandler+0xe4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a50      	ldr	r2, [pc, #320]	@ (8002094 <HAL_DMA_IRQHandler+0x1f8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d012      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xe0>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4f      	ldr	r2, [pc, #316]	@ (8002098 <HAL_DMA_IRQHandler+0x1fc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00a      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xda>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4d      	ldr	r2, [pc, #308]	@ (800209c <HAL_DMA_IRQHandler+0x200>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d102      	bne.n	8001f70 <HAL_DMA_IRQHandler+0xd4>
 8001f6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f6e:	e01b      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f74:	e018      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f7a:	e015      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f7c:	2340      	movs	r3, #64	@ 0x40
 8001f7e:	e013      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e011      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f88:	e00e      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f8e:	e00b      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f94:	e008      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f9a:	e005      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fa0:	e002      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001fa2:	2340      	movs	r3, #64	@ 0x40
 8001fa4:	e000      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x10c>
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80020a0 <HAL_DMA_IRQHandler+0x204>)
 8001faa:	6053      	str	r3, [r2, #4]
 8001fac:	e057      	b.n	800205e <HAL_DMA_IRQHandler+0x1c2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a31      	ldr	r2, [pc, #196]	@ (8002078 <HAL_DMA_IRQHandler+0x1dc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04f      	beq.n	8002058 <HAL_DMA_IRQHandler+0x1bc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800207c <HAL_DMA_IRQHandler+0x1e0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d048      	beq.n	8002054 <HAL_DMA_IRQHandler+0x1b8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002080 <HAL_DMA_IRQHandler+0x1e4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d040      	beq.n	800204e <HAL_DMA_IRQHandler+0x1b2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002084 <HAL_DMA_IRQHandler+0x1e8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d038      	beq.n	8002048 <HAL_DMA_IRQHandler+0x1ac>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2b      	ldr	r2, [pc, #172]	@ (8002088 <HAL_DMA_IRQHandler+0x1ec>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d030      	beq.n	8002042 <HAL_DMA_IRQHandler+0x1a6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a29      	ldr	r2, [pc, #164]	@ (800208c <HAL_DMA_IRQHandler+0x1f0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d028      	beq.n	800203c <HAL_DMA_IRQHandler+0x1a0>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <HAL_DMA_IRQHandler+0x1d8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d020      	beq.n	8002036 <HAL_DMA_IRQHandler+0x19a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	@ (8002090 <HAL_DMA_IRQHandler+0x1f4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_DMA_IRQHandler+0x196>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a24      	ldr	r2, [pc, #144]	@ (8002094 <HAL_DMA_IRQHandler+0x1f8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d012      	beq.n	800202e <HAL_DMA_IRQHandler+0x192>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a22      	ldr	r2, [pc, #136]	@ (8002098 <HAL_DMA_IRQHandler+0x1fc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00a      	beq.n	8002028 <HAL_DMA_IRQHandler+0x18c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a21      	ldr	r2, [pc, #132]	@ (800209c <HAL_DMA_IRQHandler+0x200>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d102      	bne.n	8002022 <HAL_DMA_IRQHandler+0x186>
 800201c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002020:	e01b      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002022:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002026:	e018      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800202c:	e015      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 800202e:	2340      	movs	r3, #64	@ 0x40
 8002030:	e013      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002032:	2304      	movs	r3, #4
 8002034:	e011      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002036:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800203a:	e00e      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 800203c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002040:	e00b      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002042:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002046:	e008      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800204c:	e005      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 800204e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002052:	e002      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002054:	2340      	movs	r3, #64	@ 0x40
 8002056:	e000      	b.n	800205a <HAL_DMA_IRQHandler+0x1be>
 8002058:	2304      	movs	r3, #4
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <HAL_DMA_IRQHandler+0x208>)
 800205c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8136 	beq.w	80022d4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002070:	e130      	b.n	80022d4 <HAL_DMA_IRQHandler+0x438>
 8002072:	bf00      	nop
 8002074:	40020080 	.word	0x40020080
 8002078:	40020008 	.word	0x40020008
 800207c:	4002001c 	.word	0x4002001c
 8002080:	40020030 	.word	0x40020030
 8002084:	40020044 	.word	0x40020044
 8002088:	40020058 	.word	0x40020058
 800208c:	4002006c 	.word	0x4002006c
 8002090:	40020408 	.word	0x40020408
 8002094:	4002041c 	.word	0x4002041c
 8002098:	40020430 	.word	0x40020430
 800209c:	40020444 	.word	0x40020444
 80020a0:	40020400 	.word	0x40020400
 80020a4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	2202      	movs	r2, #2
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80dd 	beq.w	8002274 <HAL_DMA_IRQHandler+0x3d8>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80d7 	beq.w	8002274 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 020a 	bic.w	r2, r2, #10
 80020e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b7b      	ldr	r3, [pc, #492]	@ (80022e0 <HAL_DMA_IRQHandler+0x444>)
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d958      	bls.n	80021aa <HAL_DMA_IRQHandler+0x30e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a79      	ldr	r2, [pc, #484]	@ (80022e4 <HAL_DMA_IRQHandler+0x448>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04f      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x306>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a78      	ldr	r2, [pc, #480]	@ (80022e8 <HAL_DMA_IRQHandler+0x44c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d048      	beq.n	800219e <HAL_DMA_IRQHandler+0x302>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a76      	ldr	r2, [pc, #472]	@ (80022ec <HAL_DMA_IRQHandler+0x450>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d040      	beq.n	8002198 <HAL_DMA_IRQHandler+0x2fc>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a75      	ldr	r2, [pc, #468]	@ (80022f0 <HAL_DMA_IRQHandler+0x454>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d038      	beq.n	8002192 <HAL_DMA_IRQHandler+0x2f6>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a73      	ldr	r2, [pc, #460]	@ (80022f4 <HAL_DMA_IRQHandler+0x458>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d030      	beq.n	800218c <HAL_DMA_IRQHandler+0x2f0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a72      	ldr	r2, [pc, #456]	@ (80022f8 <HAL_DMA_IRQHandler+0x45c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d028      	beq.n	8002186 <HAL_DMA_IRQHandler+0x2ea>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a69      	ldr	r2, [pc, #420]	@ (80022e0 <HAL_DMA_IRQHandler+0x444>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d020      	beq.n	8002180 <HAL_DMA_IRQHandler+0x2e4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6e      	ldr	r2, [pc, #440]	@ (80022fc <HAL_DMA_IRQHandler+0x460>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d019      	beq.n	800217c <HAL_DMA_IRQHandler+0x2e0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6c      	ldr	r2, [pc, #432]	@ (8002300 <HAL_DMA_IRQHandler+0x464>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d012      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2dc>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6b      	ldr	r2, [pc, #428]	@ (8002304 <HAL_DMA_IRQHandler+0x468>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00a      	beq.n	8002172 <HAL_DMA_IRQHandler+0x2d6>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a69      	ldr	r2, [pc, #420]	@ (8002308 <HAL_DMA_IRQHandler+0x46c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d102      	bne.n	800216c <HAL_DMA_IRQHandler+0x2d0>
 8002166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800216a:	e01b      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 800216c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002170:	e018      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 8002172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002176:	e015      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 8002178:	2320      	movs	r3, #32
 800217a:	e013      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 800217c:	2302      	movs	r3, #2
 800217e:	e011      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 8002180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002184:	e00e      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 8002186:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800218a:	e00b      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 800218c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002190:	e008      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 8002192:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002196:	e005      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 8002198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800219c:	e002      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 800219e:	2320      	movs	r3, #32
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_IRQHandler+0x308>
 80021a2:	2302      	movs	r3, #2
 80021a4:	4a59      	ldr	r2, [pc, #356]	@ (800230c <HAL_DMA_IRQHandler+0x470>)
 80021a6:	6053      	str	r3, [r2, #4]
 80021a8:	e057      	b.n	800225a <HAL_DMA_IRQHandler+0x3be>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a4d      	ldr	r2, [pc, #308]	@ (80022e4 <HAL_DMA_IRQHandler+0x448>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d04f      	beq.n	8002254 <HAL_DMA_IRQHandler+0x3b8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	@ (80022e8 <HAL_DMA_IRQHandler+0x44c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d048      	beq.n	8002250 <HAL_DMA_IRQHandler+0x3b4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a4a      	ldr	r2, [pc, #296]	@ (80022ec <HAL_DMA_IRQHandler+0x450>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d040      	beq.n	800224a <HAL_DMA_IRQHandler+0x3ae>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_DMA_IRQHandler+0x454>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d038      	beq.n	8002244 <HAL_DMA_IRQHandler+0x3a8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a47      	ldr	r2, [pc, #284]	@ (80022f4 <HAL_DMA_IRQHandler+0x458>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d030      	beq.n	800223e <HAL_DMA_IRQHandler+0x3a2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a45      	ldr	r2, [pc, #276]	@ (80022f8 <HAL_DMA_IRQHandler+0x45c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d028      	beq.n	8002238 <HAL_DMA_IRQHandler+0x39c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3d      	ldr	r2, [pc, #244]	@ (80022e0 <HAL_DMA_IRQHandler+0x444>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d020      	beq.n	8002232 <HAL_DMA_IRQHandler+0x396>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a41      	ldr	r2, [pc, #260]	@ (80022fc <HAL_DMA_IRQHandler+0x460>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_DMA_IRQHandler+0x392>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a40      	ldr	r2, [pc, #256]	@ (8002300 <HAL_DMA_IRQHandler+0x464>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d012      	beq.n	800222a <HAL_DMA_IRQHandler+0x38e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3e      	ldr	r2, [pc, #248]	@ (8002304 <HAL_DMA_IRQHandler+0x468>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x388>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a3d      	ldr	r2, [pc, #244]	@ (8002308 <HAL_DMA_IRQHandler+0x46c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d102      	bne.n	800221e <HAL_DMA_IRQHandler+0x382>
 8002218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800221c:	e01b      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 800221e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002222:	e018      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 8002224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002228:	e015      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 800222a:	2320      	movs	r3, #32
 800222c:	e013      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 800222e:	2302      	movs	r3, #2
 8002230:	e011      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 8002232:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002236:	e00e      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 8002238:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800223c:	e00b      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 800223e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002242:	e008      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 8002244:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002248:	e005      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 800224a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800224e:	e002      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 8002250:	2320      	movs	r3, #32
 8002252:	e000      	b.n	8002256 <HAL_DMA_IRQHandler+0x3ba>
 8002254:	2302      	movs	r3, #2
 8002256:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <HAL_DMA_IRQHandler+0x474>)
 8002258:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d034      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002272:	e02f      	b.n	80022d4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	2208      	movs	r2, #8
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d028      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x43a>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d023      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 020e 	bic.w	r2, r2, #14
 800229c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
    }
  }
  return;
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
}
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40020080 	.word	0x40020080
 80022e4:	40020008 	.word	0x40020008
 80022e8:	4002001c 	.word	0x4002001c
 80022ec:	40020030 	.word	0x40020030
 80022f0:	40020044 	.word	0x40020044
 80022f4:	40020058 	.word	0x40020058
 80022f8:	4002006c 	.word	0x4002006c
 80022fc:	40020408 	.word	0x40020408
 8002300:	4002041c 	.word	0x4002041c
 8002304:	40020430 	.word	0x40020430
 8002308:	40020444 	.word	0x40020444
 800230c:	40020400 	.word	0x40020400
 8002310:	40020000 	.word	0x40020000

08002314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b10      	cmp	r3, #16
 8002340:	d108      	bne.n	8002354 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002352:	e007      	b.n	8002364 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
	...

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b08b      	sub	sp, #44	@ 0x2c
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	e179      	b.n	8002678 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002384:	2201      	movs	r2, #1
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8168 	bne.w	8002672 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a96      	ldr	r2, [pc, #600]	@ (8002600 <HAL_GPIO_Init+0x290>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d05e      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023ac:	4a94      	ldr	r2, [pc, #592]	@ (8002600 <HAL_GPIO_Init+0x290>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d875      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023b2:	4a94      	ldr	r2, [pc, #592]	@ (8002604 <HAL_GPIO_Init+0x294>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d058      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023b8:	4a92      	ldr	r2, [pc, #584]	@ (8002604 <HAL_GPIO_Init+0x294>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d86f      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023be:	4a92      	ldr	r2, [pc, #584]	@ (8002608 <HAL_GPIO_Init+0x298>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d052      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023c4:	4a90      	ldr	r2, [pc, #576]	@ (8002608 <HAL_GPIO_Init+0x298>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d869      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023ca:	4a90      	ldr	r2, [pc, #576]	@ (800260c <HAL_GPIO_Init+0x29c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04c      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023d0:	4a8e      	ldr	r2, [pc, #568]	@ (800260c <HAL_GPIO_Init+0x29c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d863      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023d6:	4a8e      	ldr	r2, [pc, #568]	@ (8002610 <HAL_GPIO_Init+0x2a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d046      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023dc:	4a8c      	ldr	r2, [pc, #560]	@ (8002610 <HAL_GPIO_Init+0x2a0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d85d      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d82a      	bhi.n	800243c <HAL_GPIO_Init+0xcc>
 80023e6:	2b12      	cmp	r3, #18
 80023e8:	d859      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023ea:	a201      	add	r2, pc, #4	@ (adr r2, 80023f0 <HAL_GPIO_Init+0x80>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	08002445 	.word	0x08002445
 80023f8:	08002457 	.word	0x08002457
 80023fc:	08002499 	.word	0x08002499
 8002400:	0800249f 	.word	0x0800249f
 8002404:	0800249f 	.word	0x0800249f
 8002408:	0800249f 	.word	0x0800249f
 800240c:	0800249f 	.word	0x0800249f
 8002410:	0800249f 	.word	0x0800249f
 8002414:	0800249f 	.word	0x0800249f
 8002418:	0800249f 	.word	0x0800249f
 800241c:	0800249f 	.word	0x0800249f
 8002420:	0800249f 	.word	0x0800249f
 8002424:	0800249f 	.word	0x0800249f
 8002428:	0800249f 	.word	0x0800249f
 800242c:	0800249f 	.word	0x0800249f
 8002430:	0800249f 	.word	0x0800249f
 8002434:	0800244d 	.word	0x0800244d
 8002438:	08002461 	.word	0x08002461
 800243c:	4a75      	ldr	r2, [pc, #468]	@ (8002614 <HAL_GPIO_Init+0x2a4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002442:	e02c      	b.n	800249e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	623b      	str	r3, [r7, #32]
          break;
 800244a:	e029      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	3304      	adds	r3, #4
 8002452:	623b      	str	r3, [r7, #32]
          break;
 8002454:	e024      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	3308      	adds	r3, #8
 800245c:	623b      	str	r3, [r7, #32]
          break;
 800245e:	e01f      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	330c      	adds	r3, #12
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e01a      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002472:	2304      	movs	r3, #4
 8002474:	623b      	str	r3, [r7, #32]
          break;
 8002476:	e013      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002480:	2308      	movs	r3, #8
 8002482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	611a      	str	r2, [r3, #16]
          break;
 800248a:	e009      	b.n	80024a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800248c:	2308      	movs	r3, #8
 800248e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	615a      	str	r2, [r3, #20]
          break;
 8002496:	e003      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
          break;
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          break;
 800249e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2bff      	cmp	r3, #255	@ 0xff
 80024a4:	d801      	bhi.n	80024aa <HAL_GPIO_Init+0x13a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_Init+0x13e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2bff      	cmp	r3, #255	@ 0xff
 80024b4:	d802      	bhi.n	80024bc <HAL_GPIO_Init+0x14c>
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	e002      	b.n	80024c2 <HAL_GPIO_Init+0x152>
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	3b08      	subs	r3, #8
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	210f      	movs	r1, #15
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80c1 	beq.w	8002672 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024f0:	4b49      	ldr	r3, [pc, #292]	@ (8002618 <HAL_GPIO_Init+0x2a8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a48      	ldr	r2, [pc, #288]	@ (8002618 <HAL_GPIO_Init+0x2a8>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <HAL_GPIO_Init+0x2a8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002508:	4a44      	ldr	r2, [pc, #272]	@ (800261c <HAL_GPIO_Init+0x2ac>)
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3c      	ldr	r2, [pc, #240]	@ (8002620 <HAL_GPIO_Init+0x2b0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d01f      	beq.n	8002574 <HAL_GPIO_Init+0x204>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3b      	ldr	r2, [pc, #236]	@ (8002624 <HAL_GPIO_Init+0x2b4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d019      	beq.n	8002570 <HAL_GPIO_Init+0x200>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3a      	ldr	r2, [pc, #232]	@ (8002628 <HAL_GPIO_Init+0x2b8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x1fc>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a39      	ldr	r2, [pc, #228]	@ (800262c <HAL_GPIO_Init+0x2bc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1f8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a38      	ldr	r2, [pc, #224]	@ (8002630 <HAL_GPIO_Init+0x2c0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1f4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a37      	ldr	r2, [pc, #220]	@ (8002634 <HAL_GPIO_Init+0x2c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1f0>
 800255c:	2305      	movs	r3, #5
 800255e:	e00a      	b.n	8002576 <HAL_GPIO_Init+0x206>
 8002560:	2306      	movs	r3, #6
 8002562:	e008      	b.n	8002576 <HAL_GPIO_Init+0x206>
 8002564:	2304      	movs	r3, #4
 8002566:	e006      	b.n	8002576 <HAL_GPIO_Init+0x206>
 8002568:	2303      	movs	r3, #3
 800256a:	e004      	b.n	8002576 <HAL_GPIO_Init+0x206>
 800256c:	2302      	movs	r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x206>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_GPIO_Init+0x206>
 8002574:	2300      	movs	r3, #0
 8002576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	4093      	lsls	r3, r2
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002586:	4925      	ldr	r1, [pc, #148]	@ (800261c <HAL_GPIO_Init+0x2ac>)
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a0:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	4924      	ldr	r1, [pc, #144]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ae:	4b22      	ldr	r3, [pc, #136]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4920      	ldr	r1, [pc, #128]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	491a      	ldr	r1, [pc, #104]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
 80025d4:	e006      	b.n	80025e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025d6:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	43db      	mvns	r3, r3
 80025de:	4916      	ldr	r1, [pc, #88]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d025      	beq.n	800263c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4910      	ldr	r1, [pc, #64]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
 80025fc:	e025      	b.n	800264a <HAL_GPIO_Init+0x2da>
 80025fe:	bf00      	nop
 8002600:	10320000 	.word	0x10320000
 8002604:	10310000 	.word	0x10310000
 8002608:	10220000 	.word	0x10220000
 800260c:	10210000 	.word	0x10210000
 8002610:	10120000 	.word	0x10120000
 8002614:	10110000 	.word	0x10110000
 8002618:	40021000 	.word	0x40021000
 800261c:	40010000 	.word	0x40010000
 8002620:	40010800 	.word	0x40010800
 8002624:	40010c00 	.word	0x40010c00
 8002628:	40011000 	.word	0x40011000
 800262c:	40011400 	.word	0x40011400
 8002630:	40011800 	.word	0x40011800
 8002634:	40011c00 	.word	0x40011c00
 8002638:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800263c:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_GPIO_Init+0x324>)
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	43db      	mvns	r3, r3
 8002644:	4913      	ldr	r1, [pc, #76]	@ (8002694 <HAL_GPIO_Init+0x324>)
 8002646:	4013      	ands	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_GPIO_Init+0x324>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	490e      	ldr	r1, [pc, #56]	@ (8002694 <HAL_GPIO_Init+0x324>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
 8002662:	e006      	b.n	8002672 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002664:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_GPIO_Init+0x324>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	43db      	mvns	r3, r3
 800266c:	4909      	ldr	r1, [pc, #36]	@ (8002694 <HAL_GPIO_Init+0x324>)
 800266e:	4013      	ands	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	3301      	adds	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f47f ae7e 	bne.w	8002384 <HAL_GPIO_Init+0x14>
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	372c      	adds	r7, #44	@ 0x2c
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40010400 	.word	0x40010400

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e272      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8087 	beq.w	80027f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e8:	4b92      	ldr	r3, [pc, #584]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d00c      	beq.n	800270e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d112      	bne.n	8002726 <HAL_RCC_OscConfig+0x5e>
 8002700:	4b8c      	ldr	r3, [pc, #560]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270c:	d10b      	bne.n	8002726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	4b89      	ldr	r3, [pc, #548]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d06c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x12c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d168      	bne.n	80027f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e24c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x76>
 8002730:	4b80      	ldr	r3, [pc, #512]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a7f      	ldr	r2, [pc, #508]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e02e      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b7b      	ldr	r3, [pc, #492]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7a      	ldr	r2, [pc, #488]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b78      	ldr	r3, [pc, #480]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a77      	ldr	r2, [pc, #476]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0xbc>
 800276a:	4b72      	ldr	r3, [pc, #456]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a71      	ldr	r2, [pc, #452]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b6f      	ldr	r3, [pc, #444]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6e      	ldr	r2, [pc, #440]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 8002784:	4b6b      	ldr	r3, [pc, #428]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6a      	ldr	r2, [pc, #424]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b68      	ldr	r3, [pc, #416]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a67      	ldr	r2, [pc, #412]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff f968 	bl	8001a78 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7ff f964 	bl	8001a78 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e200      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b5d      	ldr	r3, [pc, #372]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xe4>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff f954 	bl	8001a78 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7ff f950 	bl	8001a78 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1ec      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	4b53      	ldr	r3, [pc, #332]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x10c>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d063      	beq.n	80028ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002802:	4b4c      	ldr	r3, [pc, #304]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800280e:	4b49      	ldr	r3, [pc, #292]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d11c      	bne.n	8002854 <HAL_RCC_OscConfig+0x18c>
 800281a:	4b46      	ldr	r3, [pc, #280]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	4b43      	ldr	r3, [pc, #268]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_RCC_OscConfig+0x176>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e1c0      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b3d      	ldr	r3, [pc, #244]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4939      	ldr	r1, [pc, #228]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e03a      	b.n	80028ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285c:	4b36      	ldr	r3, [pc, #216]	@ (8002938 <HAL_RCC_OscConfig+0x270>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7ff f909 	bl	8001a78 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7ff f905 	bl	8001a78 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1a1      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4927      	ldr	r1, [pc, #156]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b26      	ldr	r3, [pc, #152]	@ (8002938 <HAL_RCC_OscConfig+0x270>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff f8e8 	bl	8001a78 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ac:	f7ff f8e4 	bl	8001a78 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e180      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03a      	beq.n	800294c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d019      	beq.n	8002912 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <HAL_RCC_OscConfig+0x274>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7ff f8c8 	bl	8001a78 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ec:	f7ff f8c4 	bl	8001a78 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e160      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800290a:	2001      	movs	r0, #1
 800290c:	f000 fa9c 	bl	8002e48 <RCC_Delay>
 8002910:	e01c      	b.n	800294c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <HAL_RCC_OscConfig+0x274>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7ff f8ae 	bl	8001a78 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291e:	e00f      	b.n	8002940 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7ff f8aa 	bl	8001a78 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d908      	bls.n	8002940 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e146      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	42420000 	.word	0x42420000
 800293c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	4b92      	ldr	r3, [pc, #584]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e9      	bne.n	8002920 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80a6 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b88      	ldr	r3, [pc, #544]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4a87      	ldr	r2, [pc, #540]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002974:	61d3      	str	r3, [r2, #28]
 8002976:	4b85      	ldr	r3, [pc, #532]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b82      	ldr	r3, [pc, #520]	@ (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b7f      	ldr	r3, [pc, #508]	@ (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7e      	ldr	r2, [pc, #504]	@ (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7ff f86b 	bl	8001a78 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7ff f867 	bl	8001a78 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b64      	cmp	r3, #100	@ 0x64
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e103      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b75      	ldr	r3, [pc, #468]	@ (8002b90 <HAL_RCC_OscConfig+0x4c8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x312>
 80029cc:	4b6f      	ldr	r3, [pc, #444]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4a6e      	ldr	r2, [pc, #440]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	e02d      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x334>
 80029e2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a69      	ldr	r2, [pc, #420]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6213      	str	r3, [r2, #32]
 80029ee:	4b67      	ldr	r3, [pc, #412]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a66      	ldr	r2, [pc, #408]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	e01c      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x356>
 8002a04:	4b61      	ldr	r3, [pc, #388]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a60      	ldr	r2, [pc, #384]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6213      	str	r3, [r2, #32]
 8002a10:	4b5e      	ldr	r3, [pc, #376]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a5d      	ldr	r2, [pc, #372]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	e00b      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a5a      	ldr	r2, [pc, #360]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	4b58      	ldr	r3, [pc, #352]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a57      	ldr	r2, [pc, #348]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d015      	beq.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7ff f81b 	bl	8001a78 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7ff f817 	bl	8001a78 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0b1      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ee      	beq.n	8002a46 <HAL_RCC_OscConfig+0x37e>
 8002a68:	e014      	b.n	8002a94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f805 	bl	8001a78 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7ff f801 	bl	8001a78 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e09b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	4b40      	ldr	r3, [pc, #256]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8087 	beq.w	8002bbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab0:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d061      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d146      	bne.n	8002b52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac4:	4b33      	ldr	r3, [pc, #204]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe ffd5 	bl	8001a78 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe ffd1 	bl	8001a78 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e06d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae4:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af8:	d108      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002afa:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4921      	ldr	r1, [pc, #132]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a19      	ldr	r1, [r3, #32]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	491b      	ldr	r1, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ffa5 	bl	8001a78 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe ffa1 	bl	8001a78 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e03d      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x46a>
 8002b50:	e035      	b.n	8002bbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe ff8e 	bl	8001a78 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe ff8a 	bl	8001a78 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e026      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x498>
 8002b7e:	e01e      	b.n	8002bbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e019      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_OscConfig+0x500>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d106      	bne.n	8002bba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000

08002bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0d0      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d910      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b67      	ldr	r3, [pc, #412]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4965      	ldr	r1, [pc, #404]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d040      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d115      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b41      	ldr	r3, [pc, #260]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e073      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06b      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4936      	ldr	r1, [pc, #216]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fedc 	bl	8001a78 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe fed8 	bl	8001a78 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e053      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b27      	ldr	r3, [pc, #156]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d210      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b24      	ldr	r3, [pc, #144]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4922      	ldr	r1, [pc, #136]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f821 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <HAL_RCC_ClockConfig+0x1cc>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCC_ClockConfig+0x1d0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fe3a 	bl	80019f4 <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08005a4c 	.word	0x08005a4c
 8002d98:	20000004 	.word	0x20000004
 8002d9c:	20000008 	.word	0x20000008

08002da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	2300      	movs	r3, #0
 8002db4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dce:	e027      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dd2:	613b      	str	r3, [r7, #16]
      break;
 8002dd4:	e027      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	0c9b      	lsrs	r3, r3, #18
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	4a17      	ldr	r2, [pc, #92]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002de0:	5cd3      	ldrb	r3, [r2, r3]
 8002de2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	0c5b      	lsrs	r3, r3, #17
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	4a11      	ldr	r2, [pc, #68]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e02:	fb03 f202 	mul.w	r2, r3, r2
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e004      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0c      	ldr	r2, [pc, #48]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	613b      	str	r3, [r7, #16]
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e22:	613b      	str	r3, [r7, #16]
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	693b      	ldr	r3, [r7, #16]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	007a1200 	.word	0x007a1200
 8002e3c:	08005a5c 	.word	0x08005a5c
 8002e40:	08005a6c 	.word	0x08005a6c
 8002e44:	003d0900 	.word	0x003d0900

08002e48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e50:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <RCC_Delay+0x34>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <RCC_Delay+0x38>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0a5b      	lsrs	r3, r3, #9
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e64:	bf00      	nop
  }
  while (Delay --);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	60fa      	str	r2, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f9      	bne.n	8002e64 <RCC_Delay+0x1c>
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e076      	b.n	8002f84 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ea6:	d009      	beq.n	8002ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
 8002eae:	e005      	b.n	8002ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fc76 	bl	80017c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	ea42 0103 	orr.w	r1, r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	0c1a      	lsrs	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f002 0204 	and.w	r2, r2, #4
 8002f62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f9c:	f7fe fd6c 	bl	8001a78 <HAL_GetTick>
 8002fa0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e12a      	b.n	800320c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Transmit+0x36>
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e122      	b.n	800320c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_SPI_Transmit+0x48>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e11b      	b.n	800320c <HAL_SPI_Transmit+0x280>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003022:	d10f      	bne.n	8003044 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003032:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003042:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304e:	2b40      	cmp	r3, #64	@ 0x40
 8003050:	d007      	beq.n	8003062 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800306a:	d152      	bne.n	8003112 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_SPI_Transmit+0xee>
 8003074:	8b7b      	ldrh	r3, [r7, #26]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d145      	bne.n	8003106 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800309e:	e032      	b.n	8003106 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d112      	bne.n	80030d4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	881a      	ldrh	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	1c9a      	adds	r2, r3, #2
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030d2:	e018      	b.n	8003106 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030d4:	f7fe fcd0 	bl	8001a78 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d803      	bhi.n	80030ec <HAL_SPI_Transmit+0x160>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d102      	bne.n	80030f2 <HAL_SPI_Transmit+0x166>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e082      	b.n	800320c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1c7      	bne.n	80030a0 <HAL_SPI_Transmit+0x114>
 8003110:	e053      	b.n	80031ba <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_SPI_Transmit+0x194>
 800311a:	8b7b      	ldrh	r3, [r7, #26]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d147      	bne.n	80031b0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003146:	e033      	b.n	80031b0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d113      	bne.n	800317e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800317c:	e018      	b.n	80031b0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317e:	f7fe fc7b 	bl	8001a78 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d803      	bhi.n	8003196 <HAL_SPI_Transmit+0x20a>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d102      	bne.n	800319c <HAL_SPI_Transmit+0x210>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e02d      	b.n	800320c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1c6      	bne.n	8003148 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f9f6 	bl	80035b0 <SPI_EndRxTxTransaction>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800320a:	2300      	movs	r3, #0
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	e097      	b.n	8003362 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_SPI_Transmit_DMA+0x2a>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e08f      	b.n	8003362 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_SPI_Transmit_DMA+0x3c>
 800324c:	2302      	movs	r3, #2
 800324e:	e088      	b.n	8003362 <HAL_SPI_Transmit_DMA+0x14e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2203      	movs	r2, #3
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800329e:	d10f      	bne.n	80032c0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c4:	4a29      	ldr	r2, [pc, #164]	@ (800336c <HAL_SPI_Transmit_DMA+0x158>)
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032cc:	4a28      	ldr	r2, [pc, #160]	@ (8003370 <HAL_SPI_Transmit_DMA+0x15c>)
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d4:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <HAL_SPI_Transmit_DMA+0x160>)
 80032d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	4619      	mov	r1, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032f8:	f7fe fd70 	bl	8001ddc <HAL_DMA_Start_IT>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e023      	b.n	8003362 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	d007      	beq.n	8003338 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0220 	orr.w	r2, r2, #32
 800334e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0202 	orr.w	r2, r2, #2
 800335e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08003443 	.word	0x08003443
 8003370:	0800339d 	.word	0x0800339d
 8003374:	0800345f 	.word	0x0800345f

08003378 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033aa:	f7fe fb65 	bl	8001a78 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d03b      	beq.n	8003436 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0220 	bic.w	r2, r2, #32
 80033cc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0202 	bic.w	r2, r2, #2
 80033dc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	2164      	movs	r1, #100	@ 0x64
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f000 f8e4 	bl	80035b0 <SPI_EndRxTxTransaction>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	f043 0220 	orr.w	r2, r3, #32
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2200      	movs	r2, #0
 800341c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800342e:	6978      	ldr	r0, [r7, #20]
 8003430:	f7ff ffab 	bl	800338a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003434:	e002      	b.n	800343c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7fd fafa 	bl	8000a30 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff ff91 	bl	8003378 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0203 	bic.w	r2, r2, #3
 800347a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f043 0210 	orr.w	r2, r3, #16
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff ff7a 	bl	800338a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034b0:	f7fe fae2 	bl	8001a78 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4413      	add	r3, r2
 80034be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034c0:	f7fe fada 	bl	8001a78 <HAL_GetTick>
 80034c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034c6:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	015b      	lsls	r3, r3, #5
 80034cc:	0d1b      	lsrs	r3, r3, #20
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034d6:	e054      	b.n	8003582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d050      	beq.n	8003582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034e0:	f7fe faca 	bl	8001a78 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d902      	bls.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d13d      	bne.n	8003572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800350e:	d111      	bne.n	8003534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003518:	d004      	beq.n	8003524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003522:	d107      	bne.n	8003534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800353c:	d10f      	bne.n	800355e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800355c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e017      	b.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3b01      	subs	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	429a      	cmp	r2, r3
 800359e:	d19b      	bne.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000004 	.word	0x20000004

080035b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2201      	movs	r2, #1
 80035c4:	2102      	movs	r1, #2
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7ff ff6a 	bl	80034a0 <SPI_WaitFlagStateUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e013      	b.n	800360a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff ff57 	bl	80034a0 <SPI_WaitFlagStateUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e000      	b.n	800360a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <siprintf>:
 8003614:	b40e      	push	{r1, r2, r3}
 8003616:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800361a:	b500      	push	{lr}
 800361c:	b09c      	sub	sp, #112	@ 0x70
 800361e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003620:	9002      	str	r0, [sp, #8]
 8003622:	9006      	str	r0, [sp, #24]
 8003624:	9107      	str	r1, [sp, #28]
 8003626:	9104      	str	r1, [sp, #16]
 8003628:	4808      	ldr	r0, [pc, #32]	@ (800364c <siprintf+0x38>)
 800362a:	4909      	ldr	r1, [pc, #36]	@ (8003650 <siprintf+0x3c>)
 800362c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003630:	9105      	str	r1, [sp, #20]
 8003632:	6800      	ldr	r0, [r0, #0]
 8003634:	a902      	add	r1, sp, #8
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	f000 f992 	bl	8003960 <_svfiprintf_r>
 800363c:	2200      	movs	r2, #0
 800363e:	9b02      	ldr	r3, [sp, #8]
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	b01c      	add	sp, #112	@ 0x70
 8003644:	f85d eb04 	ldr.w	lr, [sp], #4
 8003648:	b003      	add	sp, #12
 800364a:	4770      	bx	lr
 800364c:	20000010 	.word	0x20000010
 8003650:	ffff0208 	.word	0xffff0208

08003654 <memset>:
 8003654:	4603      	mov	r3, r0
 8003656:	4402      	add	r2, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	f803 1b01 	strb.w	r1, [r3], #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <__errno>:
 8003664:	4b01      	ldr	r3, [pc, #4]	@ (800366c <__errno+0x8>)
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000010 	.word	0x20000010

08003670 <__libc_init_array>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	2600      	movs	r6, #0
 8003674:	4d0c      	ldr	r5, [pc, #48]	@ (80036a8 <__libc_init_array+0x38>)
 8003676:	4c0d      	ldr	r4, [pc, #52]	@ (80036ac <__libc_init_array+0x3c>)
 8003678:	1b64      	subs	r4, r4, r5
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	42a6      	cmp	r6, r4
 800367e:	d109      	bne.n	8003694 <__libc_init_array+0x24>
 8003680:	f000 fc78 	bl	8003f74 <_init>
 8003684:	2600      	movs	r6, #0
 8003686:	4d0a      	ldr	r5, [pc, #40]	@ (80036b0 <__libc_init_array+0x40>)
 8003688:	4c0a      	ldr	r4, [pc, #40]	@ (80036b4 <__libc_init_array+0x44>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	42a6      	cmp	r6, r4
 8003690:	d105      	bne.n	800369e <__libc_init_array+0x2e>
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	f855 3b04 	ldr.w	r3, [r5], #4
 8003698:	4798      	blx	r3
 800369a:	3601      	adds	r6, #1
 800369c:	e7ee      	b.n	800367c <__libc_init_array+0xc>
 800369e:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a2:	4798      	blx	r3
 80036a4:	3601      	adds	r6, #1
 80036a6:	e7f2      	b.n	800368e <__libc_init_array+0x1e>
 80036a8:	08005aa4 	.word	0x08005aa4
 80036ac:	08005aa4 	.word	0x08005aa4
 80036b0:	08005aa4 	.word	0x08005aa4
 80036b4:	08005aa8 	.word	0x08005aa8

080036b8 <__retarget_lock_acquire_recursive>:
 80036b8:	4770      	bx	lr

080036ba <__retarget_lock_release_recursive>:
 80036ba:	4770      	bx	lr

080036bc <_free_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4605      	mov	r5, r0
 80036c0:	2900      	cmp	r1, #0
 80036c2:	d040      	beq.n	8003746 <_free_r+0x8a>
 80036c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c8:	1f0c      	subs	r4, r1, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bfb8      	it	lt
 80036ce:	18e4      	addlt	r4, r4, r3
 80036d0:	f000 f8de 	bl	8003890 <__malloc_lock>
 80036d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003748 <_free_r+0x8c>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	b933      	cbnz	r3, 80036e8 <_free_r+0x2c>
 80036da:	6063      	str	r3, [r4, #4]
 80036dc:	6014      	str	r4, [r2, #0]
 80036de:	4628      	mov	r0, r5
 80036e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036e4:	f000 b8da 	b.w	800389c <__malloc_unlock>
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	d908      	bls.n	80036fe <_free_r+0x42>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	1821      	adds	r1, r4, r0
 80036f0:	428b      	cmp	r3, r1
 80036f2:	bf01      	itttt	eq
 80036f4:	6819      	ldreq	r1, [r3, #0]
 80036f6:	685b      	ldreq	r3, [r3, #4]
 80036f8:	1809      	addeq	r1, r1, r0
 80036fa:	6021      	streq	r1, [r4, #0]
 80036fc:	e7ed      	b.n	80036da <_free_r+0x1e>
 80036fe:	461a      	mov	r2, r3
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	b10b      	cbz	r3, 8003708 <_free_r+0x4c>
 8003704:	42a3      	cmp	r3, r4
 8003706:	d9fa      	bls.n	80036fe <_free_r+0x42>
 8003708:	6811      	ldr	r1, [r2, #0]
 800370a:	1850      	adds	r0, r2, r1
 800370c:	42a0      	cmp	r0, r4
 800370e:	d10b      	bne.n	8003728 <_free_r+0x6c>
 8003710:	6820      	ldr	r0, [r4, #0]
 8003712:	4401      	add	r1, r0
 8003714:	1850      	adds	r0, r2, r1
 8003716:	4283      	cmp	r3, r0
 8003718:	6011      	str	r1, [r2, #0]
 800371a:	d1e0      	bne.n	80036de <_free_r+0x22>
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4408      	add	r0, r1
 8003722:	6010      	str	r0, [r2, #0]
 8003724:	6053      	str	r3, [r2, #4]
 8003726:	e7da      	b.n	80036de <_free_r+0x22>
 8003728:	d902      	bls.n	8003730 <_free_r+0x74>
 800372a:	230c      	movs	r3, #12
 800372c:	602b      	str	r3, [r5, #0]
 800372e:	e7d6      	b.n	80036de <_free_r+0x22>
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	1821      	adds	r1, r4, r0
 8003734:	428b      	cmp	r3, r1
 8003736:	bf01      	itttt	eq
 8003738:	6819      	ldreq	r1, [r3, #0]
 800373a:	685b      	ldreq	r3, [r3, #4]
 800373c:	1809      	addeq	r1, r1, r0
 800373e:	6021      	streq	r1, [r4, #0]
 8003740:	6063      	str	r3, [r4, #4]
 8003742:	6054      	str	r4, [r2, #4]
 8003744:	e7cb      	b.n	80036de <_free_r+0x22>
 8003746:	bd38      	pop	{r3, r4, r5, pc}
 8003748:	20000284 	.word	0x20000284

0800374c <sbrk_aligned>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4e0f      	ldr	r6, [pc, #60]	@ (800378c <sbrk_aligned+0x40>)
 8003750:	460c      	mov	r4, r1
 8003752:	6831      	ldr	r1, [r6, #0]
 8003754:	4605      	mov	r5, r0
 8003756:	b911      	cbnz	r1, 800375e <sbrk_aligned+0x12>
 8003758:	f000 fbaa 	bl	8003eb0 <_sbrk_r>
 800375c:	6030      	str	r0, [r6, #0]
 800375e:	4621      	mov	r1, r4
 8003760:	4628      	mov	r0, r5
 8003762:	f000 fba5 	bl	8003eb0 <_sbrk_r>
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	d103      	bne.n	8003772 <sbrk_aligned+0x26>
 800376a:	f04f 34ff 	mov.w	r4, #4294967295
 800376e:	4620      	mov	r0, r4
 8003770:	bd70      	pop	{r4, r5, r6, pc}
 8003772:	1cc4      	adds	r4, r0, #3
 8003774:	f024 0403 	bic.w	r4, r4, #3
 8003778:	42a0      	cmp	r0, r4
 800377a:	d0f8      	beq.n	800376e <sbrk_aligned+0x22>
 800377c:	1a21      	subs	r1, r4, r0
 800377e:	4628      	mov	r0, r5
 8003780:	f000 fb96 	bl	8003eb0 <_sbrk_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d1f2      	bne.n	800376e <sbrk_aligned+0x22>
 8003788:	e7ef      	b.n	800376a <sbrk_aligned+0x1e>
 800378a:	bf00      	nop
 800378c:	20000280 	.word	0x20000280

08003790 <_malloc_r>:
 8003790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003794:	1ccd      	adds	r5, r1, #3
 8003796:	f025 0503 	bic.w	r5, r5, #3
 800379a:	3508      	adds	r5, #8
 800379c:	2d0c      	cmp	r5, #12
 800379e:	bf38      	it	cc
 80037a0:	250c      	movcc	r5, #12
 80037a2:	2d00      	cmp	r5, #0
 80037a4:	4606      	mov	r6, r0
 80037a6:	db01      	blt.n	80037ac <_malloc_r+0x1c>
 80037a8:	42a9      	cmp	r1, r5
 80037aa:	d904      	bls.n	80037b6 <_malloc_r+0x26>
 80037ac:	230c      	movs	r3, #12
 80037ae:	6033      	str	r3, [r6, #0]
 80037b0:	2000      	movs	r0, #0
 80037b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800388c <_malloc_r+0xfc>
 80037ba:	f000 f869 	bl	8003890 <__malloc_lock>
 80037be:	f8d8 3000 	ldr.w	r3, [r8]
 80037c2:	461c      	mov	r4, r3
 80037c4:	bb44      	cbnz	r4, 8003818 <_malloc_r+0x88>
 80037c6:	4629      	mov	r1, r5
 80037c8:	4630      	mov	r0, r6
 80037ca:	f7ff ffbf 	bl	800374c <sbrk_aligned>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	4604      	mov	r4, r0
 80037d2:	d158      	bne.n	8003886 <_malloc_r+0xf6>
 80037d4:	f8d8 4000 	ldr.w	r4, [r8]
 80037d8:	4627      	mov	r7, r4
 80037da:	2f00      	cmp	r7, #0
 80037dc:	d143      	bne.n	8003866 <_malloc_r+0xd6>
 80037de:	2c00      	cmp	r4, #0
 80037e0:	d04b      	beq.n	800387a <_malloc_r+0xea>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	4639      	mov	r1, r7
 80037e6:	4630      	mov	r0, r6
 80037e8:	eb04 0903 	add.w	r9, r4, r3
 80037ec:	f000 fb60 	bl	8003eb0 <_sbrk_r>
 80037f0:	4581      	cmp	r9, r0
 80037f2:	d142      	bne.n	800387a <_malloc_r+0xea>
 80037f4:	6821      	ldr	r1, [r4, #0]
 80037f6:	4630      	mov	r0, r6
 80037f8:	1a6d      	subs	r5, r5, r1
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7ff ffa6 	bl	800374c <sbrk_aligned>
 8003800:	3001      	adds	r0, #1
 8003802:	d03a      	beq.n	800387a <_malloc_r+0xea>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	442b      	add	r3, r5
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	f8d8 3000 	ldr.w	r3, [r8]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	bb62      	cbnz	r2, 800386c <_malloc_r+0xdc>
 8003812:	f8c8 7000 	str.w	r7, [r8]
 8003816:	e00f      	b.n	8003838 <_malloc_r+0xa8>
 8003818:	6822      	ldr	r2, [r4, #0]
 800381a:	1b52      	subs	r2, r2, r5
 800381c:	d420      	bmi.n	8003860 <_malloc_r+0xd0>
 800381e:	2a0b      	cmp	r2, #11
 8003820:	d917      	bls.n	8003852 <_malloc_r+0xc2>
 8003822:	1961      	adds	r1, r4, r5
 8003824:	42a3      	cmp	r3, r4
 8003826:	6025      	str	r5, [r4, #0]
 8003828:	bf18      	it	ne
 800382a:	6059      	strne	r1, [r3, #4]
 800382c:	6863      	ldr	r3, [r4, #4]
 800382e:	bf08      	it	eq
 8003830:	f8c8 1000 	streq.w	r1, [r8]
 8003834:	5162      	str	r2, [r4, r5]
 8003836:	604b      	str	r3, [r1, #4]
 8003838:	4630      	mov	r0, r6
 800383a:	f000 f82f 	bl	800389c <__malloc_unlock>
 800383e:	f104 000b 	add.w	r0, r4, #11
 8003842:	1d23      	adds	r3, r4, #4
 8003844:	f020 0007 	bic.w	r0, r0, #7
 8003848:	1ac2      	subs	r2, r0, r3
 800384a:	bf1c      	itt	ne
 800384c:	1a1b      	subne	r3, r3, r0
 800384e:	50a3      	strne	r3, [r4, r2]
 8003850:	e7af      	b.n	80037b2 <_malloc_r+0x22>
 8003852:	6862      	ldr	r2, [r4, #4]
 8003854:	42a3      	cmp	r3, r4
 8003856:	bf0c      	ite	eq
 8003858:	f8c8 2000 	streq.w	r2, [r8]
 800385c:	605a      	strne	r2, [r3, #4]
 800385e:	e7eb      	b.n	8003838 <_malloc_r+0xa8>
 8003860:	4623      	mov	r3, r4
 8003862:	6864      	ldr	r4, [r4, #4]
 8003864:	e7ae      	b.n	80037c4 <_malloc_r+0x34>
 8003866:	463c      	mov	r4, r7
 8003868:	687f      	ldr	r7, [r7, #4]
 800386a:	e7b6      	b.n	80037da <_malloc_r+0x4a>
 800386c:	461a      	mov	r2, r3
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	42a3      	cmp	r3, r4
 8003872:	d1fb      	bne.n	800386c <_malloc_r+0xdc>
 8003874:	2300      	movs	r3, #0
 8003876:	6053      	str	r3, [r2, #4]
 8003878:	e7de      	b.n	8003838 <_malloc_r+0xa8>
 800387a:	230c      	movs	r3, #12
 800387c:	4630      	mov	r0, r6
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	f000 f80c 	bl	800389c <__malloc_unlock>
 8003884:	e794      	b.n	80037b0 <_malloc_r+0x20>
 8003886:	6005      	str	r5, [r0, #0]
 8003888:	e7d6      	b.n	8003838 <_malloc_r+0xa8>
 800388a:	bf00      	nop
 800388c:	20000284 	.word	0x20000284

08003890 <__malloc_lock>:
 8003890:	4801      	ldr	r0, [pc, #4]	@ (8003898 <__malloc_lock+0x8>)
 8003892:	f7ff bf11 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 8003896:	bf00      	nop
 8003898:	2000027c 	.word	0x2000027c

0800389c <__malloc_unlock>:
 800389c:	4801      	ldr	r0, [pc, #4]	@ (80038a4 <__malloc_unlock+0x8>)
 800389e:	f7ff bf0c 	b.w	80036ba <__retarget_lock_release_recursive>
 80038a2:	bf00      	nop
 80038a4:	2000027c 	.word	0x2000027c

080038a8 <__ssputs_r>:
 80038a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	461f      	mov	r7, r3
 80038ae:	688e      	ldr	r6, [r1, #8]
 80038b0:	4682      	mov	sl, r0
 80038b2:	42be      	cmp	r6, r7
 80038b4:	460c      	mov	r4, r1
 80038b6:	4690      	mov	r8, r2
 80038b8:	680b      	ldr	r3, [r1, #0]
 80038ba:	d82d      	bhi.n	8003918 <__ssputs_r+0x70>
 80038bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038c4:	d026      	beq.n	8003914 <__ssputs_r+0x6c>
 80038c6:	6965      	ldr	r5, [r4, #20]
 80038c8:	6909      	ldr	r1, [r1, #16]
 80038ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038ce:	eba3 0901 	sub.w	r9, r3, r1
 80038d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038d6:	1c7b      	adds	r3, r7, #1
 80038d8:	444b      	add	r3, r9
 80038da:	106d      	asrs	r5, r5, #1
 80038dc:	429d      	cmp	r5, r3
 80038de:	bf38      	it	cc
 80038e0:	461d      	movcc	r5, r3
 80038e2:	0553      	lsls	r3, r2, #21
 80038e4:	d527      	bpl.n	8003936 <__ssputs_r+0x8e>
 80038e6:	4629      	mov	r1, r5
 80038e8:	f7ff ff52 	bl	8003790 <_malloc_r>
 80038ec:	4606      	mov	r6, r0
 80038ee:	b360      	cbz	r0, 800394a <__ssputs_r+0xa2>
 80038f0:	464a      	mov	r2, r9
 80038f2:	6921      	ldr	r1, [r4, #16]
 80038f4:	f000 fafa 	bl	8003eec <memcpy>
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	6126      	str	r6, [r4, #16]
 8003906:	444e      	add	r6, r9
 8003908:	6026      	str	r6, [r4, #0]
 800390a:	463e      	mov	r6, r7
 800390c:	6165      	str	r5, [r4, #20]
 800390e:	eba5 0509 	sub.w	r5, r5, r9
 8003912:	60a5      	str	r5, [r4, #8]
 8003914:	42be      	cmp	r6, r7
 8003916:	d900      	bls.n	800391a <__ssputs_r+0x72>
 8003918:	463e      	mov	r6, r7
 800391a:	4632      	mov	r2, r6
 800391c:	4641      	mov	r1, r8
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	f000 faac 	bl	8003e7c <memmove>
 8003924:	2000      	movs	r0, #0
 8003926:	68a3      	ldr	r3, [r4, #8]
 8003928:	1b9b      	subs	r3, r3, r6
 800392a:	60a3      	str	r3, [r4, #8]
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	4433      	add	r3, r6
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003936:	462a      	mov	r2, r5
 8003938:	f000 fae6 	bl	8003f08 <_realloc_r>
 800393c:	4606      	mov	r6, r0
 800393e:	2800      	cmp	r0, #0
 8003940:	d1e0      	bne.n	8003904 <__ssputs_r+0x5c>
 8003942:	4650      	mov	r0, sl
 8003944:	6921      	ldr	r1, [r4, #16]
 8003946:	f7ff feb9 	bl	80036bc <_free_r>
 800394a:	230c      	movs	r3, #12
 800394c:	f8ca 3000 	str.w	r3, [sl]
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f04f 30ff 	mov.w	r0, #4294967295
 8003956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	e7e9      	b.n	8003932 <__ssputs_r+0x8a>
	...

08003960 <_svfiprintf_r>:
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	4698      	mov	r8, r3
 8003966:	898b      	ldrh	r3, [r1, #12]
 8003968:	4607      	mov	r7, r0
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	460d      	mov	r5, r1
 800396e:	4614      	mov	r4, r2
 8003970:	b09d      	sub	sp, #116	@ 0x74
 8003972:	d510      	bpl.n	8003996 <_svfiprintf_r+0x36>
 8003974:	690b      	ldr	r3, [r1, #16]
 8003976:	b973      	cbnz	r3, 8003996 <_svfiprintf_r+0x36>
 8003978:	2140      	movs	r1, #64	@ 0x40
 800397a:	f7ff ff09 	bl	8003790 <_malloc_r>
 800397e:	6028      	str	r0, [r5, #0]
 8003980:	6128      	str	r0, [r5, #16]
 8003982:	b930      	cbnz	r0, 8003992 <_svfiprintf_r+0x32>
 8003984:	230c      	movs	r3, #12
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	b01d      	add	sp, #116	@ 0x74
 800398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003992:	2340      	movs	r3, #64	@ 0x40
 8003994:	616b      	str	r3, [r5, #20]
 8003996:	2300      	movs	r3, #0
 8003998:	9309      	str	r3, [sp, #36]	@ 0x24
 800399a:	2320      	movs	r3, #32
 800399c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039a0:	2330      	movs	r3, #48	@ 0x30
 80039a2:	f04f 0901 	mov.w	r9, #1
 80039a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80039aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003b44 <_svfiprintf_r+0x1e4>
 80039ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039b2:	4623      	mov	r3, r4
 80039b4:	469a      	mov	sl, r3
 80039b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039ba:	b10a      	cbz	r2, 80039c0 <_svfiprintf_r+0x60>
 80039bc:	2a25      	cmp	r2, #37	@ 0x25
 80039be:	d1f9      	bne.n	80039b4 <_svfiprintf_r+0x54>
 80039c0:	ebba 0b04 	subs.w	fp, sl, r4
 80039c4:	d00b      	beq.n	80039de <_svfiprintf_r+0x7e>
 80039c6:	465b      	mov	r3, fp
 80039c8:	4622      	mov	r2, r4
 80039ca:	4629      	mov	r1, r5
 80039cc:	4638      	mov	r0, r7
 80039ce:	f7ff ff6b 	bl	80038a8 <__ssputs_r>
 80039d2:	3001      	adds	r0, #1
 80039d4:	f000 80a7 	beq.w	8003b26 <_svfiprintf_r+0x1c6>
 80039d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039da:	445a      	add	r2, fp
 80039dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80039de:	f89a 3000 	ldrb.w	r3, [sl]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 809f 	beq.w	8003b26 <_svfiprintf_r+0x1c6>
 80039e8:	2300      	movs	r3, #0
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f2:	f10a 0a01 	add.w	sl, sl, #1
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	9307      	str	r3, [sp, #28]
 80039fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a00:	4654      	mov	r4, sl
 8003a02:	2205      	movs	r2, #5
 8003a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a08:	484e      	ldr	r0, [pc, #312]	@ (8003b44 <_svfiprintf_r+0x1e4>)
 8003a0a:	f000 fa61 	bl	8003ed0 <memchr>
 8003a0e:	9a04      	ldr	r2, [sp, #16]
 8003a10:	b9d8      	cbnz	r0, 8003a4a <_svfiprintf_r+0xea>
 8003a12:	06d0      	lsls	r0, r2, #27
 8003a14:	bf44      	itt	mi
 8003a16:	2320      	movmi	r3, #32
 8003a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a1c:	0711      	lsls	r1, r2, #28
 8003a1e:	bf44      	itt	mi
 8003a20:	232b      	movmi	r3, #43	@ 0x2b
 8003a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a26:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2c:	d015      	beq.n	8003a5a <_svfiprintf_r+0xfa>
 8003a2e:	4654      	mov	r4, sl
 8003a30:	2000      	movs	r0, #0
 8003a32:	f04f 0c0a 	mov.w	ip, #10
 8003a36:	9a07      	ldr	r2, [sp, #28]
 8003a38:	4621      	mov	r1, r4
 8003a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a3e:	3b30      	subs	r3, #48	@ 0x30
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	d94b      	bls.n	8003adc <_svfiprintf_r+0x17c>
 8003a44:	b1b0      	cbz	r0, 8003a74 <_svfiprintf_r+0x114>
 8003a46:	9207      	str	r2, [sp, #28]
 8003a48:	e014      	b.n	8003a74 <_svfiprintf_r+0x114>
 8003a4a:	eba0 0308 	sub.w	r3, r0, r8
 8003a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a52:	4313      	orrs	r3, r2
 8003a54:	46a2      	mov	sl, r4
 8003a56:	9304      	str	r3, [sp, #16]
 8003a58:	e7d2      	b.n	8003a00 <_svfiprintf_r+0xa0>
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	1d19      	adds	r1, r3, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	9103      	str	r1, [sp, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bfbb      	ittet	lt
 8003a66:	425b      	neglt	r3, r3
 8003a68:	f042 0202 	orrlt.w	r2, r2, #2
 8003a6c:	9307      	strge	r3, [sp, #28]
 8003a6e:	9307      	strlt	r3, [sp, #28]
 8003a70:	bfb8      	it	lt
 8003a72:	9204      	strlt	r2, [sp, #16]
 8003a74:	7823      	ldrb	r3, [r4, #0]
 8003a76:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a78:	d10a      	bne.n	8003a90 <_svfiprintf_r+0x130>
 8003a7a:	7863      	ldrb	r3, [r4, #1]
 8003a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a7e:	d132      	bne.n	8003ae6 <_svfiprintf_r+0x186>
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	3402      	adds	r4, #2
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	9203      	str	r2, [sp, #12]
 8003a8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a8e:	9305      	str	r3, [sp, #20]
 8003a90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003b48 <_svfiprintf_r+0x1e8>
 8003a94:	2203      	movs	r2, #3
 8003a96:	4650      	mov	r0, sl
 8003a98:	7821      	ldrb	r1, [r4, #0]
 8003a9a:	f000 fa19 	bl	8003ed0 <memchr>
 8003a9e:	b138      	cbz	r0, 8003ab0 <_svfiprintf_r+0x150>
 8003aa0:	2240      	movs	r2, #64	@ 0x40
 8003aa2:	9b04      	ldr	r3, [sp, #16]
 8003aa4:	eba0 000a 	sub.w	r0, r0, sl
 8003aa8:	4082      	lsls	r2, r0
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	3401      	adds	r4, #1
 8003aae:	9304      	str	r3, [sp, #16]
 8003ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab4:	2206      	movs	r2, #6
 8003ab6:	4825      	ldr	r0, [pc, #148]	@ (8003b4c <_svfiprintf_r+0x1ec>)
 8003ab8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003abc:	f000 fa08 	bl	8003ed0 <memchr>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d036      	beq.n	8003b32 <_svfiprintf_r+0x1d2>
 8003ac4:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <_svfiprintf_r+0x1f0>)
 8003ac6:	bb1b      	cbnz	r3, 8003b10 <_svfiprintf_r+0x1b0>
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	3307      	adds	r3, #7
 8003acc:	f023 0307 	bic.w	r3, r3, #7
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	9303      	str	r3, [sp, #12]
 8003ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ad6:	4433      	add	r3, r6
 8003ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ada:	e76a      	b.n	80039b2 <_svfiprintf_r+0x52>
 8003adc:	460c      	mov	r4, r1
 8003ade:	2001      	movs	r0, #1
 8003ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae4:	e7a8      	b.n	8003a38 <_svfiprintf_r+0xd8>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f04f 0c0a 	mov.w	ip, #10
 8003aec:	4619      	mov	r1, r3
 8003aee:	3401      	adds	r4, #1
 8003af0:	9305      	str	r3, [sp, #20]
 8003af2:	4620      	mov	r0, r4
 8003af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003af8:	3a30      	subs	r2, #48	@ 0x30
 8003afa:	2a09      	cmp	r2, #9
 8003afc:	d903      	bls.n	8003b06 <_svfiprintf_r+0x1a6>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0c6      	beq.n	8003a90 <_svfiprintf_r+0x130>
 8003b02:	9105      	str	r1, [sp, #20]
 8003b04:	e7c4      	b.n	8003a90 <_svfiprintf_r+0x130>
 8003b06:	4604      	mov	r4, r0
 8003b08:	2301      	movs	r3, #1
 8003b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b0e:	e7f0      	b.n	8003af2 <_svfiprintf_r+0x192>
 8003b10:	ab03      	add	r3, sp, #12
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	462a      	mov	r2, r5
 8003b16:	4638      	mov	r0, r7
 8003b18:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <_svfiprintf_r+0x1f4>)
 8003b1a:	a904      	add	r1, sp, #16
 8003b1c:	f3af 8000 	nop.w
 8003b20:	1c42      	adds	r2, r0, #1
 8003b22:	4606      	mov	r6, r0
 8003b24:	d1d6      	bne.n	8003ad4 <_svfiprintf_r+0x174>
 8003b26:	89ab      	ldrh	r3, [r5, #12]
 8003b28:	065b      	lsls	r3, r3, #25
 8003b2a:	f53f af2d 	bmi.w	8003988 <_svfiprintf_r+0x28>
 8003b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b30:	e72c      	b.n	800398c <_svfiprintf_r+0x2c>
 8003b32:	ab03      	add	r3, sp, #12
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	462a      	mov	r2, r5
 8003b38:	4638      	mov	r0, r7
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <_svfiprintf_r+0x1f4>)
 8003b3c:	a904      	add	r1, sp, #16
 8003b3e:	f000 f87d 	bl	8003c3c <_printf_i>
 8003b42:	e7ed      	b.n	8003b20 <_svfiprintf_r+0x1c0>
 8003b44:	08005a6e 	.word	0x08005a6e
 8003b48:	08005a74 	.word	0x08005a74
 8003b4c:	08005a78 	.word	0x08005a78
 8003b50:	00000000 	.word	0x00000000
 8003b54:	080038a9 	.word	0x080038a9

08003b58 <_printf_common>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	4698      	mov	r8, r3
 8003b60:	688a      	ldr	r2, [r1, #8]
 8003b62:	690b      	ldr	r3, [r1, #16]
 8003b64:	4607      	mov	r7, r0
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bfb8      	it	lt
 8003b6a:	4613      	movlt	r3, r2
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b72:	460c      	mov	r4, r1
 8003b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b78:	b10a      	cbz	r2, 8003b7e <_printf_common+0x26>
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6033      	str	r3, [r6, #0]
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	0699      	lsls	r1, r3, #26
 8003b82:	bf42      	ittt	mi
 8003b84:	6833      	ldrmi	r3, [r6, #0]
 8003b86:	3302      	addmi	r3, #2
 8003b88:	6033      	strmi	r3, [r6, #0]
 8003b8a:	6825      	ldr	r5, [r4, #0]
 8003b8c:	f015 0506 	ands.w	r5, r5, #6
 8003b90:	d106      	bne.n	8003ba0 <_printf_common+0x48>
 8003b92:	f104 0a19 	add.w	sl, r4, #25
 8003b96:	68e3      	ldr	r3, [r4, #12]
 8003b98:	6832      	ldr	r2, [r6, #0]
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	42ab      	cmp	r3, r5
 8003b9e:	dc2b      	bgt.n	8003bf8 <_printf_common+0xa0>
 8003ba0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	3b00      	subs	r3, #0
 8003ba8:	bf18      	it	ne
 8003baa:	2301      	movne	r3, #1
 8003bac:	0692      	lsls	r2, r2, #26
 8003bae:	d430      	bmi.n	8003c12 <_printf_common+0xba>
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bb8:	47c8      	blx	r9
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d023      	beq.n	8003c06 <_printf_common+0xae>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	6922      	ldr	r2, [r4, #16]
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf14      	ite	ne
 8003bca:	2500      	movne	r5, #0
 8003bcc:	6833      	ldreq	r3, [r6, #0]
 8003bce:	f04f 0600 	mov.w	r6, #0
 8003bd2:	bf08      	it	eq
 8003bd4:	68e5      	ldreq	r5, [r4, #12]
 8003bd6:	f104 041a 	add.w	r4, r4, #26
 8003bda:	bf08      	it	eq
 8003bdc:	1aed      	subeq	r5, r5, r3
 8003bde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003be2:	bf08      	it	eq
 8003be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be8:	4293      	cmp	r3, r2
 8003bea:	bfc4      	itt	gt
 8003bec:	1a9b      	subgt	r3, r3, r2
 8003bee:	18ed      	addgt	r5, r5, r3
 8003bf0:	42b5      	cmp	r5, r6
 8003bf2:	d11a      	bne.n	8003c2a <_printf_common+0xd2>
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	e008      	b.n	8003c0a <_printf_common+0xb2>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	4652      	mov	r2, sl
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	4638      	mov	r0, r7
 8003c00:	47c8      	blx	r9
 8003c02:	3001      	adds	r0, #1
 8003c04:	d103      	bne.n	8003c0e <_printf_common+0xb6>
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0e:	3501      	adds	r5, #1
 8003c10:	e7c1      	b.n	8003b96 <_printf_common+0x3e>
 8003c12:	2030      	movs	r0, #48	@ 0x30
 8003c14:	18e1      	adds	r1, r4, r3
 8003c16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c20:	4422      	add	r2, r4
 8003c22:	3302      	adds	r3, #2
 8003c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c28:	e7c2      	b.n	8003bb0 <_printf_common+0x58>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	4641      	mov	r1, r8
 8003c30:	4638      	mov	r0, r7
 8003c32:	47c8      	blx	r9
 8003c34:	3001      	adds	r0, #1
 8003c36:	d0e6      	beq.n	8003c06 <_printf_common+0xae>
 8003c38:	3601      	adds	r6, #1
 8003c3a:	e7d9      	b.n	8003bf0 <_printf_common+0x98>

08003c3c <_printf_i>:
 8003c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	7e0f      	ldrb	r7, [r1, #24]
 8003c42:	4691      	mov	r9, r2
 8003c44:	2f78      	cmp	r7, #120	@ 0x78
 8003c46:	4680      	mov	r8, r0
 8003c48:	460c      	mov	r4, r1
 8003c4a:	469a      	mov	sl, r3
 8003c4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c52:	d807      	bhi.n	8003c64 <_printf_i+0x28>
 8003c54:	2f62      	cmp	r7, #98	@ 0x62
 8003c56:	d80a      	bhi.n	8003c6e <_printf_i+0x32>
 8003c58:	2f00      	cmp	r7, #0
 8003c5a:	f000 80d3 	beq.w	8003e04 <_printf_i+0x1c8>
 8003c5e:	2f58      	cmp	r7, #88	@ 0x58
 8003c60:	f000 80ba 	beq.w	8003dd8 <_printf_i+0x19c>
 8003c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c6c:	e03a      	b.n	8003ce4 <_printf_i+0xa8>
 8003c6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c72:	2b15      	cmp	r3, #21
 8003c74:	d8f6      	bhi.n	8003c64 <_printf_i+0x28>
 8003c76:	a101      	add	r1, pc, #4	@ (adr r1, 8003c7c <_printf_i+0x40>)
 8003c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c7c:	08003cd5 	.word	0x08003cd5
 8003c80:	08003ce9 	.word	0x08003ce9
 8003c84:	08003c65 	.word	0x08003c65
 8003c88:	08003c65 	.word	0x08003c65
 8003c8c:	08003c65 	.word	0x08003c65
 8003c90:	08003c65 	.word	0x08003c65
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003c65 	.word	0x08003c65
 8003c9c:	08003c65 	.word	0x08003c65
 8003ca0:	08003c65 	.word	0x08003c65
 8003ca4:	08003c65 	.word	0x08003c65
 8003ca8:	08003deb 	.word	0x08003deb
 8003cac:	08003d13 	.word	0x08003d13
 8003cb0:	08003da5 	.word	0x08003da5
 8003cb4:	08003c65 	.word	0x08003c65
 8003cb8:	08003c65 	.word	0x08003c65
 8003cbc:	08003e0d 	.word	0x08003e0d
 8003cc0:	08003c65 	.word	0x08003c65
 8003cc4:	08003d13 	.word	0x08003d13
 8003cc8:	08003c65 	.word	0x08003c65
 8003ccc:	08003c65 	.word	0x08003c65
 8003cd0:	08003dad 	.word	0x08003dad
 8003cd4:	6833      	ldr	r3, [r6, #0]
 8003cd6:	1d1a      	adds	r2, r3, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6032      	str	r2, [r6, #0]
 8003cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ce0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e09e      	b.n	8003e26 <_printf_i+0x1ea>
 8003ce8:	6833      	ldr	r3, [r6, #0]
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	1d19      	adds	r1, r3, #4
 8003cee:	6031      	str	r1, [r6, #0]
 8003cf0:	0606      	lsls	r6, r0, #24
 8003cf2:	d501      	bpl.n	8003cf8 <_printf_i+0xbc>
 8003cf4:	681d      	ldr	r5, [r3, #0]
 8003cf6:	e003      	b.n	8003d00 <_printf_i+0xc4>
 8003cf8:	0645      	lsls	r5, r0, #25
 8003cfa:	d5fb      	bpl.n	8003cf4 <_printf_i+0xb8>
 8003cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	da03      	bge.n	8003d0c <_printf_i+0xd0>
 8003d04:	232d      	movs	r3, #45	@ 0x2d
 8003d06:	426d      	negs	r5, r5
 8003d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d0c:	230a      	movs	r3, #10
 8003d0e:	4859      	ldr	r0, [pc, #356]	@ (8003e74 <_printf_i+0x238>)
 8003d10:	e011      	b.n	8003d36 <_printf_i+0xfa>
 8003d12:	6821      	ldr	r1, [r4, #0]
 8003d14:	6833      	ldr	r3, [r6, #0]
 8003d16:	0608      	lsls	r0, r1, #24
 8003d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d1c:	d402      	bmi.n	8003d24 <_printf_i+0xe8>
 8003d1e:	0649      	lsls	r1, r1, #25
 8003d20:	bf48      	it	mi
 8003d22:	b2ad      	uxthmi	r5, r5
 8003d24:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	bf14      	ite	ne
 8003d2a:	230a      	movne	r3, #10
 8003d2c:	2308      	moveq	r3, #8
 8003d2e:	4851      	ldr	r0, [pc, #324]	@ (8003e74 <_printf_i+0x238>)
 8003d30:	2100      	movs	r1, #0
 8003d32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d36:	6866      	ldr	r6, [r4, #4]
 8003d38:	2e00      	cmp	r6, #0
 8003d3a:	bfa8      	it	ge
 8003d3c:	6821      	ldrge	r1, [r4, #0]
 8003d3e:	60a6      	str	r6, [r4, #8]
 8003d40:	bfa4      	itt	ge
 8003d42:	f021 0104 	bicge.w	r1, r1, #4
 8003d46:	6021      	strge	r1, [r4, #0]
 8003d48:	b90d      	cbnz	r5, 8003d4e <_printf_i+0x112>
 8003d4a:	2e00      	cmp	r6, #0
 8003d4c:	d04b      	beq.n	8003de6 <_printf_i+0x1aa>
 8003d4e:	4616      	mov	r6, r2
 8003d50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d54:	fb03 5711 	mls	r7, r3, r1, r5
 8003d58:	5dc7      	ldrb	r7, [r0, r7]
 8003d5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d5e:	462f      	mov	r7, r5
 8003d60:	42bb      	cmp	r3, r7
 8003d62:	460d      	mov	r5, r1
 8003d64:	d9f4      	bls.n	8003d50 <_printf_i+0x114>
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d10b      	bne.n	8003d82 <_printf_i+0x146>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	07df      	lsls	r7, r3, #31
 8003d6e:	d508      	bpl.n	8003d82 <_printf_i+0x146>
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	6861      	ldr	r1, [r4, #4]
 8003d74:	4299      	cmp	r1, r3
 8003d76:	bfde      	ittt	le
 8003d78:	2330      	movle	r3, #48	@ 0x30
 8003d7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d82:	1b92      	subs	r2, r2, r6
 8003d84:	6122      	str	r2, [r4, #16]
 8003d86:	464b      	mov	r3, r9
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f8cd a000 	str.w	sl, [sp]
 8003d90:	aa03      	add	r2, sp, #12
 8003d92:	f7ff fee1 	bl	8003b58 <_printf_common>
 8003d96:	3001      	adds	r0, #1
 8003d98:	d14a      	bne.n	8003e30 <_printf_i+0x1f4>
 8003d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9e:	b004      	add	sp, #16
 8003da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	f043 0320 	orr.w	r3, r3, #32
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	2778      	movs	r7, #120	@ 0x78
 8003dae:	4832      	ldr	r0, [pc, #200]	@ (8003e78 <_printf_i+0x23c>)
 8003db0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	6831      	ldr	r1, [r6, #0]
 8003db8:	061f      	lsls	r7, r3, #24
 8003dba:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dbe:	d402      	bmi.n	8003dc6 <_printf_i+0x18a>
 8003dc0:	065f      	lsls	r7, r3, #25
 8003dc2:	bf48      	it	mi
 8003dc4:	b2ad      	uxthmi	r5, r5
 8003dc6:	6031      	str	r1, [r6, #0]
 8003dc8:	07d9      	lsls	r1, r3, #31
 8003dca:	bf44      	itt	mi
 8003dcc:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd0:	6023      	strmi	r3, [r4, #0]
 8003dd2:	b11d      	cbz	r5, 8003ddc <_printf_i+0x1a0>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	e7ab      	b.n	8003d30 <_printf_i+0xf4>
 8003dd8:	4826      	ldr	r0, [pc, #152]	@ (8003e74 <_printf_i+0x238>)
 8003dda:	e7e9      	b.n	8003db0 <_printf_i+0x174>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	e7f6      	b.n	8003dd4 <_printf_i+0x198>
 8003de6:	4616      	mov	r6, r2
 8003de8:	e7bd      	b.n	8003d66 <_printf_i+0x12a>
 8003dea:	6833      	ldr	r3, [r6, #0]
 8003dec:	6825      	ldr	r5, [r4, #0]
 8003dee:	1d18      	adds	r0, r3, #4
 8003df0:	6961      	ldr	r1, [r4, #20]
 8003df2:	6030      	str	r0, [r6, #0]
 8003df4:	062e      	lsls	r6, r5, #24
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	d501      	bpl.n	8003dfe <_printf_i+0x1c2>
 8003dfa:	6019      	str	r1, [r3, #0]
 8003dfc:	e002      	b.n	8003e04 <_printf_i+0x1c8>
 8003dfe:	0668      	lsls	r0, r5, #25
 8003e00:	d5fb      	bpl.n	8003dfa <_printf_i+0x1be>
 8003e02:	8019      	strh	r1, [r3, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	4616      	mov	r6, r2
 8003e08:	6123      	str	r3, [r4, #16]
 8003e0a:	e7bc      	b.n	8003d86 <_printf_i+0x14a>
 8003e0c:	6833      	ldr	r3, [r6, #0]
 8003e0e:	2100      	movs	r1, #0
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	6032      	str	r2, [r6, #0]
 8003e14:	681e      	ldr	r6, [r3, #0]
 8003e16:	6862      	ldr	r2, [r4, #4]
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f000 f859 	bl	8003ed0 <memchr>
 8003e1e:	b108      	cbz	r0, 8003e24 <_printf_i+0x1e8>
 8003e20:	1b80      	subs	r0, r0, r6
 8003e22:	6060      	str	r0, [r4, #4]
 8003e24:	6863      	ldr	r3, [r4, #4]
 8003e26:	6123      	str	r3, [r4, #16]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e2e:	e7aa      	b.n	8003d86 <_printf_i+0x14a>
 8003e30:	4632      	mov	r2, r6
 8003e32:	4649      	mov	r1, r9
 8003e34:	4640      	mov	r0, r8
 8003e36:	6923      	ldr	r3, [r4, #16]
 8003e38:	47d0      	blx	sl
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d0ad      	beq.n	8003d9a <_printf_i+0x15e>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	079b      	lsls	r3, r3, #30
 8003e42:	d413      	bmi.n	8003e6c <_printf_i+0x230>
 8003e44:	68e0      	ldr	r0, [r4, #12]
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	4298      	cmp	r0, r3
 8003e4a:	bfb8      	it	lt
 8003e4c:	4618      	movlt	r0, r3
 8003e4e:	e7a6      	b.n	8003d9e <_printf_i+0x162>
 8003e50:	2301      	movs	r3, #1
 8003e52:	4632      	mov	r2, r6
 8003e54:	4649      	mov	r1, r9
 8003e56:	4640      	mov	r0, r8
 8003e58:	47d0      	blx	sl
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d09d      	beq.n	8003d9a <_printf_i+0x15e>
 8003e5e:	3501      	adds	r5, #1
 8003e60:	68e3      	ldr	r3, [r4, #12]
 8003e62:	9903      	ldr	r1, [sp, #12]
 8003e64:	1a5b      	subs	r3, r3, r1
 8003e66:	42ab      	cmp	r3, r5
 8003e68:	dcf2      	bgt.n	8003e50 <_printf_i+0x214>
 8003e6a:	e7eb      	b.n	8003e44 <_printf_i+0x208>
 8003e6c:	2500      	movs	r5, #0
 8003e6e:	f104 0619 	add.w	r6, r4, #25
 8003e72:	e7f5      	b.n	8003e60 <_printf_i+0x224>
 8003e74:	08005a7f 	.word	0x08005a7f
 8003e78:	08005a90 	.word	0x08005a90

08003e7c <memmove>:
 8003e7c:	4288      	cmp	r0, r1
 8003e7e:	b510      	push	{r4, lr}
 8003e80:	eb01 0402 	add.w	r4, r1, r2
 8003e84:	d902      	bls.n	8003e8c <memmove+0x10>
 8003e86:	4284      	cmp	r4, r0
 8003e88:	4623      	mov	r3, r4
 8003e8a:	d807      	bhi.n	8003e9c <memmove+0x20>
 8003e8c:	1e43      	subs	r3, r0, #1
 8003e8e:	42a1      	cmp	r1, r4
 8003e90:	d008      	beq.n	8003ea4 <memmove+0x28>
 8003e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e9a:	e7f8      	b.n	8003e8e <memmove+0x12>
 8003e9c:	4601      	mov	r1, r0
 8003e9e:	4402      	add	r2, r0
 8003ea0:	428a      	cmp	r2, r1
 8003ea2:	d100      	bne.n	8003ea6 <memmove+0x2a>
 8003ea4:	bd10      	pop	{r4, pc}
 8003ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eae:	e7f7      	b.n	8003ea0 <memmove+0x24>

08003eb0 <_sbrk_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	4d05      	ldr	r5, [pc, #20]	@ (8003ecc <_sbrk_r+0x1c>)
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fd fd22 	bl	8001904 <_sbrk>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_sbrk_r+0x1a>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_sbrk_r+0x1a>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000278 	.word	0x20000278

08003ed0 <memchr>:
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	b510      	push	{r4, lr}
 8003ed4:	b2c9      	uxtb	r1, r1
 8003ed6:	4402      	add	r2, r0
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	d101      	bne.n	8003ee2 <memchr+0x12>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e003      	b.n	8003eea <memchr+0x1a>
 8003ee2:	7804      	ldrb	r4, [r0, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	428c      	cmp	r4, r1
 8003ee8:	d1f6      	bne.n	8003ed8 <memchr+0x8>
 8003eea:	bd10      	pop	{r4, pc}

08003eec <memcpy>:
 8003eec:	440a      	add	r2, r1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ef4:	d100      	bne.n	8003ef8 <memcpy+0xc>
 8003ef6:	4770      	bx	lr
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efe:	4291      	cmp	r1, r2
 8003f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f04:	d1f9      	bne.n	8003efa <memcpy+0xe>
 8003f06:	bd10      	pop	{r4, pc}

08003f08 <_realloc_r>:
 8003f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0c:	4680      	mov	r8, r0
 8003f0e:	4615      	mov	r5, r2
 8003f10:	460c      	mov	r4, r1
 8003f12:	b921      	cbnz	r1, 8003f1e <_realloc_r+0x16>
 8003f14:	4611      	mov	r1, r2
 8003f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1a:	f7ff bc39 	b.w	8003790 <_malloc_r>
 8003f1e:	b92a      	cbnz	r2, 8003f2c <_realloc_r+0x24>
 8003f20:	f7ff fbcc 	bl	80036bc <_free_r>
 8003f24:	2400      	movs	r4, #0
 8003f26:	4620      	mov	r0, r4
 8003f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f2c:	f000 f81a 	bl	8003f64 <_malloc_usable_size_r>
 8003f30:	4285      	cmp	r5, r0
 8003f32:	4606      	mov	r6, r0
 8003f34:	d802      	bhi.n	8003f3c <_realloc_r+0x34>
 8003f36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f3a:	d8f4      	bhi.n	8003f26 <_realloc_r+0x1e>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4640      	mov	r0, r8
 8003f40:	f7ff fc26 	bl	8003790 <_malloc_r>
 8003f44:	4607      	mov	r7, r0
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d0ec      	beq.n	8003f24 <_realloc_r+0x1c>
 8003f4a:	42b5      	cmp	r5, r6
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	4621      	mov	r1, r4
 8003f50:	bf28      	it	cs
 8003f52:	4632      	movcs	r2, r6
 8003f54:	f7ff ffca 	bl	8003eec <memcpy>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	f7ff fbae 	bl	80036bc <_free_r>
 8003f60:	463c      	mov	r4, r7
 8003f62:	e7e0      	b.n	8003f26 <_realloc_r+0x1e>

08003f64 <_malloc_usable_size_r>:
 8003f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f68:	1f18      	subs	r0, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfbc      	itt	lt
 8003f6e:	580b      	ldrlt	r3, [r1, r0]
 8003f70:	18c0      	addlt	r0, r0, r3
 8003f72:	4770      	bx	lr

08003f74 <_init>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	bf00      	nop
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr

08003f80 <_fini>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	bf00      	nop
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr
