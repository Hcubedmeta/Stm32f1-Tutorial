
TFT_st77735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003614  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f4  080045f4  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  080045f4  080045f4  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045f4  080045f4  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045f8  080045f8  000055f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080045fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000014  08004610  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08004610  00006098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006628  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c5  00000000  00000000  0000c665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000574  00000000  00000000  0000e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b69  00000000  00000000  0000ea04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b7a  00000000  00000000  0002756d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f7e7  00000000  00000000  000300e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf8ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  000bf914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000c1580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000014 	.word	0x20000014
 8000200:	00000000 	.word	0x00000000
 8000204:	080037e0 	.word	0x080037e0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000018 	.word	0x20000018
 8000220:	080037e0 	.word	0x080037e0

08000224 <drawPixel>:
extern uint8_t _xstart;
extern uint8_t _ystart;


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]
 800022e:	460b      	mov	r3, r1
 8000230:	80bb      	strh	r3, [r7, #4]
 8000232:	4613      	mov	r3, r2
 8000234:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000236:	88fb      	ldrh	r3, [r7, #6]
 8000238:	88b9      	ldrh	r1, [r7, #4]
 800023a:	887a      	ldrh	r2, [r7, #2]
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fdd3 	bl	8001de8 <ST7735_DrawPixel>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800024a:	b590      	push	{r4, r7, lr}
 800024c:	b085      	sub	sp, #20
 800024e:	af02      	add	r7, sp, #8
 8000250:	4604      	mov	r4, r0
 8000252:	4608      	mov	r0, r1
 8000254:	4611      	mov	r1, r2
 8000256:	461a      	mov	r2, r3
 8000258:	4623      	mov	r3, r4
 800025a:	80fb      	strh	r3, [r7, #6]
 800025c:	4603      	mov	r3, r0
 800025e:	80bb      	strh	r3, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	807b      	strh	r3, [r7, #2]
 8000264:	4613      	mov	r3, r2
 8000266:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000268:	88f8      	ldrh	r0, [r7, #6]
 800026a:	88b9      	ldrh	r1, [r7, #4]
 800026c:	887a      	ldrh	r2, [r7, #2]
 800026e:	883c      	ldrh	r4, [r7, #0]
 8000270:	8b3b      	ldrh	r3, [r7, #24]
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	4623      	mov	r3, r4
 8000276:	f001 fec1 	bl	8001ffc <ST7735_FillRectangle>
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bd90      	pop	{r4, r7, pc}

08000282 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000282:	b580      	push	{r7, lr}
 8000284:	b082      	sub	sp, #8
 8000286:	af00      	add	r7, sp, #0
 8000288:	4603      	mov	r3, r0
 800028a:	80fb      	strh	r3, [r7, #6]
 800028c:	460b      	mov	r3, r1
 800028e:	80bb      	strh	r3, [r7, #4]
 8000290:	4613      	mov	r3, r2
 8000292:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000294:	887a      	ldrh	r2, [r7, #2]
 8000296:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800029a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ffc0 	bl	8000224 <drawPixel>
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b089      	sub	sp, #36	@ 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80002ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80002ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80002d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80002dc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80002e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002e4:	1acb      	subs	r3, r1, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	429a      	cmp	r2, r3
 80002ee:	bfcc      	ite	gt
 80002f0:	2301      	movgt	r3, #1
 80002f2:	2300      	movle	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80002f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d00b      	beq.n	8000318 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	833b      	strh	r3, [r7, #24]
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	80fb      	strh	r3, [r7, #6]
 8000308:	8b3b      	ldrh	r3, [r7, #24]
 800030a:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800030c:	887b      	ldrh	r3, [r7, #2]
 800030e:	82fb      	strh	r3, [r7, #22]
 8000310:	883b      	ldrh	r3, [r7, #0]
 8000312:	807b      	strh	r3, [r7, #2]
 8000314:	8afb      	ldrh	r3, [r7, #22]
 8000316:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8000318:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800031c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	dd0b      	ble.n	800033c <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	82bb      	strh	r3, [r7, #20]
 8000328:	887b      	ldrh	r3, [r7, #2]
 800032a:	80fb      	strh	r3, [r7, #6]
 800032c:	8abb      	ldrh	r3, [r7, #20]
 800032e:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000330:	88bb      	ldrh	r3, [r7, #4]
 8000332:	827b      	strh	r3, [r7, #18]
 8000334:	883b      	ldrh	r3, [r7, #0]
 8000336:	80bb      	strh	r3, [r7, #4]
 8000338:	8a7b      	ldrh	r3, [r7, #18]
 800033a:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800033c:	887a      	ldrh	r2, [r7, #2]
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	b29b      	uxth	r3, r3
 8000344:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8000346:	f9b7 2000 	ldrsh.w	r2, [r7]
 800034a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	bfb8      	it	lt
 8000354:	425b      	neglt	r3, r3
 8000356:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000358:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800035c:	0fda      	lsrs	r2, r3, #31
 800035e:	4413      	add	r3, r2
 8000360:	105b      	asrs	r3, r3, #1
 8000362:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8000364:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000368:	f9b7 3000 	ldrsh.w	r3, [r7]
 800036c:	429a      	cmp	r2, r3
 800036e:	da02      	bge.n	8000376 <writeLine+0xca>
        ystep = 1;
 8000370:	2301      	movs	r3, #1
 8000372:	83bb      	strh	r3, [r7, #28]
 8000374:	e031      	b.n	80003da <writeLine+0x12e>
    } else {
        ystep = -1;
 8000376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800037a:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 800037c:	e02d      	b.n	80003da <writeLine+0x12e>
        if (steep) {
 800037e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <writeLine+0xec>
            writePixel(y0, x0, color);
 8000386:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000388:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800038c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff76 	bl	8000282 <writePixel>
 8000396:	e007      	b.n	80003a8 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8000398:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800039a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800039e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff6d 	bl	8000282 <writePixel>
        }
        err -= dy;
 80003a8:	8bfa      	ldrh	r2, [r7, #30]
 80003aa:	89fb      	ldrh	r3, [r7, #14]
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80003b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	da09      	bge.n	80003ce <writeLine+0x122>
            y0 += ystep;
 80003ba:	88ba      	ldrh	r2, [r7, #4]
 80003bc:	8bbb      	ldrh	r3, [r7, #28]
 80003be:	4413      	add	r3, r2
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80003c4:	8bfa      	ldrh	r2, [r7, #30]
 80003c6:	8a3b      	ldrh	r3, [r7, #16]
 80003c8:	4413      	add	r3, r2
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80003ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	3301      	adds	r3, #1
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	80fb      	strh	r3, [r7, #6]
 80003da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80003de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	ddcb      	ble.n	800037e <writeLine+0xd2>
        }
    }
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	3724      	adds	r7, #36	@ 0x24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd90      	pop	{r4, r7, pc}

080003f0 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	4604      	mov	r4, r0
 80003f8:	4608      	mov	r0, r1
 80003fa:	4611      	mov	r1, r2
 80003fc:	461a      	mov	r2, r3
 80003fe:	4623      	mov	r3, r4
 8000400:	80fb      	strh	r3, [r7, #6]
 8000402:	4603      	mov	r3, r0
 8000404:	80bb      	strh	r3, [r7, #4]
 8000406:	460b      	mov	r3, r1
 8000408:	807b      	strh	r3, [r7, #2]
 800040a:	4613      	mov	r3, r2
 800040c:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 800040e:	88ba      	ldrh	r2, [r7, #4]
 8000410:	887b      	ldrh	r3, [r7, #2]
 8000412:	4413      	add	r3, r2
 8000414:	b29b      	uxth	r3, r3
 8000416:	3b01      	subs	r3, #1
 8000418:	b29b      	uxth	r3, r3
 800041a:	b21c      	sxth	r4, r3
 800041c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000420:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000424:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000428:	883b      	ldrh	r3, [r7, #0]
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	4623      	mov	r3, r4
 800042e:	f7ff ff3d 	bl	80002ac <writeLine>
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bd90      	pop	{r4, r7, pc}

0800043a <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800043a:	b590      	push	{r4, r7, lr}
 800043c:	b085      	sub	sp, #20
 800043e:	af02      	add	r7, sp, #8
 8000440:	4604      	mov	r4, r0
 8000442:	4608      	mov	r0, r1
 8000444:	4611      	mov	r1, r2
 8000446:	461a      	mov	r2, r3
 8000448:	4623      	mov	r3, r4
 800044a:	80fb      	strh	r3, [r7, #6]
 800044c:	4603      	mov	r3, r0
 800044e:	80bb      	strh	r3, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	807b      	strh	r3, [r7, #2]
 8000454:	4613      	mov	r3, r2
 8000456:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8000458:	88fa      	ldrh	r2, [r7, #6]
 800045a:	887b      	ldrh	r3, [r7, #2]
 800045c:	4413      	add	r3, r2
 800045e:	b29b      	uxth	r3, r3
 8000460:	3b01      	subs	r3, #1
 8000462:	b29b      	uxth	r3, r3
 8000464:	b21a      	sxth	r2, r3
 8000466:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800046a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800046e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000472:	883b      	ldrh	r3, [r7, #0]
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	4623      	mov	r3, r4
 8000478:	f7ff ff18 	bl	80002ac <writeLine>
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bd90      	pop	{r4, r7, pc}

08000484 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b087      	sub	sp, #28
 8000488:	af02      	add	r7, sp, #8
 800048a:	4604      	mov	r4, r0
 800048c:	4608      	mov	r0, r1
 800048e:	4611      	mov	r1, r2
 8000490:	461a      	mov	r2, r3
 8000492:	4623      	mov	r3, r4
 8000494:	80fb      	strh	r3, [r7, #6]
 8000496:	4603      	mov	r3, r0
 8000498:	80bb      	strh	r3, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	807b      	strh	r3, [r7, #2]
 800049e:	4613      	mov	r3, r2
 80004a0:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 80004a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d11a      	bne.n	80004e4 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80004ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dd05      	ble.n	80004c6 <drawLine+0x42>
 80004ba:	88bb      	ldrh	r3, [r7, #4]
 80004bc:	81bb      	strh	r3, [r7, #12]
 80004be:	883b      	ldrh	r3, [r7, #0]
 80004c0:	80bb      	strh	r3, [r7, #4]
 80004c2:	89bb      	ldrh	r3, [r7, #12]
 80004c4:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80004c6:	883a      	ldrh	r2, [r7, #0]
 80004c8:	88bb      	ldrh	r3, [r7, #4]
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	b21a      	sxth	r2, r3
 80004d4:	8c3b      	ldrh	r3, [r7, #32]
 80004d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80004da:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80004de:	f7ff ff87 	bl	80003f0 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80004e2:	e02d      	b.n	8000540 <drawLine+0xbc>
    } else if(y0 == y1){
 80004e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004e8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d11a      	bne.n	8000526 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80004f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dd05      	ble.n	8000508 <drawLine+0x84>
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	81fb      	strh	r3, [r7, #14]
 8000500:	887b      	ldrh	r3, [r7, #2]
 8000502:	80fb      	strh	r3, [r7, #6]
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000508:	887a      	ldrh	r2, [r7, #2]
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	b29b      	uxth	r3, r3
 8000510:	3301      	adds	r3, #1
 8000512:	b29b      	uxth	r3, r3
 8000514:	b21a      	sxth	r2, r3
 8000516:	8c3b      	ldrh	r3, [r7, #32]
 8000518:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800051c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000520:	f7ff ff8b 	bl	800043a <drawFastHLine>
}
 8000524:	e00c      	b.n	8000540 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 8000526:	f9b7 4000 	ldrsh.w	r4, [r7]
 800052a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800052e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000532:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000536:	8c3b      	ldrh	r3, [r7, #32]
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	4623      	mov	r3, r4
 800053c:	f7ff feb6 	bl	80002ac <writeLine>
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	bd90      	pop	{r4, r7, pc}

08000548 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	4604      	mov	r4, r0
 8000550:	4608      	mov	r0, r1
 8000552:	4611      	mov	r1, r2
 8000554:	461a      	mov	r2, r3
 8000556:	4623      	mov	r3, r4
 8000558:	80fb      	strh	r3, [r7, #6]
 800055a:	4603      	mov	r3, r0
 800055c:	80bb      	strh	r3, [r7, #4]
 800055e:	460b      	mov	r3, r1
 8000560:	807b      	strh	r3, [r7, #2]
 8000562:	4613      	mov	r3, r2
 8000564:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8000566:	887b      	ldrh	r3, [r7, #2]
 8000568:	f1c3 0301 	rsb	r3, r3, #1
 800056c:	b29b      	uxth	r3, r3
 800056e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000570:	2301      	movs	r3, #1
 8000572:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	461a      	mov	r2, r3
 8000578:	03d2      	lsls	r2, r2, #15
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	b29b      	uxth	r3, r3
 8000580:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 800058a:	88ba      	ldrh	r2, [r7, #4]
 800058c:	887b      	ldrh	r3, [r7, #2]
 800058e:	4413      	add	r3, r2
 8000590:	b29b      	uxth	r3, r3
 8000592:	b219      	sxth	r1, r3
 8000594:	883a      	ldrh	r2, [r7, #0]
 8000596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe71 	bl	8000282 <writePixel>
    writePixel(x0  , y0-r, color);
 80005a0:	88ba      	ldrh	r2, [r7, #4]
 80005a2:	887b      	ldrh	r3, [r7, #2]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	b219      	sxth	r1, r3
 80005aa:	883a      	ldrh	r2, [r7, #0]
 80005ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe66 	bl	8000282 <writePixel>
    writePixel(x0+r, y0  , color);
 80005b6:	88fa      	ldrh	r2, [r7, #6]
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	4413      	add	r3, r2
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b21b      	sxth	r3, r3
 80005c0:	883a      	ldrh	r2, [r7, #0]
 80005c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe5b 	bl	8000282 <writePixel>
    writePixel(x0-r, y0  , color);
 80005cc:	88fa      	ldrh	r2, [r7, #6]
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	883a      	ldrh	r2, [r7, #0]
 80005d8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe50 	bl	8000282 <writePixel>

    while (x<y) {
 80005e2:	e091      	b.n	8000708 <drawCircle+0x1c0>
        if (f >= 0) {
 80005e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0e      	blt.n	800060a <drawCircle+0xc2>
            y--;
 80005ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	3b01      	subs	r3, #1
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80005f8:	8a7b      	ldrh	r3, [r7, #18]
 80005fa:	3302      	adds	r3, #2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000600:	8afa      	ldrh	r2, [r7, #22]
 8000602:	8a7b      	ldrh	r3, [r7, #18]
 8000604:	4413      	add	r3, r2
 8000606:	b29b      	uxth	r3, r3
 8000608:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800060a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800060e:	b29b      	uxth	r3, r3
 8000610:	3301      	adds	r3, #1
 8000612:	b29b      	uxth	r3, r3
 8000614:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000616:	8abb      	ldrh	r3, [r7, #20]
 8000618:	3302      	adds	r3, #2
 800061a:	b29b      	uxth	r3, r3
 800061c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800061e:	8afa      	ldrh	r2, [r7, #22]
 8000620:	8abb      	ldrh	r3, [r7, #20]
 8000622:	4413      	add	r3, r2
 8000624:	b29b      	uxth	r3, r3
 8000626:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 8000628:	88fa      	ldrh	r2, [r7, #6]
 800062a:	8a3b      	ldrh	r3, [r7, #16]
 800062c:	4413      	add	r3, r2
 800062e:	b29b      	uxth	r3, r3
 8000630:	b218      	sxth	r0, r3
 8000632:	88ba      	ldrh	r2, [r7, #4]
 8000634:	89fb      	ldrh	r3, [r7, #14]
 8000636:	4413      	add	r3, r2
 8000638:	b29b      	uxth	r3, r3
 800063a:	b21b      	sxth	r3, r3
 800063c:	883a      	ldrh	r2, [r7, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	f7ff fe1f 	bl	8000282 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	8a3b      	ldrh	r3, [r7, #16]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	b218      	sxth	r0, r3
 800064e:	88ba      	ldrh	r2, [r7, #4]
 8000650:	89fb      	ldrh	r3, [r7, #14]
 8000652:	4413      	add	r3, r2
 8000654:	b29b      	uxth	r3, r3
 8000656:	b21b      	sxth	r3, r3
 8000658:	883a      	ldrh	r2, [r7, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	f7ff fe11 	bl	8000282 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000660:	88fa      	ldrh	r2, [r7, #6]
 8000662:	8a3b      	ldrh	r3, [r7, #16]
 8000664:	4413      	add	r3, r2
 8000666:	b29b      	uxth	r3, r3
 8000668:	b218      	sxth	r0, r3
 800066a:	88ba      	ldrh	r2, [r7, #4]
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b29b      	uxth	r3, r3
 8000672:	b21b      	sxth	r3, r3
 8000674:	883a      	ldrh	r2, [r7, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	f7ff fe03 	bl	8000282 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 800067c:	88fa      	ldrh	r2, [r7, #6]
 800067e:	8a3b      	ldrh	r3, [r7, #16]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	b218      	sxth	r0, r3
 8000686:	88ba      	ldrh	r2, [r7, #4]
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	b29b      	uxth	r3, r3
 800068e:	b21b      	sxth	r3, r3
 8000690:	883a      	ldrh	r2, [r7, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	f7ff fdf5 	bl	8000282 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	4413      	add	r3, r2
 800069e:	b29b      	uxth	r3, r3
 80006a0:	b218      	sxth	r0, r3
 80006a2:	88ba      	ldrh	r2, [r7, #4]
 80006a4:	8a3b      	ldrh	r3, [r7, #16]
 80006a6:	4413      	add	r3, r2
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	883a      	ldrh	r2, [r7, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	f7ff fde7 	bl	8000282 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b218      	sxth	r0, r3
 80006be:	88ba      	ldrh	r2, [r7, #4]
 80006c0:	8a3b      	ldrh	r3, [r7, #16]
 80006c2:	4413      	add	r3, r2
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	883a      	ldrh	r2, [r7, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	f7ff fdd9 	bl	8000282 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	89fb      	ldrh	r3, [r7, #14]
 80006d4:	4413      	add	r3, r2
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b218      	sxth	r0, r3
 80006da:	88ba      	ldrh	r2, [r7, #4]
 80006dc:	8a3b      	ldrh	r3, [r7, #16]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	883a      	ldrh	r2, [r7, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	f7ff fdcb 	bl	8000282 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80006ec:	88fa      	ldrh	r2, [r7, #6]
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b218      	sxth	r0, r3
 80006f6:	88ba      	ldrh	r2, [r7, #4]
 80006f8:	8a3b      	ldrh	r3, [r7, #16]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b21b      	sxth	r3, r3
 8000700:	883a      	ldrh	r2, [r7, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	f7ff fdbd 	bl	8000282 <writePixel>
    while (x<y) {
 8000708:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800070c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000710:	429a      	cmp	r2, r3
 8000712:	f6ff af67 	blt.w	80005e4 <drawCircle+0x9c>
    }
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}

08000720 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	4604      	mov	r4, r0
 8000728:	4608      	mov	r0, r1
 800072a:	4611      	mov	r1, r2
 800072c:	461a      	mov	r2, r3
 800072e:	4623      	mov	r3, r4
 8000730:	80fb      	strh	r3, [r7, #6]
 8000732:	4603      	mov	r3, r0
 8000734:	80bb      	strh	r3, [r7, #4]
 8000736:	460b      	mov	r3, r1
 8000738:	807b      	strh	r3, [r7, #2]
 800073a:	4613      	mov	r3, r2
 800073c:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	f1c3 0301 	rsb	r3, r3, #1
 8000744:	b29b      	uxth	r3, r3
 8000746:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800074c:	887b      	ldrh	r3, [r7, #2]
 800074e:	461a      	mov	r2, r3
 8000750:	03d2      	lsls	r2, r2, #15
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	b29b      	uxth	r3, r3
 8000758:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800075e:	887b      	ldrh	r3, [r7, #2]
 8000760:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000762:	e0a5      	b.n	80008b0 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000764:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0e      	blt.n	800078a <drawCircleHelper+0x6a>
            y--;
 800076c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000770:	b29b      	uxth	r3, r3
 8000772:	3b01      	subs	r3, #1
 8000774:	b29b      	uxth	r3, r3
 8000776:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000778:	8a7b      	ldrh	r3, [r7, #18]
 800077a:	3302      	adds	r3, #2
 800077c:	b29b      	uxth	r3, r3
 800077e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000780:	8afa      	ldrh	r2, [r7, #22]
 8000782:	8a7b      	ldrh	r3, [r7, #18]
 8000784:	4413      	add	r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800078a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800078e:	b29b      	uxth	r3, r3
 8000790:	3301      	adds	r3, #1
 8000792:	b29b      	uxth	r3, r3
 8000794:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000796:	8abb      	ldrh	r3, [r7, #20]
 8000798:	3302      	adds	r3, #2
 800079a:	b29b      	uxth	r3, r3
 800079c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800079e:	8afa      	ldrh	r2, [r7, #22]
 80007a0:	8abb      	ldrh	r3, [r7, #20]
 80007a2:	4413      	add	r3, r2
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 80007a8:	787b      	ldrb	r3, [r7, #1]
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d01b      	beq.n	80007ea <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 80007b2:	88fa      	ldrh	r2, [r7, #6]
 80007b4:	8a3b      	ldrh	r3, [r7, #16]
 80007b6:	4413      	add	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b218      	sxth	r0, r3
 80007bc:	88ba      	ldrh	r2, [r7, #4]
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	4413      	add	r3, r2
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007c8:	4619      	mov	r1, r3
 80007ca:	f7ff fd5a 	bl	8000282 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 80007ce:	88fa      	ldrh	r2, [r7, #6]
 80007d0:	89fb      	ldrh	r3, [r7, #14]
 80007d2:	4413      	add	r3, r2
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	b218      	sxth	r0, r3
 80007d8:	88ba      	ldrh	r2, [r7, #4]
 80007da:	8a3b      	ldrh	r3, [r7, #16]
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007e4:	4619      	mov	r1, r3
 80007e6:	f7ff fd4c 	bl	8000282 <writePixel>
        }
        if (cornername & 0x2) {
 80007ea:	787b      	ldrb	r3, [r7, #1]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d01b      	beq.n	800082c <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	8a3b      	ldrh	r3, [r7, #16]
 80007f8:	4413      	add	r3, r2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b218      	sxth	r0, r3
 80007fe:	88ba      	ldrh	r2, [r7, #4]
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	b21b      	sxth	r3, r3
 8000808:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800080a:	4619      	mov	r1, r3
 800080c:	f7ff fd39 	bl	8000282 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	b29b      	uxth	r3, r3
 8000818:	b218      	sxth	r0, r3
 800081a:	88ba      	ldrh	r2, [r7, #4]
 800081c:	8a3b      	ldrh	r3, [r7, #16]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	b29b      	uxth	r3, r3
 8000822:	b21b      	sxth	r3, r3
 8000824:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000826:	4619      	mov	r1, r3
 8000828:	f7ff fd2b 	bl	8000282 <writePixel>
        }
        if (cornername & 0x8) {
 800082c:	787b      	ldrb	r3, [r7, #1]
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	2b00      	cmp	r3, #0
 8000834:	d01b      	beq.n	800086e <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8000836:	88fa      	ldrh	r2, [r7, #6]
 8000838:	89fb      	ldrh	r3, [r7, #14]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	b218      	sxth	r0, r3
 8000840:	88ba      	ldrh	r2, [r7, #4]
 8000842:	8a3b      	ldrh	r3, [r7, #16]
 8000844:	4413      	add	r3, r2
 8000846:	b29b      	uxth	r3, r3
 8000848:	b21b      	sxth	r3, r3
 800084a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff fd18 	bl	8000282 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	8a3b      	ldrh	r3, [r7, #16]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	b29b      	uxth	r3, r3
 800085a:	b218      	sxth	r0, r3
 800085c:	88ba      	ldrh	r2, [r7, #4]
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	4413      	add	r3, r2
 8000862:	b29b      	uxth	r3, r3
 8000864:	b21b      	sxth	r3, r3
 8000866:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000868:	4619      	mov	r1, r3
 800086a:	f7ff fd0a 	bl	8000282 <writePixel>
        }
        if (cornername & 0x1) {
 800086e:	787b      	ldrb	r3, [r7, #1]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01b      	beq.n	80008b0 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000878:	88fa      	ldrh	r2, [r7, #6]
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	b218      	sxth	r0, r3
 8000882:	88ba      	ldrh	r2, [r7, #4]
 8000884:	8a3b      	ldrh	r3, [r7, #16]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	b29b      	uxth	r3, r3
 800088a:	b21b      	sxth	r3, r3
 800088c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800088e:	4619      	mov	r1, r3
 8000890:	f7ff fcf7 	bl	8000282 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000894:	88fa      	ldrh	r2, [r7, #6]
 8000896:	8a3b      	ldrh	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	b29b      	uxth	r3, r3
 800089c:	b218      	sxth	r0, r3
 800089e:	88ba      	ldrh	r2, [r7, #4]
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b21b      	sxth	r3, r3
 80008a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80008aa:	4619      	mov	r1, r3
 80008ac:	f7ff fce9 	bl	8000282 <writePixel>
    while (x<y) {
 80008b0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80008b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f6ff af53 	blt.w	8000764 <drawCircleHelper+0x44>
        }
    }
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	371c      	adds	r7, #28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}

080008c8 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4604      	mov	r4, r0
 80008d0:	4608      	mov	r0, r1
 80008d2:	4611      	mov	r1, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	4623      	mov	r3, r4
 80008d8:	80fb      	strh	r3, [r7, #6]
 80008da:	4603      	mov	r3, r0
 80008dc:	80bb      	strh	r3, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	807b      	strh	r3, [r7, #2]
 80008e2:	4613      	mov	r3, r2
 80008e4:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80008e6:	887b      	ldrh	r3, [r7, #2]
 80008e8:	f1c3 0301 	rsb	r3, r3, #1
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	461a      	mov	r2, r3
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	b29b      	uxth	r3, r3
 8000900:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000906:	887b      	ldrh	r3, [r7, #2]
 8000908:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 800090a:	8a3b      	ldrh	r3, [r7, #16]
 800090c:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000912:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 800091e:	e095      	b.n	8000a4c <fillCircleHelper+0x184>
        if (f >= 0) {
 8000920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0e      	blt.n	8000946 <fillCircleHelper+0x7e>
            y--;
 8000928:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800092c:	b29b      	uxth	r3, r3
 800092e:	3b01      	subs	r3, #1
 8000930:	b29b      	uxth	r3, r3
 8000932:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000934:	8a7b      	ldrh	r3, [r7, #18]
 8000936:	3302      	adds	r3, #2
 8000938:	b29b      	uxth	r3, r3
 800093a:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800093c:	8afa      	ldrh	r2, [r7, #22]
 800093e:	8a7b      	ldrh	r3, [r7, #18]
 8000940:	4413      	add	r3, r2
 8000942:	b29b      	uxth	r3, r3
 8000944:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000946:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800094a:	b29b      	uxth	r3, r3
 800094c:	3301      	adds	r3, #1
 800094e:	b29b      	uxth	r3, r3
 8000950:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000952:	8abb      	ldrh	r3, [r7, #20]
 8000954:	3302      	adds	r3, #2
 8000956:	b29b      	uxth	r3, r3
 8000958:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800095a:	8afa      	ldrh	r2, [r7, #22]
 800095c:	8abb      	ldrh	r3, [r7, #20]
 800095e:	4413      	add	r3, r2
 8000960:	b29b      	uxth	r3, r3
 8000962:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000964:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000968:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	db31      	blt.n	80009d4 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000970:	787b      	ldrb	r3, [r7, #1]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b00      	cmp	r3, #0
 8000978:	d013      	beq.n	80009a2 <fillCircleHelper+0xda>
 800097a:	88fa      	ldrh	r2, [r7, #6]
 800097c:	8a3b      	ldrh	r3, [r7, #16]
 800097e:	4413      	add	r3, r2
 8000980:	b29b      	uxth	r3, r3
 8000982:	b218      	sxth	r0, r3
 8000984:	88ba      	ldrh	r2, [r7, #4]
 8000986:	89fb      	ldrh	r3, [r7, #14]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	b29b      	uxth	r3, r3
 800098c:	b219      	sxth	r1, r3
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	b29a      	uxth	r2, r3
 8000994:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000996:	4413      	add	r3, r2
 8000998:	b29b      	uxth	r3, r3
 800099a:	b21a      	sxth	r2, r3
 800099c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800099e:	f7ff fd27 	bl	80003f0 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80009a2:	787b      	ldrb	r3, [r7, #1]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d013      	beq.n	80009d4 <fillCircleHelper+0x10c>
 80009ac:	88fa      	ldrh	r2, [r7, #6]
 80009ae:	8a3b      	ldrh	r3, [r7, #16]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	b218      	sxth	r0, r3
 80009b6:	88ba      	ldrh	r2, [r7, #4]
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b219      	sxth	r1, r3
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009c8:	4413      	add	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80009d0:	f7ff fd0e 	bl	80003f0 <drawFastVLine>
        }
        if(y != py) {
 80009d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d033      	beq.n	8000a48 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80009e0:	787b      	ldrb	r3, [r7, #1]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d013      	beq.n	8000a12 <fillCircleHelper+0x14a>
 80009ea:	88fa      	ldrh	r2, [r7, #6]
 80009ec:	897b      	ldrh	r3, [r7, #10]
 80009ee:	4413      	add	r3, r2
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b218      	sxth	r0, r3
 80009f4:	88ba      	ldrh	r2, [r7, #4]
 80009f6:	89bb      	ldrh	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b219      	sxth	r1, r3
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a06:	4413      	add	r3, r2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a0e:	f7ff fcef 	bl	80003f0 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000a12:	787b      	ldrb	r3, [r7, #1]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d013      	beq.n	8000a44 <fillCircleHelper+0x17c>
 8000a1c:	88fa      	ldrh	r2, [r7, #6]
 8000a1e:	897b      	ldrh	r3, [r7, #10]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b218      	sxth	r0, r3
 8000a26:	88ba      	ldrh	r2, [r7, #4]
 8000a28:	89bb      	ldrh	r3, [r7, #12]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b219      	sxth	r1, r3
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a38:	4413      	add	r3, r2
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a40:	f7ff fcd6 	bl	80003f0 <drawFastVLine>
            py = y;
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000a48:	8a3b      	ldrh	r3, [r7, #16]
 8000a4a:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000a4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	f6ff af63 	blt.w	8000920 <fillCircleHelper+0x58>
    }
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}

08000a64 <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4623      	mov	r3, r4
 8000a74:	80fb      	strh	r3, [r7, #6]
 8000a76:	4603      	mov	r3, r0
 8000a78:	80bb      	strh	r3, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	807b      	strh	r3, [r7, #2]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000a82:	88ba      	ldrh	r2, [r7, #4]
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b219      	sxth	r1, r3
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	883b      	ldrh	r3, [r7, #0]
 8000a9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a9e:	f7ff fca7 	bl	80003f0 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000aa2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000aa6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000aaa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000aae:	883b      	ldrh	r3, [r7, #0]
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	f7ff ff06 	bl	80008c8 <fillCircleHelper>
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}

08000ac4 <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	4608      	mov	r0, r1
 8000ace:	4611      	mov	r1, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80bb      	strh	r3, [r7, #4]
 8000ada:	460b      	mov	r3, r1
 8000adc:	807b      	strh	r3, [r7, #2]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000ae2:	8b3b      	ldrh	r3, [r7, #24]
 8000ae4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ae8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000aec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000af0:	f7ff fca3 	bl	800043a <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	883b      	ldrh	r3, [r7, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b219      	sxth	r1, r3
 8000b02:	8b3b      	ldrh	r3, [r7, #24]
 8000b04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b08:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b0c:	f7ff fc95 	bl	800043a <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b16:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b1a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b1e:	f7ff fc67 	bl	80003f0 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	4413      	add	r3, r2
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b218      	sxth	r0, r3
 8000b30:	8b3b      	ldrh	r3, [r7, #24]
 8000b32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b36:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b3a:	f7ff fc59 	bl	80003f0 <drawFastVLine>
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}

08000b46 <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000b46:	b590      	push	{r4, r7, lr}
 8000b48:	b087      	sub	sp, #28
 8000b4a:	af02      	add	r7, sp, #8
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	4611      	mov	r1, r2
 8000b52:	461a      	mov	r2, r3
 8000b54:	4623      	mov	r3, r4
 8000b56:	80fb      	strh	r3, [r7, #6]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	80bb      	strh	r3, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000b64:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	bfa8      	it	ge
 8000b70:	4613      	movge	r3, r2
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	0fda      	lsrs	r2, r3, #31
 8000b76:	4413      	add	r3, r2
 8000b78:	105b      	asrs	r3, r3, #1
 8000b7a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000b7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000b80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dd01      	ble.n	8000b8c <drawRoundRect+0x46>
 8000b88:	89fb      	ldrh	r3, [r7, #14]
 8000b8a:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000b8c:	88fa      	ldrh	r2, [r7, #6]
 8000b8e:	8c3b      	ldrh	r3, [r7, #32]
 8000b90:	4413      	add	r3, r2
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b218      	sxth	r0, r3
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	8c3b      	ldrh	r3, [r7, #32]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ba6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000baa:	f7ff fc46 	bl	800043a <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	8c3b      	ldrh	r3, [r7, #32]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b218      	sxth	r0, r3
 8000bb8:	88ba      	ldrh	r2, [r7, #4]
 8000bba:	883b      	ldrh	r3, [r7, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b219      	sxth	r1, r3
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	8c3b      	ldrh	r3, [r7, #32]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bd6:	f7ff fc30 	bl	800043a <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000bda:	88ba      	ldrh	r2, [r7, #4]
 8000bdc:	8c3b      	ldrh	r3, [r7, #32]
 8000bde:	4413      	add	r3, r2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b219      	sxth	r1, r3
 8000be4:	883a      	ldrh	r2, [r7, #0]
 8000be6:	8c3b      	ldrh	r3, [r7, #32]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bf4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bf8:	f7ff fbfa 	bl	80003f0 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000bfc:	88fa      	ldrh	r2, [r7, #6]
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	4413      	add	r3, r2
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b218      	sxth	r0, r3
 8000c0a:	88ba      	ldrh	r2, [r7, #4]
 8000c0c:	8c3b      	ldrh	r3, [r7, #32]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	b219      	sxth	r1, r3
 8000c14:	883a      	ldrh	r2, [r7, #0]
 8000c16:	8c3b      	ldrh	r3, [r7, #32]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c24:	f7ff fbe4 	bl	80003f0 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	8c3b      	ldrh	r3, [r7, #32]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b218      	sxth	r0, r3
 8000c32:	88ba      	ldrh	r2, [r7, #4]
 8000c34:	8c3b      	ldrh	r3, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b219      	sxth	r1, r3
 8000c3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2301      	movs	r3, #1
 8000c46:	f7ff fd6b 	bl	8000720 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000c4a:	88fa      	ldrh	r2, [r7, #6]
 8000c4c:	887b      	ldrh	r3, [r7, #2]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	8c3b      	ldrh	r3, [r7, #32]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	b218      	sxth	r0, r3
 8000c5e:	88ba      	ldrh	r2, [r7, #4]
 8000c60:	8c3b      	ldrh	r3, [r7, #32]
 8000c62:	4413      	add	r3, r2
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b219      	sxth	r1, r3
 8000c68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000c6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2302      	movs	r3, #2
 8000c72:	f7ff fd55 	bl	8000720 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000c76:	88fa      	ldrh	r2, [r7, #6]
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	8c3b      	ldrh	r3, [r7, #32]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b218      	sxth	r0, r3
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	883b      	ldrh	r3, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	8c3b      	ldrh	r3, [r7, #32]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b219      	sxth	r1, r3
 8000c9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	f7ff fd3a 	bl	8000720 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	8c3b      	ldrh	r3, [r7, #32]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b218      	sxth	r0, r3
 8000cb6:	88ba      	ldrh	r2, [r7, #4]
 8000cb8:	883b      	ldrh	r3, [r7, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	8c3b      	ldrh	r3, [r7, #32]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b219      	sxth	r1, r3
 8000cca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	f7ff fd24 	bl	8000720 <drawCircleHelper>
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}

08000ce0 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	4611      	mov	r1, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	4623      	mov	r3, r4
 8000cf0:	80fb      	strh	r3, [r7, #6]
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80bb      	strh	r3, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	807b      	strh	r3, [r7, #2]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000cfe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000d02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	bfa8      	it	ge
 8000d0a:	4613      	movge	r3, r2
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	0fda      	lsrs	r2, r3, #31
 8000d10:	4413      	add	r3, r2
 8000d12:	105b      	asrs	r3, r3, #1
 8000d14:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000d16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	dd01      	ble.n	8000d26 <fillRoundRect+0x46>
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8000d26:	88fa      	ldrh	r2, [r7, #6]
 8000d28:	8c3b      	ldrh	r3, [r7, #32]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b218      	sxth	r0, r3
 8000d30:	887a      	ldrh	r2, [r7, #2]
 8000d32:	8c3b      	ldrh	r3, [r7, #32]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d42:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	f7ff fa7d 	bl	800024a <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8000d50:	88fa      	ldrh	r2, [r7, #6]
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	4413      	add	r3, r2
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	8c3b      	ldrh	r3, [r7, #32]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b218      	sxth	r0, r3
 8000d64:	88ba      	ldrh	r2, [r7, #4]
 8000d66:	8c3b      	ldrh	r3, [r7, #32]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b219      	sxth	r1, r3
 8000d6e:	883a      	ldrh	r2, [r7, #0]
 8000d70:	8c3b      	ldrh	r3, [r7, #32]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8000d84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d86:	9201      	str	r2, [sp, #4]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	f7ff fd9b 	bl	80008c8 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8000d92:	88fa      	ldrh	r2, [r7, #6]
 8000d94:	8c3b      	ldrh	r3, [r7, #32]
 8000d96:	4413      	add	r3, r2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b218      	sxth	r0, r3
 8000d9c:	88ba      	ldrh	r2, [r7, #4]
 8000d9e:	8c3b      	ldrh	r3, [r7, #32]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b219      	sxth	r1, r3
 8000da6:	883a      	ldrh	r2, [r7, #0]
 8000da8:	8c3b      	ldrh	r3, [r7, #32]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3b01      	subs	r3, #1
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8000dbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	4622      	mov	r2, r4
 8000dc6:	f7ff fd7f 	bl	80008c8 <fillCircleHelper>
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}

08000dd2 <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000dd2:	b590      	push	{r4, r7, lr}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af02      	add	r7, sp, #8
 8000dd8:	4604      	mov	r4, r0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	461a      	mov	r2, r3
 8000de0:	4623      	mov	r3, r4
 8000de2:	80fb      	strh	r3, [r7, #6]
 8000de4:	4603      	mov	r3, r0
 8000de6:	80bb      	strh	r3, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 8000df0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000df4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000df8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000dfc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e00:	8c3b      	ldrh	r3, [r7, #32]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4623      	mov	r3, r4
 8000e06:	f7ff fb3d 	bl	8000484 <drawLine>
    drawLine(x1, y1, x2, y2, color);
 8000e0a:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8000e0e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e12:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000e16:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000e1a:	8c3b      	ldrh	r3, [r7, #32]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4623      	mov	r3, r4
 8000e20:	f7ff fb30 	bl	8000484 <drawLine>
    drawLine(x2, y2, x0, y0, color);
 8000e24:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000e28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e2c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8000e30:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8000e34:	8c3b      	ldrh	r3, [r7, #32]
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	4623      	mov	r3, r4
 8000e3a:	f7ff fb23 	bl	8000484 <drawLine>
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}

08000e46 <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b08f      	sub	sp, #60	@ 0x3c
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	4623      	mov	r3, r4
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8000e64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dd0b      	ble.n	8000e88 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e74:	883b      	ldrh	r3, [r7, #0]
 8000e76:	80bb      	strh	r3, [r7, #4]
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e7a:	803b      	strh	r3, [r7, #0]
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e86:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8000e88:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e8c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dd0f      	ble.n	8000eb4 <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8000e94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e98:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000e9a:	883b      	ldrh	r3, [r7, #0]
 8000e9c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8000ea0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000ea2:	803b      	strh	r3, [r7, #0]
 8000ea4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000ea8:	843b      	strh	r3, [r7, #32]
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000eb0:	8c3b      	ldrh	r3, [r7, #32]
 8000eb2:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8000eb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000eb8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dd0b      	ble.n	8000ed8 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	83fb      	strh	r3, [r7, #30]
 8000ec4:	883b      	ldrh	r3, [r7, #0]
 8000ec6:	80bb      	strh	r3, [r7, #4]
 8000ec8:	8bfb      	ldrh	r3, [r7, #30]
 8000eca:	803b      	strh	r3, [r7, #0]
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	83bb      	strh	r3, [r7, #28]
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	80fb      	strh	r3, [r7, #6]
 8000ed4:	8bbb      	ldrh	r3, [r7, #28]
 8000ed6:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8000ed8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000edc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d137      	bne.n	8000f54 <fillTriangle+0x10e>
        a = b = x0;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8000ee8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000eea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 8000eec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ef0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	da02      	bge.n	8000efe <fillTriangle+0xb8>
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000efc:	e007      	b.n	8000f0e <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8000efe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f02:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dd01      	ble.n	8000f0e <fillTriangle+0xc8>
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 8000f0e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8000f12:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000f16:	429a      	cmp	r2, r3
 8000f18:	da03      	bge.n	8000f22 <fillTriangle+0xdc>
 8000f1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000f1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000f20:	e008      	b.n	8000f34 <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8000f22:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8000f26:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dd02      	ble.n	8000f34 <fillTriangle+0xee>
 8000f2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000f32:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y0, b-a+1, color);
 8000f34:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000f36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000f46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f4a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8000f4e:	f7ff fa74 	bl	800043a <drawFastHLine>
        return;
 8000f52:	e0d4      	b.n	80010fe <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8000f5e:	883a      	ldrh	r2, [r7, #0]
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8000f68:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8000f74:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8000f80:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8000f8c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8000fa0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fa4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d102      	bne.n	8000fb2 <fillTriangle+0x16c>
 8000fac:	883b      	ldrh	r3, [r7, #0]
 8000fae:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000fb0:	e003      	b.n	8000fba <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++) {
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	867b      	strh	r3, [r7, #50]	@ 0x32
 8000fbe:	e03e      	b.n	800103e <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 8000fc0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8000fd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fda:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 8000fe8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fee:	4413      	add	r3, r2
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 8000ff2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ff8:	4413      	add	r3, r2
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8000ffc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8001000:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001004:	429a      	cmp	r2, r3
 8001006:	dd05      	ble.n	8001014 <fillTriangle+0x1ce>
 8001008:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800100a:	81bb      	strh	r3, [r7, #12]
 800100c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800100e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001010:	89bb      	ldrh	r3, [r7, #12]
 8001012:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 8001014:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001016:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001026:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800102a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 800102e:	f7ff fa04 	bl	800043a <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8001032:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001036:	b29b      	uxth	r3, r3
 8001038:	3301      	adds	r3, #1
 800103a:	b29b      	uxth	r3, r3
 800103c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800103e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001042:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001046:	429a      	cmp	r2, r3
 8001048:	ddba      	ble.n	8000fc0 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800104a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800104e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001052:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001056:	1a8a      	subs	r2, r1, r2
 8001058:	fb02 f303 	mul.w	r3, r2, r3
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800105e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001062:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001066:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800106a:	1a8a      	subs	r2, r1, r2
 800106c:	fb02 f303 	mul.w	r3, r2, r3
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++) {
 8001072:	e03e      	b.n	80010f2 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 8001074:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800107a:	fb92 f3f3 	sdiv	r3, r2, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	4413      	add	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8001088:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800108c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800108e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001092:	b29a      	uxth	r2, r3
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 800109c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010a2:	4413      	add	r3, r2
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80010a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010ac:	4413      	add	r3, r2
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80010b0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80010b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dd05      	ble.n	80010c8 <fillTriangle+0x282>
 80010bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010be:	81fb      	strh	r3, [r7, #14]
 80010c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 80010c8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80010ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80010da:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 80010de:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80010e2:	f7ff f9aa 	bl	800043a <drawFastHLine>
    for(; y<=y2; y++) {
 80010e6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80010f2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80010f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	ddba      	ble.n	8001074 <fillTriangle+0x22e>
    }
}
 80010fe:	373c      	adds	r7, #60	@ 0x3c
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <fillScreen>:

void fillScreen(uint16_t color) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <fillScreen+0x2c>)
 8001110:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <fillScreen+0x30>)
 8001116:	f9b3 1000 	ldrsh.w	r1, [r3]
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	460b      	mov	r3, r1
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff f891 	bl	800024a <fillRect>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000030 	.word	0x20000030
 8001134:	20000032 	.word	0x20000032

08001138 <testLines>:



void testLines(uint16_t color)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b08b      	sub	sp, #44	@ 0x2c
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8001142:	4b7c      	ldr	r3, [pc, #496]	@ (8001334 <testLines+0x1fc>)
 8001144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001148:	617b      	str	r3, [r7, #20]
                  h = _height;
 800114a:	4b7b      	ldr	r3, [pc, #492]	@ (8001338 <testLines+0x200>)
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff ffd6 	bl	8001104 <fillScreen>

    x1 = y1 = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	3b01      	subs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e00f      	b.n	800118c <testLines+0x54>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	b218      	sxth	r0, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	b219      	sxth	r1, r3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	b21a      	sxth	r2, r3
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	b21c      	sxth	r4, r3
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4623      	mov	r3, r4
 8001182:	f7ff f97f 	bl	8000484 <drawLine>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3306      	adds	r3, #6
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbeb      	blt.n	800116c <testLines+0x34>
    x2    = w - 1;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3b01      	subs	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	e00f      	b.n	80011c0 <testLines+0x88>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	b218      	sxth	r0, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	b219      	sxth	r1, r3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	b21c      	sxth	r4, r3
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4623      	mov	r3, r4
 80011b6:	f7ff f965 	bl	8000484 <drawLine>
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	3306      	adds	r3, #6
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbeb      	blt.n	80011a0 <testLines+0x68>

    fillScreen(BLACK);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ff9b 	bl	8001104 <fillScreen>

    x1    = w - 1;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	3b01      	subs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e00f      	b.n	8001204 <testLines+0xcc>
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	b218      	sxth	r0, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	b219      	sxth	r1, r3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	b21c      	sxth	r4, r3
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4623      	mov	r3, r4
 80011fa:	f7ff f943 	bl	8000484 <drawLine>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3306      	adds	r3, #6
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	dbeb      	blt.n	80011e4 <testLines+0xac>
    x2    = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e00f      	b.n	8001236 <testLines+0xfe>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	b218      	sxth	r0, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	b219      	sxth	r1, r3
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	b21a      	sxth	r2, r3
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	b21c      	sxth	r4, r3
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4623      	mov	r3, r4
 800122c:	f7ff f92a 	bl	8000484 <drawLine>
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	3306      	adds	r3, #6
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	429a      	cmp	r2, r3
 800123c:	dbeb      	blt.n	8001216 <testLines+0xde>

    fillScreen(BLACK);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ff60 	bl	8001104 <fillScreen>

    x1    = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	3b01      	subs	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e00f      	b.n	8001278 <testLines+0x140>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	b218      	sxth	r0, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	b219      	sxth	r1, r3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	b21a      	sxth	r2, r3
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	b21c      	sxth	r4, r3
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	4623      	mov	r3, r4
 800126e:	f7ff f909 	bl	8000484 <drawLine>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3306      	adds	r3, #6
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbeb      	blt.n	8001258 <testLines+0x120>
    x2    = w - 1;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3b01      	subs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	e00f      	b.n	80012ac <testLines+0x174>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	b218      	sxth	r0, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	b219      	sxth	r1, r3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	b21a      	sxth	r2, r3
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	b21c      	sxth	r4, r3
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	4623      	mov	r3, r4
 80012a2:	f7ff f8ef 	bl	8000484 <drawLine>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	3306      	adds	r3, #6
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbeb      	blt.n	800128c <testLines+0x154>

    fillScreen(BLACK);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff25 	bl	8001104 <fillScreen>

    x1    = w - 1;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e00f      	b.n	80012f0 <testLines+0x1b8>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	b218      	sxth	r0, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	b219      	sxth	r1, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	b21a      	sxth	r2, r3
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	b21c      	sxth	r4, r3
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4623      	mov	r3, r4
 80012e6:	f7ff f8cd 	bl	8000484 <drawLine>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3306      	adds	r3, #6
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbeb      	blt.n	80012d0 <testLines+0x198>
    x2    = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	e00f      	b.n	8001322 <testLines+0x1ea>
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b218      	sxth	r0, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	b219      	sxth	r1, r3
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	b21a      	sxth	r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	b21c      	sxth	r4, r3
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	4623      	mov	r3, r4
 8001318:	f7ff f8b4 	bl	8000484 <drawLine>
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3306      	adds	r3, #6
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	429a      	cmp	r2, r3
 8001328:	dbeb      	blt.n	8001302 <testLines+0x1ca>

}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	3724      	adds	r7, #36	@ 0x24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	20000030 	.word	0x20000030
 8001338:	20000032 	.word	0x20000032

0800133c <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	4613      	mov	r3, r2
 800134a:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <testFastLines+0x78>)
 800134e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <testFastLines+0x7c>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fed1 	bl	8001104 <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	e00a      	b.n	800137e <testFastLines+0x42>
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	b219      	sxth	r1, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	b21a      	sxth	r2, r3
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff f861 	bl	800043a <drawFastHLine>
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	3305      	adds	r3, #5
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbf0      	blt.n	8001368 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e00a      	b.n	80013a2 <testFastLines+0x66>
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	b218      	sxth	r0, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	b21a      	sxth	r2, r3
 8001394:	88bb      	ldrh	r3, [r7, #4]
 8001396:	2100      	movs	r1, #0
 8001398:	f7ff f82a 	bl	80003f0 <drawFastVLine>
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3305      	adds	r3, #5
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbf0      	blt.n	800138c <testFastLines+0x50>
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000030 	.word	0x20000030
 80013b8:	20000032 	.word	0x20000032

080013bc <testRects>:

void testRects(uint16_t color)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08b      	sub	sp, #44	@ 0x2c
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 80013c6:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <testRects+0x9c>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	0fda      	lsrs	r2, r3, #31
 80013ce:	4413      	add	r3, r2
 80013d0:	105b      	asrs	r3, r3, #1
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <testRects+0xa0>)
 80013d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013dc:	0fda      	lsrs	r2, r3, #31
 80013de:	4413      	add	r3, r2
 80013e0:	105b      	asrs	r3, r3, #1
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fe8c 	bl	8001104 <fillScreen>
    n     = min(_width, _height);
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <testRects+0xa0>)
 80013ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <testRects+0x9c>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	4293      	cmp	r3, r2
 80013fa:	bfa8      	it	ge
 80013fc:	4613      	movge	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 8001402:	2302      	movs	r3, #2
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	e01e      	b.n	8001446 <testRects+0x8a>
        i2 = i / 2;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	0fda      	lsrs	r2, r3, #31
 800140c:	4413      	add	r3, r2
 800140e:	105b      	asrs	r3, r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	b29b      	uxth	r3, r3
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	b218      	sxth	r0, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	b29a      	uxth	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	b29b      	uxth	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	b219      	sxth	r1, r3
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	b21a      	sxth	r2, r3
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	b21c      	sxth	r4, r3
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4623      	mov	r3, r4
 800143c:	f7ff fb42 	bl	8000ac4 <drawRect>
    for (i = 2; i < n; i += 6) {
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3306      	adds	r3, #6
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	429a      	cmp	r2, r3
 800144c:	dbdc      	blt.n	8001408 <testRects+0x4c>
    }

}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3724      	adds	r7, #36	@ 0x24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	20000030 	.word	0x20000030
 800145c:	20000032 	.word	0x20000032

08001460 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b08b      	sub	sp, #44	@ 0x2c
 8001464:	af02      	add	r7, sp, #8
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001470:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <testFilledRects+0xd4>)
 8001472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001476:	0fda      	lsrs	r2, r3, #31
 8001478:	4413      	add	r3, r2
 800147a:	105b      	asrs	r3, r3, #1
 800147c:	b21b      	sxth	r3, r3
 800147e:	3b01      	subs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <testFilledRects+0xd8>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	0fda      	lsrs	r2, r3, #31
 800148a:	4413      	add	r3, r2
 800148c:	105b      	asrs	r3, r3, #1
 800148e:	b21b      	sxth	r3, r3
 8001490:	3b01      	subs	r3, #1
 8001492:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff fe35 	bl	8001104 <fillScreen>
    n = min(_width, _height);
 800149a:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <testFilledRects+0xd8>)
 800149c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <testFilledRects+0xd4>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	bfa8      	it	ge
 80014aa:	4613      	movge	r3, r2
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e035      	b.n	8001522 <testFilledRects+0xc2>
        i2    = i / 2;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	0fda      	lsrs	r2, r3, #31
 80014ba:	4413      	add	r3, r2
 80014bc:	105b      	asrs	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b218      	sxth	r0, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b219      	sxth	r1, r3
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	b21a      	sxth	r2, r3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	b21c      	sxth	r4, r3
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4623      	mov	r3, r4
 80014ea:	f7fe feae 	bl	800024a <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b218      	sxth	r0, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	b29b      	uxth	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	b29b      	uxth	r3, r3
 8001508:	b219      	sxth	r1, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	b21a      	sxth	r2, r3
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	b21c      	sxth	r4, r3
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4623      	mov	r3, r4
 8001518:	f7ff fad4 	bl	8000ac4 <drawRect>
    for (i = n; i > 0; i -= 6) {
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	3b06      	subs	r3, #6
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	dcc6      	bgt.n	80014b6 <testFilledRects+0x56>
    }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3724      	adds	r7, #36	@ 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000030 	.word	0x20000030
 8001538:	20000032 	.word	0x20000032

0800153c <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <testFilledCircles+0x74>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <testFilledCircles+0x78>)
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fdce 	bl	8001104 <fillScreen>
    for (x = radius; x < w; x += r2) {
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	e017      	b.n	800159e <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	e00c      	b.n	800158e <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	b218      	sxth	r0, r3
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	b219      	sxth	r1, r3
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	b21a      	sxth	r2, r3
 8001580:	88bb      	ldrh	r3, [r7, #4]
 8001582:	f7ff fa6f 	bl	8000a64 <fillCircle>
        for (y = radius; y < h; y += r2) {
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	429a      	cmp	r2, r3
 8001594:	dbee      	blt.n	8001574 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbe3      	blt.n	800156e <testFilledCircles+0x32>
        }
    }

}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000030 	.word	0x20000030
 80015b4:	20000032 	.word	0x20000032

080015b8 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <testCircles+0x7c>)
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	461a      	mov	r2, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4413      	add	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <testCircles+0x80>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	461a      	mov	r2, r3
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e017      	b.n	8001620 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	e00c      	b.n	8001610 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	b218      	sxth	r0, r3
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	b219      	sxth	r1, r3
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	b21a      	sxth	r2, r3
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	f7fe ffa0 	bl	8000548 <drawCircle>
        for (y = 0; y < h; y += r2) {
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4413      	add	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbee      	blt.n	80015f6 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4413      	add	r3, r2
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbe3      	blt.n	80015f0 <testCircles+0x38>
        }
    }

}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000030 	.word	0x20000030
 8001638:	20000032 	.word	0x20000032

0800163c <testTriangles>:

void testTriangles()
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8001642:	4b2e      	ldr	r3, [pc, #184]	@ (80016fc <testTriangles+0xc0>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	0fda      	lsrs	r2, r3, #31
 800164a:	4413      	add	r3, r2
 800164c:	105b      	asrs	r3, r3, #1
 800164e:	b21b      	sxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <testTriangles+0xc4>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	0fda      	lsrs	r2, r3, #31
 800165c:	4413      	add	r3, r2
 800165e:	105b      	asrs	r3, r3, #1
 8001660:	b21b      	sxth	r3, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fd4c 	bl	8001104 <fillScreen>
    n     = min(cx, cy);
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4293      	cmp	r3, r2
 8001672:	bfa8      	it	ge
 8001674:	4613      	movge	r3, r2
 8001676:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e035      	b.n	80016ea <testTriangles+0xae>
        drawTriangle(
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	b29b      	uxth	r3, r3
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	b29b      	uxth	r3, r3
        drawTriangle(
 800168e:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	b29b      	uxth	r3, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b29b      	uxth	r3, r3
        drawTriangle(
 800169c:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	b29b      	uxth	r3, r3
        drawTriangle(
 80016aa:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b29b      	uxth	r3, r3
        drawTriangle(
 80016b8:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	b291      	uxth	r1, r2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	b292      	uxth	r2, r2
 80016c2:	440a      	add	r2, r1
 80016c4:	b292      	uxth	r2, r2
        drawTriangle(
 80016c6:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	10c9      	asrs	r1, r1, #3
 80016cc:	b289      	uxth	r1, r1
        drawTriangle(
 80016ce:	f001 011f 	and.w	r1, r1, #31
 80016d2:	b289      	uxth	r1, r1
 80016d4:	9102      	str	r1, [sp, #8]
 80016d6:	9201      	str	r2, [sp, #4]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	4633      	mov	r3, r6
 80016dc:	462a      	mov	r2, r5
 80016de:	4621      	mov	r1, r4
 80016e0:	f7ff fb77 	bl	8000dd2 <drawTriangle>
    for (i = 0; i < n; i += 5) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3305      	adds	r3, #5
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dbc5      	blt.n	800167e <testTriangles+0x42>
    }

}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	20000030 	.word	0x20000030
 8001700:	20000032 	.word	0x20000032

08001704 <testFilledTriangles>:

void testFilledTriangles() {
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b089      	sub	sp, #36	@ 0x24
 8001708:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 800170a:	4b53      	ldr	r3, [pc, #332]	@ (8001858 <testFilledTriangles+0x154>)
 800170c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001710:	0fda      	lsrs	r2, r3, #31
 8001712:	4413      	add	r3, r2
 8001714:	105b      	asrs	r3, r3, #1
 8001716:	b21b      	sxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 800171c:	4b4f      	ldr	r3, [pc, #316]	@ (800185c <testFilledTriangles+0x158>)
 800171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001722:	0fda      	lsrs	r2, r3, #31
 8001724:	4413      	add	r3, r2
 8001726:	105b      	asrs	r3, r3, #1
 8001728:	b21b      	sxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fce8 	bl	8001104 <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4293      	cmp	r3, r2
 800173a:	bfa8      	it	ge
 800173c:	4613      	movge	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e080      	b.n	8001844 <testFilledTriangles+0x140>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	b21c      	sxth	r4, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	b29b      	uxth	r3, r3
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	b21d      	sxth	r5, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	b21e      	sxth	r6, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	fa0f fc83 	sxth.w	ip, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21b      	sxth	r3, r3
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	b291      	uxth	r1, r2
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	b292      	uxth	r2, r2
 8001788:	440a      	add	r2, r1
 800178a:	b292      	uxth	r2, r2
 800178c:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	00c9      	lsls	r1, r1, #3
 8001792:	b209      	sxth	r1, r1
 8001794:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8001798:	b208      	sxth	r0, r1
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	10c9      	asrs	r1, r1, #3
 800179e:	b209      	sxth	r1, r1
 80017a0:	f001 011f 	and.w	r1, r1, #31
 80017a4:	b209      	sxth	r1, r1
 80017a6:	4301      	orrs	r1, r0
 80017a8:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 80017aa:	b289      	uxth	r1, r1
 80017ac:	9102      	str	r1, [sp, #8]
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4663      	mov	r3, ip
 80017b4:	4632      	mov	r2, r6
 80017b6:	4629      	mov	r1, r5
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7ff fb44 	bl	8000e46 <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	b21c      	sxth	r4, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b21d      	sxth	r5, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b21e      	sxth	r6, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	fa0f fc83 	sxth.w	ip, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	b299      	uxth	r1, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	b29b      	uxth	r3, r3
 8001804:	440b      	add	r3, r1
 8001806:	b29b      	uxth	r3, r3
 8001808:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	b21b      	sxth	r3, r3
 8001810:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001814:	f023 0307 	bic.w	r3, r3, #7
 8001818:	b218      	sxth	r0, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	b21b      	sxth	r3, r3
 8001820:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001824:	b21b      	sxth	r3, r3
 8001826:	4303      	orrs	r3, r0
 8001828:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 800182a:	b29b      	uxth	r3, r3
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	9101      	str	r1, [sp, #4]
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	4663      	mov	r3, ip
 8001834:	4632      	mov	r2, r6
 8001836:	4629      	mov	r1, r5
 8001838:	4620      	mov	r0, r4
 800183a:	f7ff faca 	bl	8000dd2 <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3b05      	subs	r3, #5
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b0a      	cmp	r3, #10
 8001848:	f73f af7b 	bgt.w	8001742 <testFilledTriangles+0x3e>
    }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001856:	bf00      	nop
 8001858:	20000030 	.word	0x20000030
 800185c:	20000032 	.word	0x20000032

08001860 <testRoundRects>:

void testRoundRects() {
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8001866:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <testRoundRects+0xd4>)
 8001868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186c:	0fda      	lsrs	r2, r3, #31
 800186e:	4413      	add	r3, r2
 8001870:	105b      	asrs	r3, r3, #1
 8001872:	b21b      	sxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8001878:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <testRoundRects+0xd8>)
 800187a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187e:	0fda      	lsrs	r2, r3, #31
 8001880:	4413      	add	r3, r2
 8001882:	105b      	asrs	r3, r3, #1
 8001884:	b21b      	sxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fc3a 	bl	8001104 <fillScreen>
    w     = min(_width, _height);
 8001890:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <testRoundRects+0xd8>)
 8001892:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001896:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <testRoundRects+0xd4>)
 8001898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189c:	4293      	cmp	r3, r2
 800189e:	bfa8      	it	ge
 80018a0:	4613      	movge	r3, r2
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	60fb      	str	r3, [r7, #12]
    red = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 80018aa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b4:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e031      	b.n	8001920 <testRoundRects+0xc0>
        i2 = i / 2;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	0fda      	lsrs	r2, r3, #31
 80018c0:	4413      	add	r3, r2
 80018c2:	105b      	asrs	r3, r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
        red += step;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4413      	add	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	b218      	sxth	r0, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b219      	sxth	r1, r3
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	b21c      	sxth	r4, r3
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	b21d      	sxth	r5, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	da00      	bge.n	80018fa <testRoundRects+0x9a>
 80018f8:	3307      	adds	r3, #7
 80018fa:	10db      	asrs	r3, r3, #3
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001908:	f023 0307 	bic.w	r3, r3, #7
 800190c:	b29b      	uxth	r3, r3
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	9200      	str	r2, [sp, #0]
 8001912:	462b      	mov	r3, r5
 8001914:	4622      	mov	r2, r4
 8001916:	f7ff f916 	bl	8000b46 <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3306      	adds	r3, #6
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbc9      	blt.n	80018bc <testRoundRects+0x5c>
    }

}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	20000030 	.word	0x20000030
 8001938:	20000032 	.word	0x20000032

0800193c <testFilledRoundRects>:

void testFilledRoundRects() {
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001942:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <testFilledRoundRects+0xe0>)
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	0fda      	lsrs	r2, r3, #31
 800194a:	4413      	add	r3, r2
 800194c:	105b      	asrs	r3, r3, #1
 800194e:	b21b      	sxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001954:	4b32      	ldr	r3, [pc, #200]	@ (8001a20 <testFilledRoundRects+0xe4>)
 8001956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195a:	0fda      	lsrs	r2, r3, #31
 800195c:	4413      	add	r3, r2
 800195e:	105b      	asrs	r3, r3, #1
 8001960:	b21b      	sxth	r3, r3
 8001962:	3b01      	subs	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff fbcc 	bl	8001104 <fillScreen>
    green = 256;
 800196c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001970:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001972:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <testFilledRoundRects+0xe4>)
 8001974:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001978:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <testFilledRoundRects+0xe0>)
 800197a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197e:	4293      	cmp	r3, r2
 8001980:	bfa8      	it	ge
 8001982:	4613      	movge	r3, r2
 8001984:	b21b      	sxth	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800198c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001990:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <testFilledRoundRects+0xe4>)
 8001994:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <testFilledRoundRects+0xe0>)
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	4293      	cmp	r3, r2
 80019a0:	bfa8      	it	ge
 80019a2:	4613      	movge	r3, r2
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e02f      	b.n	8001a0a <testFilledRoundRects+0xce>
        i2 = i / 2;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	0fda      	lsrs	r2, r3, #31
 80019ae:	4413      	add	r3, r2
 80019b0:	105b      	asrs	r3, r3, #1
 80019b2:	603b      	str	r3, [r7, #0]
        green -= step;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b218      	sxth	r0, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b219      	sxth	r1, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	b21c      	sxth	r4, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	b21d      	sxth	r5, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da00      	bge.n	80019e8 <testFilledRoundRects+0xac>
 80019e6:	3307      	adds	r3, #7
 80019e8:	10db      	asrs	r3, r3, #3
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	00d2      	lsls	r2, r2, #3
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80019f6:	b292      	uxth	r2, r2
 80019f8:	9201      	str	r2, [sp, #4]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	462b      	mov	r3, r5
 80019fe:	4622      	mov	r2, r4
 8001a00:	f7ff f96e 	bl	8000ce0 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3b06      	subs	r3, #6
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b14      	cmp	r3, #20
 8001a0e:	dccc      	bgt.n	80019aa <testFilledRoundRects+0x6e>
    }

}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000030 	.word	0x20000030
 8001a20:	20000032 	.word	0x20000032

08001a24 <testFillScreen>:
void testFillScreen()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fb6b 	bl	8001104 <fillScreen>
    fillScreen(RED);
 8001a2e:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001a32:	f7ff fb67 	bl	8001104 <fillScreen>
    fillScreen(GREEN);
 8001a36:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001a3a:	f7ff fb63 	bl	8001104 <fillScreen>
    fillScreen(BLUE);
 8001a3e:	201f      	movs	r0, #31
 8001a40:	f7ff fb60 	bl	8001104 <fillScreen>
    fillScreen(BLACK);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff fb5d 	bl	8001104 <fillScreen>
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <testAll>:

void testAll (void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
	testFillScreen();
 8001a52:	f7ff ffe7 	bl	8001a24 <testFillScreen>
	testLines(CYAN);
 8001a56:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001a5a:	f7ff fb6d 	bl	8001138 <testLines>
	testFastLines(RED, BLUE);
 8001a5e:	211f      	movs	r1, #31
 8001a60:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001a64:	f7ff fc6a 	bl	800133c <testFastLines>
	testRects(GREEN);
 8001a68:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001a6c:	f7ff fca6 	bl	80013bc <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001a70:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001a74:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001a78:	f7ff fcf2 	bl	8001460 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001a7c:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001a80:	200a      	movs	r0, #10
 8001a82:	f7ff fd5b 	bl	800153c <testFilledCircles>
	testCircles(10, WHITE);
 8001a86:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a8a:	200a      	movs	r0, #10
 8001a8c:	f7ff fd94 	bl	80015b8 <testCircles>
	testTriangles();
 8001a90:	f7ff fdd4 	bl	800163c <testTriangles>
	testFilledTriangles();
 8001a94:	f7ff fe36 	bl	8001704 <testFilledTriangles>
	testRoundRects();
 8001a98:	f7ff fee2 	bl	8001860 <testRoundRects>
	testFilledRoundRects();
 8001a9c:	f7ff ff4e 	bl	800193c <testFilledRoundRects>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	@ 0x80
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <ST7735_Select+0x14>)
 8001aae:	f000 fff3 	bl	8002a98 <HAL_GPIO_WritePin>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40010c00 	.word	0x40010c00

08001abc <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2180      	movs	r1, #128	@ 0x80
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <ST7735_Unselect+0x14>)
 8001ac6:	f000 ffe7 	bl	8002a98 <HAL_GPIO_WritePin>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <ST7735_Reset>:

void ST7735_Reset()
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <ST7735_Reset+0x28>)
 8001ae0:	f000 ffda 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001ae4:	2005      	movs	r0, #5
 8001ae6:	f000 fd3b 	bl	8002560 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <ST7735_Reset+0x28>)
 8001af2:	f000 ffd1 	bl	8002a98 <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40010c00 	.word	0x40010c00

08001b00 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b10:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <ST7735_WriteCommand+0x2c>)
 8001b12:	f000 ffc1 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001b16:	1df9      	adds	r1, r7, #7
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <ST7735_WriteCommand+0x30>)
 8001b20:	f001 fc34 	bl	800338c <HAL_SPI_Transmit>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	2000003c 	.word	0x2000003c

08001b34 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b44:	4807      	ldr	r0, [pc, #28]	@ (8001b64 <ST7735_WriteData+0x30>)
 8001b46:	f000 ffa7 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <ST7735_WriteData+0x34>)
 8001b56:	f001 fc19 	bl	800338c <HAL_SPI_Transmit>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	2000003c 	.word	0x2000003c

08001b6c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001b7e:	e034      	b.n	8001bea <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ffb7 	bl	8001b00 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001b9c:	7abb      	ldrb	r3, [r7, #10]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001ba6:	7abb      	ldrb	r3, [r7, #10]
 8001ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bac:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001bae:	7abb      	ldrb	r3, [r7, #10]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001bb4:	7abb      	ldrb	r3, [r7, #10]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffbb 	bl	8001b34 <ST7735_WriteData>
            addr += numArgs;
 8001bbe:	7abb      	ldrb	r3, [r7, #10]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001bc6:	89bb      	ldrh	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00e      	beq.n	8001bea <DisplayInit+0x7e>
            ms = *addr++;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001bd6:	89bb      	ldrh	r3, [r7, #12]
 8001bd8:	2bff      	cmp	r3, #255	@ 0xff
 8001bda:	d102      	bne.n	8001be2 <DisplayInit+0x76>
 8001bdc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001be0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001be2:	89bb      	ldrh	r3, [r7, #12]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fcbb 	bl	8002560 <HAL_Delay>
    while(numCommands--) {
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	73fa      	strb	r2, [r7, #15]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1c5      	bne.n	8001b80 <DisplayInit+0x14>
        }
    }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4604      	mov	r4, r0
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4623      	mov	r3, r4
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	4603      	mov	r3, r0
 8001c14:	71bb      	strb	r3, [r7, #6]
 8001c16:	460b      	mov	r3, r1
 8001c18:	717b      	strb	r3, [r7, #5]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001c1e:	202a      	movs	r0, #42	@ 0x2a
 8001c20:	f7ff ff6e 	bl	8001b00 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001c24:	2300      	movs	r3, #0
 8001c26:	733b      	strb	r3, [r7, #12]
 8001c28:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <ST7735_SetAddressWindow+0x88>)
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	737b      	strb	r3, [r7, #13]
 8001c34:	2300      	movs	r3, #0
 8001c36:	73bb      	strb	r3, [r7, #14]
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <ST7735_SetAddressWindow+0x88>)
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	797b      	ldrb	r3, [r7, #5]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2104      	movs	r1, #4
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff72 	bl	8001b34 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001c50:	202b      	movs	r0, #43	@ 0x2b
 8001c52:	f7ff ff55 	bl	8001b00 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <ST7735_SetAddressWindow+0x8c>)
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <ST7735_SetAddressWindow+0x8c>)
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	793b      	ldrb	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2104      	movs	r1, #4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001c7a:	202c      	movs	r0, #44	@ 0x2c
 8001c7c:	f7ff ff40 	bl	8001b00 <ST7735_WriteCommand>
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	20000037 	.word	0x20000037
 8001c8c:	20000038 	.word	0x20000038

08001c90 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8001c9a:	f7ff ff03 	bl	8001aa4 <ST7735_Select>
    ST7735_Reset();
 8001c9e:	f7ff ff19 	bl	8001ad4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001ca2:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <ST7735_Init+0x44>)
 8001ca4:	f7ff ff62 	bl	8001b6c <DisplayInit>
    DisplayInit(init_cmds2);
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <ST7735_Init+0x48>)
 8001caa:	f7ff ff5f 	bl	8001b6c <DisplayInit>
    DisplayInit(init_cmds3);
 8001cae:	480b      	ldr	r0, [pc, #44]	@ (8001cdc <ST7735_Init+0x4c>)
 8001cb0:	f7ff ff5c 	bl	8001b6c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <ST7735_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <ST7735_Init+0x54>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f810 	bl	8001ce8 <ST7735_SetRotation>
    ST7735_Unselect();
 8001cc8:	f7ff fef8 	bl	8001abc <ST7735_Unselect>

}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	08003800 	.word	0x08003800
 8001cd8:	08003838 	.word	0x08003838
 8001cdc:	08003848 	.word	0x08003848
 8001ce0:	20000035 	.word	0x20000035
 8001ce4:	20000036 	.word	0x20000036

08001ce8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <ST7735_SetRotation+0xe4>)
 8001d00:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001d02:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <ST7735_SetRotation+0xe4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d84e      	bhi.n	8001da8 <ST7735_SetRotation+0xc0>
 8001d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d10 <ST7735_SetRotation+0x28>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d43 	.word	0x08001d43
 8001d18:	08001d65 	.word	0x08001d65
 8001d1c:	08001d87 	.word	0x08001d87
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001d20:	23c0      	movs	r3, #192	@ 0xc0
 8001d22:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <ST7735_SetRotation+0xe8>)
 8001d26:	22a0      	movs	r2, #160	@ 0xa0
 8001d28:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <ST7735_SetRotation+0xec>)
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001d30:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <ST7735_SetRotation+0xf0>)
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <ST7735_SetRotation+0xf4>)
 8001d36:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <ST7735_SetRotation+0xf8>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <ST7735_SetRotation+0xfc>)
 8001d3e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001d40:	e032      	b.n	8001da8 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001d42:	23a0      	movs	r3, #160	@ 0xa0
 8001d44:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001d46:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <ST7735_SetRotation+0xec>)
 8001d48:	22a0      	movs	r2, #160	@ 0xa0
 8001d4a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <ST7735_SetRotation+0xe8>)
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001d52:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <ST7735_SetRotation+0xf0>)
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <ST7735_SetRotation+0xfc>)
 8001d58:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <ST7735_SetRotation+0xf8>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <ST7735_SetRotation+0xf4>)
 8001d60:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001d62:	e021      	b.n	8001da8 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <ST7735_SetRotation+0xe8>)
 8001d6a:	22a0      	movs	r2, #160	@ 0xa0
 8001d6c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <ST7735_SetRotation+0xec>)
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001d74:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <ST7735_SetRotation+0xf0>)
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <ST7735_SetRotation+0xf4>)
 8001d7a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <ST7735_SetRotation+0xf8>)
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <ST7735_SetRotation+0xfc>)
 8001d82:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001d84:	e010      	b.n	8001da8 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001d86:	2360      	movs	r3, #96	@ 0x60
 8001d88:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <ST7735_SetRotation+0xec>)
 8001d8c:	22a0      	movs	r2, #160	@ 0xa0
 8001d8e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <ST7735_SetRotation+0xe8>)
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <ST7735_SetRotation+0xf0>)
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <ST7735_SetRotation+0xfc>)
 8001d9c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <ST7735_SetRotation+0xf8>)
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <ST7735_SetRotation+0xf4>)
 8001da4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001da6:	bf00      	nop
  }
  ST7735_Select();
 8001da8:	f7ff fe7c 	bl	8001aa4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001dac:	2036      	movs	r0, #54	@ 0x36
 8001dae:	f7ff fea7 	bl	8001b00 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	2101      	movs	r1, #1
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff febb 	bl	8001b34 <ST7735_WriteData>
  ST7735_Unselect();
 8001dbe:	f7ff fe7d 	bl	8001abc <ST7735_Unselect>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000034 	.word	0x20000034
 8001dd0:	20000032 	.word	0x20000032
 8001dd4:	20000030 	.word	0x20000030
 8001dd8:	20000035 	.word	0x20000035
 8001ddc:	20000037 	.word	0x20000037
 8001de0:	20000036 	.word	0x20000036
 8001de4:	20000038 	.word	0x20000038

08001de8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	460b      	mov	r3, r1
 8001df4:	80bb      	strh	r3, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <ST7735_DrawPixel+0x74>)
 8001dfe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e02:	4293      	cmp	r3, r2
 8001e04:	da26      	bge.n	8001e54 <ST7735_DrawPixel+0x6c>
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	4a15      	ldr	r2, [pc, #84]	@ (8001e60 <ST7735_DrawPixel+0x78>)
 8001e0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	da20      	bge.n	8001e54 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8001e12:	f7ff fe47 	bl	8001aa4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2d8      	uxtb	r0, r3
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	b2d9      	uxtb	r1, r3
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f7ff fee7 	bl	8001c00 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	733b      	strb	r3, [r7, #12]
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2102      	movs	r1, #2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fe73 	bl	8001b34 <ST7735_WriteData>

    ST7735_Unselect();
 8001e4e:	f7ff fe35 	bl	8001abc <ST7735_Unselect>
 8001e52:	e000      	b.n	8001e56 <ST7735_DrawPixel+0x6e>
        return;
 8001e54:	bf00      	nop
}
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000030 	.word	0x20000030
 8001e60:	20000032 	.word	0x20000032

08001e64 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001e64:	b082      	sub	sp, #8
 8001e66:	b590      	push	{r4, r7, lr}
 8001e68:	b089      	sub	sp, #36	@ 0x24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	460b      	mov	r3, r1
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	b2d8      	uxtb	r0, r3
 8001e7e:	88bb      	ldrh	r3, [r7, #4]
 8001e80:	b2d9      	uxtb	r1, r3
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2dc      	uxtb	r4, r3
 8001e92:	88bb      	ldrh	r3, [r7, #4]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	f7ff feac 	bl	8001c00 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	e043      	b.n	8001f36 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	3b20      	subs	r3, #32
 8001eb4:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e029      	b.n	8001f24 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00e      	beq.n	8001efe <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001ee0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	743b      	strb	r3, [r7, #16]
 8001eea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe1c 	bl	8001b34 <ST7735_WriteData>
 8001efc:	e00f      	b.n	8001f1e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001efe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	733b      	strb	r3, [r7, #12]
 8001f0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2102      	movs	r1, #2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fe0b 	bl	8001b34 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f28:	461a      	mov	r2, r3
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d3cf      	bcc.n	8001ed0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d3b5      	bcc.n	8001eae <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3724      	adds	r7, #36	@ 0x24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f4e:	b002      	add	sp, #8
 8001f50:	4770      	bx	lr
	...

08001f54 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001f54:	b082      	sub	sp, #8
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af04      	add	r7, sp, #16
 8001f5c:	603a      	str	r2, [r7, #0]
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	4603      	mov	r3, r0
 8001f62:	80fb      	strh	r3, [r7, #6]
 8001f64:	460b      	mov	r3, r1
 8001f66:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001f68:	f7ff fd9c 	bl	8001aa4 <ST7735_Select>

    while(*str) {
 8001f6c:	e033      	b.n	8001fd6 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	7d3a      	ldrb	r2, [r7, #20]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <ST7735_WriteString+0xa0>)
 8001f76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	db16      	blt.n	8001fac <ST7735_WriteString+0x58>
            x = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001f82:	7d7b      	ldrb	r3, [r7, #21]
 8001f84:	461a      	mov	r2, r3
 8001f86:	88bb      	ldrh	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	7d7a      	ldrb	r2, [r7, #21]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <ST7735_WriteString+0xa4>)
 8001f94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	da21      	bge.n	8001fe0 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d103      	bne.n	8001fac <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	603b      	str	r3, [r7, #0]
                continue;
 8001faa:	e014      	b.n	8001fd6 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	88b9      	ldrh	r1, [r7, #4]
 8001fb2:	88f8      	ldrh	r0, [r7, #6]
 8001fb4:	8c3b      	ldrh	r3, [r7, #32]
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	8bbb      	ldrh	r3, [r7, #28]
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f7ff ff4f 	bl	8001e64 <ST7735_WriteChar>
        x += font.width;
 8001fc6:	7d3b      	ldrb	r3, [r7, #20]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	4413      	add	r3, r2
 8001fce:	80fb      	strh	r3, [r7, #6]
        str++;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1c7      	bne.n	8001f6e <ST7735_WriteString+0x1a>
 8001fde:	e000      	b.n	8001fe2 <ST7735_WriteString+0x8e>
                break;
 8001fe0:	bf00      	nop
    }

    ST7735_Unselect();
 8001fe2:	f7ff fd6b 	bl	8001abc <ST7735_Unselect>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ff0:	b002      	add	sp, #8
 8001ff2:	4770      	bx	lr
 8001ff4:	20000030 	.word	0x20000030
 8001ff8:	20000032 	.word	0x20000032

08001ffc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	4604      	mov	r4, r0
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4623      	mov	r3, r4
 800200c:	80fb      	strh	r3, [r7, #6]
 800200e:	4603      	mov	r3, r0
 8002010:	80bb      	strh	r3, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	807b      	strh	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	4a38      	ldr	r2, [pc, #224]	@ (8002100 <ST7735_FillRectangle+0x104>)
 800201e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002022:	4293      	cmp	r3, r2
 8002024:	da67      	bge.n	80020f6 <ST7735_FillRectangle+0xfa>
 8002026:	88bb      	ldrh	r3, [r7, #4]
 8002028:	4a36      	ldr	r2, [pc, #216]	@ (8002104 <ST7735_FillRectangle+0x108>)
 800202a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800202e:	4293      	cmp	r3, r2
 8002030:	da61      	bge.n	80020f6 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	4413      	add	r3, r2
 8002038:	4a31      	ldr	r2, [pc, #196]	@ (8002100 <ST7735_FillRectangle+0x104>)
 800203a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800203e:	4293      	cmp	r3, r2
 8002040:	dd06      	ble.n	8002050 <ST7735_FillRectangle+0x54>
 8002042:	4b2f      	ldr	r3, [pc, #188]	@ (8002100 <ST7735_FillRectangle+0x104>)
 8002044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002048:	b29a      	uxth	r2, r3
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8002050:	88ba      	ldrh	r2, [r7, #4]
 8002052:	883b      	ldrh	r3, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	4a2b      	ldr	r2, [pc, #172]	@ (8002104 <ST7735_FillRectangle+0x108>)
 8002058:	f9b2 2000 	ldrsh.w	r2, [r2]
 800205c:	4293      	cmp	r3, r2
 800205e:	dd06      	ble.n	800206e <ST7735_FillRectangle+0x72>
 8002060:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <ST7735_FillRectangle+0x108>)
 8002062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002066:	b29a      	uxth	r2, r3
 8002068:	88bb      	ldrh	r3, [r7, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800206e:	f7ff fd19 	bl	8001aa4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	b2d8      	uxtb	r0, r3
 8002076:	88bb      	ldrh	r3, [r7, #4]
 8002078:	b2d9      	uxtb	r1, r3
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4413      	add	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b2dc      	uxtb	r4, r3
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	883b      	ldrh	r3, [r7, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4413      	add	r3, r2
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4622      	mov	r2, r4
 800209c:	f7ff fdb0 	bl	8001c00 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020a0:	8c3b      	ldrh	r3, [r7, #32]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	733b      	strb	r3, [r7, #12]
 80020aa:	8c3b      	ldrh	r3, [r7, #32]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020b6:	4814      	ldr	r0, [pc, #80]	@ (8002108 <ST7735_FillRectangle+0x10c>)
 80020b8:	f000 fcee 	bl	8002a98 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80020bc:	883b      	ldrh	r3, [r7, #0]
 80020be:	80bb      	strh	r3, [r7, #4]
 80020c0:	e013      	b.n	80020ea <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	80fb      	strh	r3, [r7, #6]
 80020c6:	e00a      	b.n	80020de <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80020c8:	f107 010c 	add.w	r1, r7, #12
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	2202      	movs	r2, #2
 80020d2:	480e      	ldr	r0, [pc, #56]	@ (800210c <ST7735_FillRectangle+0x110>)
 80020d4:	f001 f95a 	bl	800338c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	3b01      	subs	r3, #1
 80020dc:	80fb      	strh	r3, [r7, #6]
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f1      	bne.n	80020c8 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	80bb      	strh	r3, [r7, #4]
 80020ea:	88bb      	ldrh	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e8      	bne.n	80020c2 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 80020f0:	f7ff fce4 	bl	8001abc <ST7735_Unselect>
 80020f4:	e000      	b.n	80020f8 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 80020f6:	bf00      	nop
}
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000030 	.word	0x20000030
 8002104:	20000032 	.word	0x20000032
 8002108:	40010c00 	.word	0x40010c00
 800210c:	2000003c 	.word	0x2000003c

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002116:	f000 f9c1 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800211a:	f000 f827 	bl	800216c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211e:	f000 f8a3 	bl	8002268 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002122:	f000 f869 	bl	80021f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(1);
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff fdb2 	bl	8001c90 <ST7735_Init>
  fillScreen(BLACK);
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe ffe9 	bl	8001104 <fillScreen>
  testAll ();
 8002132:	f7ff fc8c 	bl	8001a4e <testAll>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	ST7735_SetRotation(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f7ff fdd6 	bl	8001ce8 <ST7735_SetRotation>
	ST7735_WriteString(0,0, "Hello", Font_11x18, WHITE, BLACK);
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <main+0x54>)
 800213e:	2200      	movs	r2, #0
 8002140:	9202      	str	r2, [sp, #8]
 8002142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002146:	9201      	str	r2, [sp, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a06      	ldr	r2, [pc, #24]	@ (8002168 <main+0x58>)
 8002150:	2100      	movs	r1, #0
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff fefe 	bl	8001f54 <ST7735_WriteString>
	HAL_Delay(500);
 8002158:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800215c:	f000 fa00 	bl	8002560 <HAL_Delay>
	ST7735_SetRotation(1);
 8002160:	bf00      	nop
 8002162:	e7e8      	b.n	8002136 <main+0x26>
 8002164:	20000000 	.word	0x20000000
 8002168:	080037f8 	.word	0x080037f8

0800216c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b090      	sub	sp, #64	@ 0x40
 8002170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	2228      	movs	r2, #40	@ 0x28
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f001 fb03 	bl	8003786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002192:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800219c:	2301      	movs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a0:	2302      	movs	r3, #2
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fc87 	bl	8002ac8 <HAL_RCC_OscConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021c0:	f000 f89e 	bl	8002300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c4:	230f      	movs	r3, #15
 80021c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c8:	2302      	movs	r3, #2
 80021ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2102      	movs	r1, #2
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fef4 	bl	8002fcc <HAL_RCC_ClockConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021ea:	f000 f889 	bl	8002300 <Error_Handler>
  }
}
 80021ee:	bf00      	nop
 80021f0:	3740      	adds	r7, #64	@ 0x40
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021fc:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <MX_SPI1_Init+0x68>)
 80021fe:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <MX_SPI1_Init+0x6c>)
 8002200:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002202:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002204:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002208:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <MX_SPI1_Init+0x68>)
 800220c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002210:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002212:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <MX_SPI1_Init+0x68>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002220:	2200      	movs	r2, #0
 8002222:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002224:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_SPI1_Init+0x68>)
 800222e:	2220      	movs	r2, #32
 8002230:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_SPI1_Init+0x68>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002246:	220a      	movs	r2, #10
 8002248:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <MX_SPI1_Init+0x68>)
 800224c:	f001 f81a 	bl	8003284 <HAL_SPI_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002256:	f000 f853 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000003c 	.word	0x2000003c
 8002264:	40013000 	.word	0x40013000

08002268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226e:	f107 0310 	add.w	r3, r7, #16
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <MX_GPIO_Init+0x90>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a1d      	ldr	r2, [pc, #116]	@ (80022f8 <MX_GPIO_Init+0x90>)
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <MX_GPIO_Init+0x90>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b18      	ldr	r3, [pc, #96]	@ (80022f8 <MX_GPIO_Init+0x90>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <MX_GPIO_Init+0x90>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6193      	str	r3, [r2, #24]
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <MX_GPIO_Init+0x90>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <MX_GPIO_Init+0x90>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <MX_GPIO_Init+0x90>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <MX_GPIO_Init+0x90>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80022ca:	480c      	ldr	r0, [pc, #48]	@ (80022fc <MX_GPIO_Init+0x94>)
 80022cc:	f000 fbe4 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2302      	movs	r3, #2
 80022e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	4619      	mov	r1, r3
 80022e8:	4804      	ldr	r0, [pc, #16]	@ (80022fc <MX_GPIO_Init+0x94>)
 80022ea:	f000 fa41 	bl	8002770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010c00 	.word	0x40010c00

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <Error_Handler+0x8>

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <HAL_MspInit+0x5c>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a14      	ldr	r2, [pc, #80]	@ (8002368 <HAL_MspInit+0x5c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6193      	str	r3, [r2, #24]
 800231e:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_MspInit+0x5c>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <HAL_MspInit+0x5c>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a0e      	ldr	r2, [pc, #56]	@ (8002368 <HAL_MspInit+0x5c>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <HAL_MspInit+0x5c>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_MspInit+0x60>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4a04      	ldr	r2, [pc, #16]	@ (800236c <HAL_MspInit+0x60>)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000

08002370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a15      	ldr	r2, [pc, #84]	@ (80023e0 <HAL_SPI_MspInit+0x70>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d123      	bne.n	80023d8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002390:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_SPI_MspInit+0x74>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a13      	ldr	r2, [pc, #76]	@ (80023e4 <HAL_SPI_MspInit+0x74>)
 8002396:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_SPI_MspInit+0x74>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_SPI_MspInit+0x74>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <HAL_SPI_MspInit+0x74>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_SPI_MspInit+0x74>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023c0:	23a0      	movs	r3, #160	@ 0xa0
 80023c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <HAL_SPI_MspInit+0x78>)
 80023d4:	f000 f9cc 	bl	8002770 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40013000 	.word	0x40013000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010800 	.word	0x40010800

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <NMI_Handler+0x4>

080023f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <MemManage_Handler+0x4>

08002404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <UsageFault_Handler+0x4>

08002414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243c:	f000 f874 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002450:	f7ff fff8 	bl	8002444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002454:	480b      	ldr	r0, [pc, #44]	@ (8002484 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002456:	490c      	ldr	r1, [pc, #48]	@ (8002488 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002458:	4a0c      	ldr	r2, [pc, #48]	@ (800248c <LoopFillZerobss+0x16>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800245c:	e002      	b.n	8002464 <LoopCopyDataInit>

0800245e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002462:	3304      	adds	r3, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002468:	d3f9      	bcc.n	800245e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246a:	4a09      	ldr	r2, [pc, #36]	@ (8002490 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800246c:	4c09      	ldr	r4, [pc, #36]	@ (8002494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002470:	e001      	b.n	8002476 <LoopFillZerobss>

08002472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002474:	3204      	adds	r2, #4

08002476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002478:	d3fb      	bcc.n	8002472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800247a:	f001 f98d 	bl	8003798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800247e:	f7ff fe47 	bl	8002110 <main>
  bx lr
 8002482:	4770      	bx	lr
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800248c:	080045fc 	.word	0x080045fc
  ldr r2, =_sbss
 8002490:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002494:	20000098 	.word	0x20000098

08002498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC1_2_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <HAL_Init+0x28>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a07      	ldr	r2, [pc, #28]	@ (80024c4 <HAL_Init+0x28>)
 80024a6:	f043 0310 	orr.w	r3, r3, #16
 80024aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 f92b 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b2:	200f      	movs	r0, #15
 80024b4:	f000 f808 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b8:	f7ff ff28 	bl	800230c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000

080024c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_InitTick+0x54>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_InitTick+0x58>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f935 	bl	8002756 <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00e      	b.n	8002514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d80a      	bhi.n	8002512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fc:	2200      	movs	r2, #0
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f000 f90b 	bl	800271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002508:	4a06      	ldr	r2, [pc, #24]	@ (8002524 <HAL_InitTick+0x5c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000008 	.word	0x20000008
 8002520:	20000010 	.word	0x20000010
 8002524:	2000000c 	.word	0x2000000c

08002528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_IncTick+0x1c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_IncTick+0x20>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a03      	ldr	r2, [pc, #12]	@ (8002548 <HAL_IncTick+0x20>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	20000010 	.word	0x20000010
 8002548:	20000094 	.word	0x20000094

0800254c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b02      	ldr	r3, [pc, #8]	@ (800255c <HAL_GetTick+0x10>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	20000094 	.word	0x20000094

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff fff0 	bl	800254c <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_Delay+0x44>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffe0 	bl	800254c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000010 	.word	0x20000010

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	@ (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	@ (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	@ (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	@ 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	@ 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f7ff ff90 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff49 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff5e 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff90 	bl	8002660 <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5f 	bl	800260c <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffb0 	bl	80026c4 <SysTick_Config>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b08b      	sub	sp, #44	@ 0x2c
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002782:	e179      	b.n	8002a78 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002784:	2201      	movs	r2, #1
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 8168 	bne.w	8002a72 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4a96      	ldr	r2, [pc, #600]	@ (8002a00 <HAL_GPIO_Init+0x290>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d05e      	beq.n	800286a <HAL_GPIO_Init+0xfa>
 80027ac:	4a94      	ldr	r2, [pc, #592]	@ (8002a00 <HAL_GPIO_Init+0x290>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d875      	bhi.n	800289e <HAL_GPIO_Init+0x12e>
 80027b2:	4a94      	ldr	r2, [pc, #592]	@ (8002a04 <HAL_GPIO_Init+0x294>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d058      	beq.n	800286a <HAL_GPIO_Init+0xfa>
 80027b8:	4a92      	ldr	r2, [pc, #584]	@ (8002a04 <HAL_GPIO_Init+0x294>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d86f      	bhi.n	800289e <HAL_GPIO_Init+0x12e>
 80027be:	4a92      	ldr	r2, [pc, #584]	@ (8002a08 <HAL_GPIO_Init+0x298>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d052      	beq.n	800286a <HAL_GPIO_Init+0xfa>
 80027c4:	4a90      	ldr	r2, [pc, #576]	@ (8002a08 <HAL_GPIO_Init+0x298>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d869      	bhi.n	800289e <HAL_GPIO_Init+0x12e>
 80027ca:	4a90      	ldr	r2, [pc, #576]	@ (8002a0c <HAL_GPIO_Init+0x29c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d04c      	beq.n	800286a <HAL_GPIO_Init+0xfa>
 80027d0:	4a8e      	ldr	r2, [pc, #568]	@ (8002a0c <HAL_GPIO_Init+0x29c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d863      	bhi.n	800289e <HAL_GPIO_Init+0x12e>
 80027d6:	4a8e      	ldr	r2, [pc, #568]	@ (8002a10 <HAL_GPIO_Init+0x2a0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d046      	beq.n	800286a <HAL_GPIO_Init+0xfa>
 80027dc:	4a8c      	ldr	r2, [pc, #560]	@ (8002a10 <HAL_GPIO_Init+0x2a0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d85d      	bhi.n	800289e <HAL_GPIO_Init+0x12e>
 80027e2:	2b12      	cmp	r3, #18
 80027e4:	d82a      	bhi.n	800283c <HAL_GPIO_Init+0xcc>
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d859      	bhi.n	800289e <HAL_GPIO_Init+0x12e>
 80027ea:	a201      	add	r2, pc, #4	@ (adr r2, 80027f0 <HAL_GPIO_Init+0x80>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	0800286b 	.word	0x0800286b
 80027f4:	08002845 	.word	0x08002845
 80027f8:	08002857 	.word	0x08002857
 80027fc:	08002899 	.word	0x08002899
 8002800:	0800289f 	.word	0x0800289f
 8002804:	0800289f 	.word	0x0800289f
 8002808:	0800289f 	.word	0x0800289f
 800280c:	0800289f 	.word	0x0800289f
 8002810:	0800289f 	.word	0x0800289f
 8002814:	0800289f 	.word	0x0800289f
 8002818:	0800289f 	.word	0x0800289f
 800281c:	0800289f 	.word	0x0800289f
 8002820:	0800289f 	.word	0x0800289f
 8002824:	0800289f 	.word	0x0800289f
 8002828:	0800289f 	.word	0x0800289f
 800282c:	0800289f 	.word	0x0800289f
 8002830:	0800289f 	.word	0x0800289f
 8002834:	0800284d 	.word	0x0800284d
 8002838:	08002861 	.word	0x08002861
 800283c:	4a75      	ldr	r2, [pc, #468]	@ (8002a14 <HAL_GPIO_Init+0x2a4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002842:	e02c      	b.n	800289e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	623b      	str	r3, [r7, #32]
          break;
 800284a:	e029      	b.n	80028a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	3304      	adds	r3, #4
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e024      	b.n	80028a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	3308      	adds	r3, #8
 800285c:	623b      	str	r3, [r7, #32]
          break;
 800285e:	e01f      	b.n	80028a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	330c      	adds	r3, #12
 8002866:	623b      	str	r3, [r7, #32]
          break;
 8002868:	e01a      	b.n	80028a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002872:	2304      	movs	r3, #4
 8002874:	623b      	str	r3, [r7, #32]
          break;
 8002876:	e013      	b.n	80028a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002880:	2308      	movs	r3, #8
 8002882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	611a      	str	r2, [r3, #16]
          break;
 800288a:	e009      	b.n	80028a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800288c:	2308      	movs	r3, #8
 800288e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	615a      	str	r2, [r3, #20]
          break;
 8002896:	e003      	b.n	80028a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
          break;
 800289c:	e000      	b.n	80028a0 <HAL_GPIO_Init+0x130>
          break;
 800289e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2bff      	cmp	r3, #255	@ 0xff
 80028a4:	d801      	bhi.n	80028aa <HAL_GPIO_Init+0x13a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_Init+0x13e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2bff      	cmp	r3, #255	@ 0xff
 80028b4:	d802      	bhi.n	80028bc <HAL_GPIO_Init+0x14c>
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	e002      	b.n	80028c2 <HAL_GPIO_Init+0x152>
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	3b08      	subs	r3, #8
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	210f      	movs	r1, #15
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	401a      	ands	r2, r3
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	431a      	orrs	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80c1 	beq.w	8002a72 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028f0:	4b49      	ldr	r3, [pc, #292]	@ (8002a18 <HAL_GPIO_Init+0x2a8>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a48      	ldr	r2, [pc, #288]	@ (8002a18 <HAL_GPIO_Init+0x2a8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b46      	ldr	r3, [pc, #280]	@ (8002a18 <HAL_GPIO_Init+0x2a8>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002908:	4a44      	ldr	r2, [pc, #272]	@ (8002a1c <HAL_GPIO_Init+0x2ac>)
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3c      	ldr	r2, [pc, #240]	@ (8002a20 <HAL_GPIO_Init+0x2b0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d01f      	beq.n	8002974 <HAL_GPIO_Init+0x204>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a3b      	ldr	r2, [pc, #236]	@ (8002a24 <HAL_GPIO_Init+0x2b4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d019      	beq.n	8002970 <HAL_GPIO_Init+0x200>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a28 <HAL_GPIO_Init+0x2b8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d013      	beq.n	800296c <HAL_GPIO_Init+0x1fc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a39      	ldr	r2, [pc, #228]	@ (8002a2c <HAL_GPIO_Init+0x2bc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00d      	beq.n	8002968 <HAL_GPIO_Init+0x1f8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a38      	ldr	r2, [pc, #224]	@ (8002a30 <HAL_GPIO_Init+0x2c0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <HAL_GPIO_Init+0x1f4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a37      	ldr	r2, [pc, #220]	@ (8002a34 <HAL_GPIO_Init+0x2c4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_GPIO_Init+0x1f0>
 800295c:	2305      	movs	r3, #5
 800295e:	e00a      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002960:	2306      	movs	r3, #6
 8002962:	e008      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002964:	2304      	movs	r3, #4
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002968:	2303      	movs	r3, #3
 800296a:	e004      	b.n	8002976 <HAL_GPIO_Init+0x206>
 800296c:	2302      	movs	r3, #2
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_GPIO_Init+0x206>
 8002974:	2300      	movs	r3, #0
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4093      	lsls	r3, r2
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002986:	4925      	ldr	r1, [pc, #148]	@ (8002a1c <HAL_GPIO_Init+0x2ac>)
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029a0:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4924      	ldr	r1, [pc, #144]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ae:	4b22      	ldr	r3, [pc, #136]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4920      	ldr	r1, [pc, #128]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	491a      	ldr	r1, [pc, #104]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60cb      	str	r3, [r1, #12]
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029d6:	4b18      	ldr	r3, [pc, #96]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	43db      	mvns	r3, r3
 80029de:	4916      	ldr	r1, [pc, #88]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d025      	beq.n	8002a3c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4910      	ldr	r1, [pc, #64]	@ (8002a38 <HAL_GPIO_Init+0x2c8>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
 80029fc:	e025      	b.n	8002a4a <HAL_GPIO_Init+0x2da>
 80029fe:	bf00      	nop
 8002a00:	10320000 	.word	0x10320000
 8002a04:	10310000 	.word	0x10310000
 8002a08:	10220000 	.word	0x10220000
 8002a0c:	10210000 	.word	0x10210000
 8002a10:	10120000 	.word	0x10120000
 8002a14:	10110000 	.word	0x10110000
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40010800 	.word	0x40010800
 8002a24:	40010c00 	.word	0x40010c00
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40011400 	.word	0x40011400
 8002a30:	40011800 	.word	0x40011800
 8002a34:	40011c00 	.word	0x40011c00
 8002a38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_GPIO_Init+0x324>)
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	4913      	ldr	r1, [pc, #76]	@ (8002a94 <HAL_GPIO_Init+0x324>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a56:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <HAL_GPIO_Init+0x324>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	490e      	ldr	r1, [pc, #56]	@ (8002a94 <HAL_GPIO_Init+0x324>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
 8002a62:	e006      	b.n	8002a72 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_GPIO_Init+0x324>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	4909      	ldr	r1, [pc, #36]	@ (8002a94 <HAL_GPIO_Init+0x324>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	3301      	adds	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f47f ae7e 	bne.w	8002784 <HAL_GPIO_Init+0x14>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	372c      	adds	r7, #44	@ 0x2c
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40010400 	.word	0x40010400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e272      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8087 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae8:	4b92      	ldr	r3, [pc, #584]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af4:	4b8f      	ldr	r3, [pc, #572]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d112      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
 8002b00:	4b8c      	ldr	r3, [pc, #560]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0e:	4b89      	ldr	r3, [pc, #548]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d06c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d168      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e24c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x76>
 8002b30:	4b80      	ldr	r3, [pc, #512]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a7f      	ldr	r2, [pc, #508]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e02e      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x98>
 8002b46:	4b7b      	ldr	r3, [pc, #492]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b78      	ldr	r3, [pc, #480]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a77      	ldr	r2, [pc, #476]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e01d      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0xbc>
 8002b6a:	4b72      	ldr	r3, [pc, #456]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a71      	ldr	r2, [pc, #452]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b6f      	ldr	r3, [pc, #444]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0xd4>
 8002b84:	4b6b      	ldr	r3, [pc, #428]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6a      	ldr	r2, [pc, #424]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b68      	ldr	r3, [pc, #416]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a67      	ldr	r2, [pc, #412]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fcd2 	bl	800254c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7ff fcce 	bl	800254c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e200      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0xe4>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7ff fcbe 	bl	800254c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7ff fcba 	bl	800254c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1ec      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	4b53      	ldr	r3, [pc, #332]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x10c>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d063      	beq.n	8002cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c02:	4b4c      	ldr	r3, [pc, #304]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c0e:	4b49      	ldr	r3, [pc, #292]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d11c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
 8002c1a:	4b46      	ldr	r3, [pc, #280]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	4b43      	ldr	r3, [pc, #268]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1c0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4939      	ldr	r1, [pc, #228]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	e03a      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5c:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7ff fc73 	bl	800254c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7ff fc6f 	bl	800254c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1a1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4927      	ldr	r1, [pc, #156]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7ff fc52 	bl	800254c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cac:	f7ff fc4e 	bl	800254c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e180      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03a      	beq.n	8002d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7ff fc32 	bl	800254c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7ff fc2e 	bl	800254c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e160      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f000 fa9c 	bl	8003248 <RCC_Delay>
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_RCC_OscConfig+0x274>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7ff fc18 	bl	800254c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7ff fc14 	bl	800254c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d908      	bls.n	8002d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e146      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	42420000 	.word	0x42420000
 8002d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b92      	ldr	r3, [pc, #584]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e9      	bne.n	8002d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a6 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	4b88      	ldr	r3, [pc, #544]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a87      	ldr	r2, [pc, #540]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b85      	ldr	r3, [pc, #532]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d118      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d92:	4b7f      	ldr	r3, [pc, #508]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7e      	ldr	r2, [pc, #504]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7ff fbd5 	bl	800254c <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7ff fbd1 	bl	800254c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	@ 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e103      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b75      	ldr	r3, [pc, #468]	@ (8002f90 <HAL_RCC_OscConfig+0x4c8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x312>
 8002dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e02d      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x334>
 8002de2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a69      	ldr	r2, [pc, #420]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6213      	str	r3, [r2, #32]
 8002dee:	4b67      	ldr	r3, [pc, #412]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a66      	ldr	r2, [pc, #408]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6213      	str	r3, [r2, #32]
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x356>
 8002e04:	4b61      	ldr	r3, [pc, #388]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a60      	ldr	r2, [pc, #384]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	4b5e      	ldr	r3, [pc, #376]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a5d      	ldr	r2, [pc, #372]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x36e>
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a5a      	ldr	r2, [pc, #360]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b58      	ldr	r3, [pc, #352]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a57      	ldr	r2, [pc, #348]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7ff fb85 	bl	800254c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7ff fb81 	bl	800254c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0b1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x37e>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff fb6f 	bl	800254c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7ff fb6b 	bl	800254c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e09b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	4b40      	ldr	r3, [pc, #256]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8087 	beq.w	8002fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb0:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d061      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d146      	bne.n	8002f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b33      	ldr	r3, [pc, #204]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7ff fb3f 	bl	800254c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7ff fb3b 	bl	800254c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e06d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002efa:	4b24      	ldr	r3, [pc, #144]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4921      	ldr	r1, [pc, #132]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a19      	ldr	r1, [r3, #32]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	491b      	ldr	r1, [pc, #108]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f24:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7ff fb0f 	bl	800254c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7ff fb0b 	bl	800254c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e03d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x46a>
 8002f50:	e035      	b.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff faf8 	bl	800254c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7ff faf4 	bl	800254c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e026      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x498>
 8002f7e:	e01e      	b.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e019      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40007000 	.word	0x40007000
 8002f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_OscConfig+0x500>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d0      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b67      	ldr	r3, [pc, #412]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4965      	ldr	r1, [pc, #404]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b63      	ldr	r3, [pc, #396]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b8      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a58      	ldr	r2, [pc, #352]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003040:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a52      	ldr	r2, [pc, #328]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800304a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b50      	ldr	r3, [pc, #320]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	494d      	ldr	r1, [pc, #308]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d040      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d115      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b41      	ldr	r3, [pc, #260]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e073      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3d      	ldr	r3, [pc, #244]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e06b      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b39      	ldr	r3, [pc, #228]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4936      	ldr	r1, [pc, #216]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7ff fa46 	bl	800254c <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7ff fa42 	bl	800254c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e053      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2d      	ldr	r3, [pc, #180]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d210      	bcs.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b24      	ldr	r3, [pc, #144]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4922      	ldr	r1, [pc, #136]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b20      	ldr	r3, [pc, #128]	@ (800318c <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e032      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4916      	ldr	r1, [pc, #88]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003146:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	490e      	ldr	r1, [pc, #56]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315a:	f000 f821 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800315e:	4602      	mov	r2, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	490a      	ldr	r1, [pc, #40]	@ (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	5ccb      	ldrb	r3, [r1, r3]
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	4a09      	ldr	r2, [pc, #36]	@ (8003198 <HAL_RCC_ClockConfig+0x1cc>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_RCC_ClockConfig+0x1d0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f9a4 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	080045d0 	.word	0x080045d0
 8003198:	20000008 	.word	0x20000008
 800319c:	2000000c 	.word	0x2000000c

080031a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x94>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x36>
 80031ce:	e027      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 80031d2:	613b      	str	r3, [r7, #16]
      break;
 80031d4:	e027      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	0c9b      	lsrs	r3, r3, #18
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	4a17      	ldr	r2, [pc, #92]	@ (800323c <HAL_RCC_GetSysClockFreq+0x9c>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ee:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x94>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0c5b      	lsrs	r3, r3, #17
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e004      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0c      	ldr	r2, [pc, #48]	@ (8003244 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	613b      	str	r3, [r7, #16]
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x98>)
 8003222:	613b      	str	r3, [r7, #16]
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	693b      	ldr	r3, [r7, #16]
}
 8003228:	4618      	mov	r0, r3
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	007a1200 	.word	0x007a1200
 800323c:	080045e0 	.word	0x080045e0
 8003240:	080045f0 	.word	0x080045f0
 8003244:	003d0900 	.word	0x003d0900

08003248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <RCC_Delay+0x34>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	@ (8003280 <RCC_Delay+0x38>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0a5b      	lsrs	r3, r3, #9
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003264:	bf00      	nop
  }
  while (Delay --);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	60fa      	str	r2, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f9      	bne.n	8003264 <RCC_Delay+0x1c>
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	20000008 	.word	0x20000008
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e076      	b.n	8003384 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032a6:	d009      	beq.n	80032bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
 80032ae:	e005      	b.n	80032bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff f84a 	bl	8002370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003340:	ea42 0103 	orr.w	r1, r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	0c1a      	lsrs	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f002 0204 	and.w	r2, r2, #4
 8003362:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003372:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800339c:	f7ff f8d6 	bl	800254c <HAL_GetTick>
 80033a0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	e12a      	b.n	800360c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_SPI_Transmit+0x36>
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e122      	b.n	800360c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_SPI_Transmit+0x48>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e11b      	b.n	800360c <HAL_SPI_Transmit+0x280>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2203      	movs	r2, #3
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003422:	d10f      	bne.n	8003444 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003432:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344e:	2b40      	cmp	r3, #64	@ 0x40
 8003450:	d007      	beq.n	8003462 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800346a:	d152      	bne.n	8003512 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_Transmit+0xee>
 8003474:	8b7b      	ldrh	r3, [r7, #26]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d145      	bne.n	8003506 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	881a      	ldrh	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	1c9a      	adds	r2, r3, #2
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800349e:	e032      	b.n	8003506 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d112      	bne.n	80034d4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034d2:	e018      	b.n	8003506 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d4:	f7ff f83a 	bl	800254c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d803      	bhi.n	80034ec <HAL_SPI_Transmit+0x160>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d102      	bne.n	80034f2 <HAL_SPI_Transmit+0x166>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e082      	b.n	800360c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1c7      	bne.n	80034a0 <HAL_SPI_Transmit+0x114>
 8003510:	e053      	b.n	80035ba <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_SPI_Transmit+0x194>
 800351a:	8b7b      	ldrh	r3, [r7, #26]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d147      	bne.n	80035b0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003546:	e033      	b.n	80035b0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d113      	bne.n	800357e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800357c:	e018      	b.n	80035b0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357e:	f7fe ffe5 	bl	800254c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d803      	bhi.n	8003596 <HAL_SPI_Transmit+0x20a>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d102      	bne.n	800359c <HAL_SPI_Transmit+0x210>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e02d      	b.n	800360c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1c6      	bne.n	8003548 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f8b0 	bl	8003724 <SPI_EndRxTxTransaction>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800360a:	2300      	movs	r3, #0
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003624:	f7fe ff92 	bl	800254c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4413      	add	r3, r2
 8003632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003634:	f7fe ff8a 	bl	800254c <HAL_GetTick>
 8003638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800363a:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	015b      	lsls	r3, r3, #5
 8003640:	0d1b      	lsrs	r3, r3, #20
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364a:	e054      	b.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d050      	beq.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003654:	f7fe ff7a 	bl	800254c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	429a      	cmp	r2, r3
 8003662:	d902      	bls.n	800366a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d13d      	bne.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003682:	d111      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800368c:	d004      	beq.n	8003698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003696:	d107      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b0:	d10f      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e017      	b.n	8003716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	429a      	cmp	r2, r3
 8003712:	d19b      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000008 	.word	0x20000008

08003724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2201      	movs	r2, #1
 8003738:	2102      	movs	r1, #2
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff ff6a 	bl	8003614 <SPI_WaitFlagStateUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e013      	b.n	800377e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2200      	movs	r2, #0
 800375e:	2180      	movs	r1, #128	@ 0x80
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ff57 	bl	8003614 <SPI_WaitFlagStateUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e000      	b.n	800377e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <memset>:
 8003786:	4603      	mov	r3, r0
 8003788:	4402      	add	r2, r0
 800378a:	4293      	cmp	r3, r2
 800378c:	d100      	bne.n	8003790 <memset+0xa>
 800378e:	4770      	bx	lr
 8003790:	f803 1b01 	strb.w	r1, [r3], #1
 8003794:	e7f9      	b.n	800378a <memset+0x4>
	...

08003798 <__libc_init_array>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	2600      	movs	r6, #0
 800379c:	4d0c      	ldr	r5, [pc, #48]	@ (80037d0 <__libc_init_array+0x38>)
 800379e:	4c0d      	ldr	r4, [pc, #52]	@ (80037d4 <__libc_init_array+0x3c>)
 80037a0:	1b64      	subs	r4, r4, r5
 80037a2:	10a4      	asrs	r4, r4, #2
 80037a4:	42a6      	cmp	r6, r4
 80037a6:	d109      	bne.n	80037bc <__libc_init_array+0x24>
 80037a8:	f000 f81a 	bl	80037e0 <_init>
 80037ac:	2600      	movs	r6, #0
 80037ae:	4d0a      	ldr	r5, [pc, #40]	@ (80037d8 <__libc_init_array+0x40>)
 80037b0:	4c0a      	ldr	r4, [pc, #40]	@ (80037dc <__libc_init_array+0x44>)
 80037b2:	1b64      	subs	r4, r4, r5
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	42a6      	cmp	r6, r4
 80037b8:	d105      	bne.n	80037c6 <__libc_init_array+0x2e>
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c0:	4798      	blx	r3
 80037c2:	3601      	adds	r6, #1
 80037c4:	e7ee      	b.n	80037a4 <__libc_init_array+0xc>
 80037c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ca:	4798      	blx	r3
 80037cc:	3601      	adds	r6, #1
 80037ce:	e7f2      	b.n	80037b6 <__libc_init_array+0x1e>
 80037d0:	080045f4 	.word	0x080045f4
 80037d4:	080045f4 	.word	0x080045f4
 80037d8:	080045f4 	.word	0x080045f4
 80037dc:	080045f8 	.word	0x080045f8

080037e0 <_init>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr

080037ec <_fini>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr
