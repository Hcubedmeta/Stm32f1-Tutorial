
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b6c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  08006d58  08006d58  00007d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007608  08007608  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007608  08007608  00008608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007610  08007610  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007610  08007610  00008610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007614  08007614  00008614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007618  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001d8  080077ec  000091d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080077ec  00009454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b3c  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c41  00000000  00000000  00012d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00014980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fe  00000000  00000000  000153f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5c8  00000000  00000000  00015bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0b2  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000951b8  00000000  00000000  0003d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c0c  00000000  00000000  000d2464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d6070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08006d3c 	.word	0x08006d3c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	08006d3c 	.word	0x08006d3c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000c0a:	1df9      	adds	r1, r7, #7
 8000c0c:	2364      	movs	r3, #100	@ 0x64
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <spi_write+0x20>)
 8000c12:	f003 f843 	bl	8003c9c <HAL_SPI_Transmit>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000248 	.word	0x20000248

08000c24 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2104      	movs	r1, #4
 8000c32:	480a      	ldr	r0, [pc, #40]	@ (8000c5c <lcd_write_data+0x38>)
 8000c34:	f001 fb34 	bl	80022a0 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <lcd_write_data+0x38>)
 8000c3e:	f001 fb2f 	bl	80022a0 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ffdb 	bl	8000c00 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <lcd_write_data+0x38>)
 8000c50:	f001 fb26 	bl	80022a0 <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40010800 	.word	0x40010800

08000c60 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <lcd_write_command+0x38>)
 8000c70:	f001 fb16 	bl	80022a0 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <lcd_write_command+0x38>)
 8000c7a:	f001 fb11 	bl	80022a0 <HAL_GPIO_WritePin>
    spi_write(data);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ffbd 	bl	8000c00 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2104      	movs	r1, #4
 8000c8a:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <lcd_write_command+0x38>)
 8000c8c:	f001 fb08 	bl	80022a0 <HAL_GPIO_WritePin>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010800 	.word	0x40010800

08000c9c <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ffd7 	bl	8000c60 <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ffd2 	bl	8000c60 <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ffae 	bl	8000c24 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ffa9 	bl	8000c24 <lcd_write_data>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8000cda:	b480      	push	{r7}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	701a      	strb	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
	...

08000d04 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8000d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d16:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000d1a:	e01c      	b.n	8000d56 <delay_ms+0x52>
        while(counter--);
 8000d1c:	bf00      	nop
 8000d1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000d22:	f04f 0200 	mov.w	r2, #0
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <delay_ms+0x68>)
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	f7ff fa88 	bl	8000240 <__aeabi_dsub>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	4620      	mov	r0, r4
 8000d42:	4629      	mov	r1, r5
 8000d44:	f7ff fe9c 	bl	8000a80 <__aeabi_dcmpeq>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0e7      	beq.n	8000d1e <delay_ms+0x1a>
        counter = millis;
 8000d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d52:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	617a      	str	r2, [r7, #20]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1dd      	bne.n	8000d1c <delay_ms+0x18>
    }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	3ff00000 	.word	0x3ff00000

08000d70 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	4812      	ldr	r0, [pc, #72]	@ (8000dc4 <lcd_init+0x54>)
 8000d7a:	f001 fa91 	bl	80022a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2102      	movs	r1, #2
 8000d82:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <lcd_init+0x54>)
 8000d84:	f001 fa8c 	bl	80022a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <lcd_init+0x54>)
 8000d8e:	f001 fa87 	bl	80022a0 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2108      	movs	r1, #8
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <lcd_init+0x54>)
 8000d98:	f001 fa82 	bl	80022a0 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4909      	ldr	r1, [pc, #36]	@ (8000dc8 <lcd_init+0x58>)
 8000da2:	f7ff ffaf 	bl	8000d04 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2108      	movs	r1, #8
 8000daa:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <lcd_init+0x54>)
 8000dac:	f001 fa78 	bl	80022a0 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4904      	ldr	r1, [pc, #16]	@ (8000dc8 <lcd_init+0x58>)
 8000db6:	f7ff ffa5 	bl	8000d04 <delay_ms>

    lcd_init_command_list();
 8000dba:	f000 f807 	bl	8000dcc <lcd_init_command_list>
    
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	407f4000 	.word	0x407f4000

08000dcc <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2010      	movs	r0, #16
 8000dd4:	f7ff ff62 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2011      	movs	r0, #17
 8000ddc:	f7ff ff5e 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8000de0:	2100      	movs	r1, #0
 8000de2:	2012      	movs	r0, #18
 8000de4:	f7ff ff5a 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8000de8:	2100      	movs	r1, #0
 8000dea:	2013      	movs	r0, #19
 8000dec:	f7ff ff56 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8000df0:	2100      	movs	r1, #0
 8000df2:	2014      	movs	r0, #20
 8000df4:	f7ff ff52 	bl	8000c9c <lcd_write_register>
    
    delay_ms(10);
 8000df8:	f04f 0000 	mov.w	r0, #0
 8000dfc:	4960      	ldr	r1, [pc, #384]	@ (8000f80 <lcd_init_command_list+0x1b4>)
 8000dfe:	f7ff ff81 	bl	8000d04 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 8000e02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e06:	2011      	movs	r0, #17
 8000e08:	f7ff ff48 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 8000e0c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000e10:	2012      	movs	r0, #18
 8000e12:	f7ff ff43 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8000e16:	216f      	movs	r1, #111	@ 0x6f
 8000e18:	2013      	movs	r0, #19
 8000e1a:	f7ff ff3f 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8000e1e:	f644 115f 	movw	r1, #18783	@ 0x495f
 8000e22:	2014      	movs	r0, #20
 8000e24:	f7ff ff3a 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000e28:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000e2c:	2010      	movs	r0, #16
 8000e2e:	f7ff ff35 	bl	8000c9c <lcd_write_register>
    
    delay_ms(10);
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	4952      	ldr	r1, [pc, #328]	@ (8000f80 <lcd_init_command_list+0x1b4>)
 8000e38:	f7ff ff64 	bl	8000d04 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000e3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e40:	2011      	movs	r0, #17
 8000e42:	f7ff ff2b 	bl	8000c9c <lcd_write_register>

    delay_ms(50);
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	494e      	ldr	r1, [pc, #312]	@ (8000f84 <lcd_init_command_list+0x1b8>)
 8000e4c:	f7ff ff5a 	bl	8000d04 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000e50:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff ff21 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f7ff ff1c 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8000e64:	f241 0130 	movw	r1, #4144	@ 0x1030
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f7ff ff17 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2007      	movs	r0, #7
 8000e72:	f7ff ff13 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8000e76:	f240 2102 	movw	r1, #514	@ 0x202
 8000e7a:	2008      	movs	r0, #8
 8000e7c:	f7ff ff0e 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000e80:	2100      	movs	r1, #0
 8000e82:	200b      	movs	r0, #11
 8000e84:	f7ff ff0a 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000e88:	2100      	movs	r1, #0
 8000e8a:	200c      	movs	r0, #12
 8000e8c:	f7ff ff06 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000e90:	f640 7101 	movw	r1, #3841	@ 0xf01
 8000e94:	200f      	movs	r0, #15
 8000e96:	f7ff ff01 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2015      	movs	r0, #21
 8000e9e:	f7ff fefd 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2020      	movs	r0, #32
 8000ea6:	f7ff fef9 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2021      	movs	r0, #33	@ 0x21
 8000eae:	f7ff fef5 	bl	8000c9c <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2030      	movs	r0, #48	@ 0x30
 8000eb6:	f7ff fef1 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8000eba:	21db      	movs	r1, #219	@ 0xdb
 8000ebc:	2031      	movs	r0, #49	@ 0x31
 8000ebe:	f7ff feed 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2032      	movs	r0, #50	@ 0x32
 8000ec6:	f7ff fee9 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2033      	movs	r0, #51	@ 0x33
 8000ece:	f7ff fee5 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 8000ed2:	21db      	movs	r1, #219	@ 0xdb
 8000ed4:	2034      	movs	r0, #52	@ 0x34
 8000ed6:	f7ff fee1 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8000eda:	2100      	movs	r1, #0
 8000edc:	2035      	movs	r0, #53	@ 0x35
 8000ede:	f7ff fedd 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 8000ee2:	21af      	movs	r1, #175	@ 0xaf
 8000ee4:	2036      	movs	r0, #54	@ 0x36
 8000ee6:	f7ff fed9 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8000eea:	2100      	movs	r1, #0
 8000eec:	2037      	movs	r0, #55	@ 0x37
 8000eee:	f7ff fed5 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 8000ef2:	21db      	movs	r1, #219	@ 0xdb
 8000ef4:	2038      	movs	r0, #56	@ 0x38
 8000ef6:	f7ff fed1 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 8000efa:	2100      	movs	r1, #0
 8000efc:	2039      	movs	r0, #57	@ 0x39
 8000efe:	f7ff fecd 	bl	8000c9c <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 8000f02:	2100      	movs	r1, #0
 8000f04:	2050      	movs	r0, #80	@ 0x50
 8000f06:	f7ff fec9 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8000f0a:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f0e:	2051      	movs	r0, #81	@ 0x51
 8000f10:	f7ff fec4 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 8000f14:	f640 010a 	movw	r1, #2058	@ 0x80a
 8000f18:	2052      	movs	r0, #82	@ 0x52
 8000f1a:	f7ff febf 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000f1e:	210a      	movs	r1, #10
 8000f20:	2053      	movs	r0, #83	@ 0x53
 8000f22:	f7ff febb 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8000f26:	f640 2108 	movw	r1, #2568	@ 0xa08
 8000f2a:	2054      	movs	r0, #84	@ 0x54
 8000f2c:	f7ff feb6 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8000f30:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f34:	2055      	movs	r0, #85	@ 0x55
 8000f36:	f7ff feb1 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2056      	movs	r0, #86	@ 0x56
 8000f3e:	f7ff fead 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8000f42:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8000f46:	2057      	movs	r0, #87	@ 0x57
 8000f48:	f7ff fea8 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000f4c:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000f50:	2058      	movs	r0, #88	@ 0x58
 8000f52:	f7ff fea3 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8000f56:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000f5a:	2059      	movs	r0, #89	@ 0x59
 8000f5c:	f7ff fe9e 	bl	8000c9c <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8000f60:	2112      	movs	r1, #18
 8000f62:	2007      	movs	r0, #7
 8000f64:	f7ff fe9a 	bl	8000c9c <lcd_write_register>

    delay_ms(50); 
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4905      	ldr	r1, [pc, #20]	@ (8000f84 <lcd_init_command_list+0x1b8>)
 8000f6e:	f7ff fec9 	bl	8000d04 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8000f72:	f241 0117 	movw	r1, #4119	@ 0x1017
 8000f76:	2007      	movs	r0, #7
 8000f78:	f7ff fe90 	bl	8000c9c <lcd_write_register>

    
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40240000 	.word	0x40240000
 8000f84:	40490000 	.word	0x40490000

08000f88 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	603a      	str	r2, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	460b      	mov	r3, r1
 8000f96:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8000f98:	1dba      	adds	r2, r7, #6
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fe9b 	bl	8000cda <swap_char>
        y = WIDTH - y;
 8000fa4:	79ba      	ldrb	r2, [r7, #6]
 8000fa6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8000fb0:	79f8      	ldrb	r0, [r7, #7]
 8000fb2:	79b9      	ldrb	r1, [r7, #6]
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f000 f87a 	bl	80010b8 <set_draw_window>
    lcd_write_data(colour >> 8);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe2a 	bl	8000c24 <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe25 	bl	8000c24 <lcd_write_data>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71bb      	strb	r3, [r7, #6]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	717b      	strb	r3, [r7, #5]
 8000ffe:	4613      	mov	r3, r2
 8001000:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 8001002:	1dba      	adds	r2, r7, #6
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fe66 	bl	8000cda <swap_char>
        swap_char(&x2, &y2);
 800100e:	1d3a      	adds	r2, r7, #4
 8001010:	1d7b      	adds	r3, r7, #5
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe60 	bl	8000cda <swap_char>
        y1 = WIDTH - y1;
 800101a:	79ba      	ldrb	r2, [r7, #6]
 800101c:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 8001026:	793a      	ldrb	r2, [r7, #4]
 8001028:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 8001032:	1dba      	adds	r2, r7, #6
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fe4e 	bl	8000cda <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 800103e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 8001044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001046:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8001048:	79f8      	ldrb	r0, [r7, #7]
 800104a:	79b9      	ldrb	r1, [r7, #6]
 800104c:	797a      	ldrb	r2, [r7, #5]
 800104e:	793b      	ldrb	r3, [r7, #4]
 8001050:	f000 f832 	bl	80010b8 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2104      	movs	r1, #4
 8001058:	4816      	ldr	r0, [pc, #88]	@ (80010b4 <fill_rectangle+0xd0>)
 800105a:	f001 f921 	bl	80022a0 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e017      	b.n	8001094 <fill_rectangle+0xb0>
        for(int x = 0; x < x2-x1+1; x++) {
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e00a      	b.n	8001080 <fill_rectangle+0x9c>
            lcd_write_data(colour_high);
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fdd9 	bl	8000c24 <lcd_write_data>
            lcd_write_data(colour_low);
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fdd5 	bl	8000c24 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	3301      	adds	r3, #1
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	461a      	mov	r2, r3
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	429a      	cmp	r2, r3
 800108c:	dded      	ble.n	800106a <fill_rectangle+0x86>
    for(int y = 0; y < y2-y1+1 ; y++) {
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	793b      	ldrb	r3, [r7, #4]
 8001096:	461a      	mov	r2, r3
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dde0      	ble.n	8001064 <fill_rectangle+0x80>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2104      	movs	r1, #4
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <fill_rectangle+0xd0>)
 80010a8:	f001 f8fa 	bl	80022a0 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	40010800 	.word	0x40010800

080010b8 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4604      	mov	r4, r0
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4623      	mov	r3, r4
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	4603      	mov	r3, r0
 80010cc:	71bb      	strb	r3, [r7, #6]
 80010ce:	460b      	mov	r3, r1
 80010d0:	717b      	strb	r3, [r7, #5]
 80010d2:	4613      	mov	r3, r2
 80010d4:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 80010d6:	797a      	ldrb	r2, [r7, #5]
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d205      	bcs.n	80010ea <set_draw_window+0x32>
        swap_char(&x2, &x1);
 80010de:	1dfa      	adds	r2, r7, #7
 80010e0:	1d7b      	adds	r3, r7, #5
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fdf8 	bl	8000cda <swap_char>
    if(y2 < y1)
 80010ea:	793a      	ldrb	r2, [r7, #4]
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d205      	bcs.n	80010fe <set_draw_window+0x46>
        swap_char(&y2, &y1);
 80010f2:	1dba      	adds	r2, r7, #6
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fdee 	bl	8000cda <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	4619      	mov	r1, r3
 8001102:	2036      	movs	r0, #54	@ 0x36
 8001104:	f7ff fdca 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4619      	mov	r1, r3
 800110c:	2037      	movs	r0, #55	@ 0x37
 800110e:	f7ff fdc5 	bl	8000c9c <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 8001112:	793b      	ldrb	r3, [r7, #4]
 8001114:	4619      	mov	r1, r3
 8001116:	2038      	movs	r0, #56	@ 0x38
 8001118:	f7ff fdc0 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	4619      	mov	r1, r3
 8001120:	2039      	movs	r0, #57	@ 0x39
 8001122:	f7ff fdbb 	bl	8000c9c <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4619      	mov	r1, r3
 800112a:	2020      	movs	r0, #32
 800112c:	f7ff fdb6 	bl	8000c9c <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	4619      	mov	r1, r3
 8001134:	2021      	movs	r0, #33	@ 0x21
 8001136:	f7ff fdb1 	bl	8000c9c <lcd_write_register>

    lcd_write_command(0x00);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff fd90 	bl	8000c60 <lcd_write_command>
    lcd_write_command(0x22);
 8001140:	2022      	movs	r0, #34	@ 0x22
 8001142:	f7ff fd8d 	bl	8000c60 <lcd_write_command>
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
	...

08001150 <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af02      	add	r7, sp, #8
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	460b      	mov	r3, r1
 800115e:	71bb      	strb	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	3b20      	subs	r3, #32
 8001168:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e070      	b.n	8001252 <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f1c3 010c 	rsb	r1, r3, #12
 8001176:	483b      	ldr	r0, [pc, #236]	@ (8001264 <draw_char+0x114>)
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	4403      	add	r3, r0
 8001186:	440b      	add	r3, r1
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	e059      	b.n	8001246 <draw_char+0xf6>
            if(line & (0x01 << j)) {
 8001192:	7afa      	ldrb	r2, [r7, #11]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	fa42 f303 	asr.w	r3, r2, r3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d04e      	beq.n	8001240 <draw_char+0xf0>
                if(size == 1) {
 80011a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d110      	bne.n	80011cc <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3308      	adds	r3, #8
 80011b6:	b2d8      	uxtb	r0, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	4413      	add	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fedf 	bl	8000f88 <draw_pixel>
 80011ca:	e039      	b.n	8001240 <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	f1c3 0308 	rsb	r3, r3, #8
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2d8      	uxtb	r0, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80011ec:	fb02 f303 	mul.w	r3, r2, r3
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	4413      	add	r3, r2
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f1c3 0308 	rsb	r3, r3, #8
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	b2da      	uxtb	r2, r3
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4413      	add	r3, r2
 800120e:	b2da      	uxtb	r2, r3
 8001210:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001214:	4413      	add	r3, r2
 8001216:	b2dc      	uxtb	r4, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	b2da      	uxtb	r2, r3
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	4413      	add	r3, r2
 800122a:	b2da      	uxtb	r2, r3
 800122c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001230:	4413      	add	r3, r2
 8001232:	b2da      	uxtb	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	4622      	mov	r2, r4
 800123c:	f7ff fed2 	bl	8000fe4 <fill_rectangle>
        for(j=0; j<8; j++) {
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	3301      	adds	r3, #1
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	2b07      	cmp	r3, #7
 800124a:	dda2      	ble.n	8001192 <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b0c      	cmp	r3, #12
 8001256:	dd8b      	ble.n	8001170 <draw_char+0x20>
                }
            }
        }
    }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	08006d98 	.word	0x08006d98

08001268 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af02      	add	r7, sp, #8
 800126e:	603a      	str	r2, [r7, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	460b      	mov	r3, r1
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	717b      	strb	r3, [r7, #5]

    //Work out the size of each character
    int char_width = size * 9;
 800127e:	797a      	ldrb	r2, [r7, #5]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 800128c:	e015      	b.n	80012ba <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	fb01 f303 	mul.w	r3, r1, r3
 8001298:	4413      	add	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	b2d8      	uxtb	r0, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	6a3a      	ldr	r2, [r7, #32]
 80012a4:	4413      	add	r3, r2
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	79b9      	ldrb	r1, [r7, #6]
 80012aa:	797b      	ldrb	r3, [r7, #5]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f7ff ff4e 	bl	8001150 <draw_char>
        //Next character
        counter++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1e3      	bne.n	800128e <draw_string+0x26>
    }
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fd09 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f915 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f000 f9bf 	bl	8001660 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012e2:	f000 f957 	bl	8001594 <MX_I2C1_Init>
  MX_SPI2_Init();
 80012e6:	f000 f983 	bl	80015f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  lcd_init();
 80012ea:	f7ff fd41 	bl	8000d70 <lcd_init>
  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK );
 80012ee:	2300      	movs	r3, #0
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	23b0      	movs	r3, #176	@ 0xb0
 80012f4:	22dc      	movs	r2, #220	@ 0xdc
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fe73 	bl	8000fe4 <fill_rectangle>
  /* USER CODE END 2 */
  MPU6050_Init(&hi2c1);
 80012fe:	4877      	ldr	r0, [pc, #476]	@ (80014dc <main+0x20c>)
 8001300:	f000 f9fe 	bl	8001700 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001304:	4976      	ldr	r1, [pc, #472]	@ (80014e0 <main+0x210>)
 8001306:	4875      	ldr	r0, [pc, #468]	@ (80014dc <main+0x20c>)
 8001308:	f000 fa52 	bl	80017b0 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 800130c:	4974      	ldr	r1, [pc, #464]	@ (80014e0 <main+0x210>)
 800130e:	4873      	ldr	r0, [pc, #460]	@ (80014dc <main+0x20c>)
 8001310:	f000 faba 	bl	8001888 <MPU6050_Read_Gyro>


	   // Lưu thông số mới
	    float new_AX = MPU6050.Ax;
 8001314:	4b72      	ldr	r3, [pc, #456]	@ (80014e0 <main+0x210>)
 8001316:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc1f 	bl	8000b60 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	617b      	str	r3, [r7, #20]
	    float new_AY = MPU6050.Ay;
 8001326:	4b6e      	ldr	r3, [pc, #440]	@ (80014e0 <main+0x210>)
 8001328:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc16 	bl	8000b60 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	613b      	str	r3, [r7, #16]
	    float new_AZ = MPU6050.Az;
 8001338:	4b69      	ldr	r3, [pc, #420]	@ (80014e0 <main+0x210>)
 800133a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc0d 	bl	8000b60 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	60fb      	str	r3, [r7, #12]

	    float new_GX = MPU6050.Gx;
 800134a:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <main+0x210>)
 800134c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc04 	bl	8000b60 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	60bb      	str	r3, [r7, #8]
	    float new_GY = MPU6050.Gy;
 800135c:	4b60      	ldr	r3, [pc, #384]	@ (80014e0 <main+0x210>)
 800135e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fbfb 	bl	8000b60 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	607b      	str	r3, [r7, #4]
	    float new_GZ = MPU6050.Gz;
 800136e:	4b5c      	ldr	r3, [pc, #368]	@ (80014e0 <main+0x210>)
 8001370:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fbf2 	bl	8000b60 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	603b      	str	r3, [r7, #0]

	    // Xóa các ký tự cũ bằng cách vẽ lại màu nền
	    fill_rectangle(AX_X + 27.5, AX_Y , 100, 50, COLOR_BLACK); // Xóa AX
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2332      	movs	r3, #50	@ 0x32
 8001386:	2264      	movs	r2, #100	@ 0x64
 8001388:	2128      	movs	r1, #40	@ 0x28
 800138a:	2020      	movs	r0, #32
 800138c:	f7ff fe2a 	bl	8000fe4 <fill_rectangle>
	    fill_rectangle(AX_X + 27.5, AY_Y , 100, 70, COLOR_BLACK); // Xóa AY
 8001390:	2300      	movs	r3, #0
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2346      	movs	r3, #70	@ 0x46
 8001396:	2264      	movs	r2, #100	@ 0x64
 8001398:	213c      	movs	r1, #60	@ 0x3c
 800139a:	2020      	movs	r0, #32
 800139c:	f7ff fe22 	bl	8000fe4 <fill_rectangle>
	    fill_rectangle(AX_X + 27.5, AZ_Y , 100, 90, COLOR_BLACK); // Xóa AZ
 80013a0:	2300      	movs	r3, #0
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	235a      	movs	r3, #90	@ 0x5a
 80013a6:	2264      	movs	r2, #100	@ 0x64
 80013a8:	2150      	movs	r1, #80	@ 0x50
 80013aa:	2020      	movs	r0, #32
 80013ac:	f7ff fe1a 	bl	8000fe4 <fill_rectangle>
	    fill_rectangle(GX_X + 27.5, GX_Y , 200, 50, COLOR_BLACK); // Xóa GX
 80013b0:	2300      	movs	r3, #0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2332      	movs	r3, #50	@ 0x32
 80013b6:	22c8      	movs	r2, #200	@ 0xc8
 80013b8:	2128      	movs	r1, #40	@ 0x28
 80013ba:	2089      	movs	r0, #137	@ 0x89
 80013bc:	f7ff fe12 	bl	8000fe4 <fill_rectangle>
	    fill_rectangle(GX_X + 27.5, GY_Y , 200, 70, COLOR_BLACK); // Xóa GY
 80013c0:	2300      	movs	r3, #0
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2346      	movs	r3, #70	@ 0x46
 80013c6:	22c8      	movs	r2, #200	@ 0xc8
 80013c8:	213c      	movs	r1, #60	@ 0x3c
 80013ca:	2089      	movs	r0, #137	@ 0x89
 80013cc:	f7ff fe0a 	bl	8000fe4 <fill_rectangle>
	    fill_rectangle(GX_X + 27.5, GZ_Y , 200, 90, COLOR_BLACK); // Xóa GZ
 80013d0:	2300      	movs	r3, #0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	235a      	movs	r3, #90	@ 0x5a
 80013d6:	22c8      	movs	r2, #200	@ 0xc8
 80013d8:	2150      	movs	r1, #80	@ 0x50
 80013da:	2089      	movs	r0, #137	@ 0x89
 80013dc:	f7ff fe02 	bl	8000fe4 <fill_rectangle>

	    // Vẽ lại các thông số mới
	    draw_string(AX_X,10,COLOR_RED,1.8,"ACCEL");
 80013e0:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <main+0x214>)
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80013ea:	210a      	movs	r1, #10
 80013ec:	2005      	movs	r0, #5
 80013ee:	f7ff ff3b 	bl	8001268 <draw_string>
	    sprintf(buf, "AX=%.2f", new_AX);
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff f884 	bl	8000500 <__aeabi_f2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	493a      	ldr	r1, [pc, #232]	@ (80014e8 <main+0x218>)
 80013fe:	483b      	ldr	r0, [pc, #236]	@ (80014ec <main+0x21c>)
 8001400:	f003 fb68 	bl	8004ad4 <siprintf>
	    draw_string(AX_X, AX_Y, COLOR_YELLOW, 1.75, buf);
 8001404:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <main+0x21c>)
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800140e:	2128      	movs	r1, #40	@ 0x28
 8001410:	2005      	movs	r0, #5
 8001412:	f7ff ff29 	bl	8001268 <draw_string>

	    sprintf(buf, "AY=%.2f", new_AY);
 8001416:	6938      	ldr	r0, [r7, #16]
 8001418:	f7ff f872 	bl	8000500 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4933      	ldr	r1, [pc, #204]	@ (80014f0 <main+0x220>)
 8001422:	4832      	ldr	r0, [pc, #200]	@ (80014ec <main+0x21c>)
 8001424:	f003 fb56 	bl	8004ad4 <siprintf>
	    draw_string(AX_X, AY_Y, COLOR_BLUE, 1.75, buf);
 8001428:	4b30      	ldr	r3, [pc, #192]	@ (80014ec <main+0x21c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	221f      	movs	r2, #31
 8001430:	213c      	movs	r1, #60	@ 0x3c
 8001432:	2005      	movs	r0, #5
 8001434:	f7ff ff18 	bl	8001268 <draw_string>

	    sprintf(buf, "AZ=%.2f", new_AZ);
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7ff f861 	bl	8000500 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	492c      	ldr	r1, [pc, #176]	@ (80014f4 <main+0x224>)
 8001444:	4829      	ldr	r0, [pc, #164]	@ (80014ec <main+0x21c>)
 8001446:	f003 fb45 	bl	8004ad4 <siprintf>
	    draw_string(AX_X, AZ_Y, COLOR_ORANGE, 1.75, buf);
 800144a:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <main+0x21c>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8001454:	2150      	movs	r1, #80	@ 0x50
 8001456:	2005      	movs	r0, #5
 8001458:	f7ff ff06 	bl	8001268 <draw_string>

	    draw_string(GX_X,10,COLOR_RED,1.8,"GYRO");
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <main+0x228>)
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001466:	210a      	movs	r1, #10
 8001468:	206e      	movs	r0, #110	@ 0x6e
 800146a:	f7ff fefd 	bl	8001268 <draw_string>
	    sprintf(buf, "GX=%.2f", new_GX);
 800146e:	68b8      	ldr	r0, [r7, #8]
 8001470:	f7ff f846 	bl	8000500 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4920      	ldr	r1, [pc, #128]	@ (80014fc <main+0x22c>)
 800147a:	481c      	ldr	r0, [pc, #112]	@ (80014ec <main+0x21c>)
 800147c:	f003 fb2a 	bl	8004ad4 <siprintf>
	    draw_string(GX_X, GX_Y, COLOR_YELLOW, 1.75, buf);
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <main+0x21c>)
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800148a:	2128      	movs	r1, #40	@ 0x28
 800148c:	206e      	movs	r0, #110	@ 0x6e
 800148e:	f7ff feeb 	bl	8001268 <draw_string>

	    sprintf(buf, "GY=%.2f", new_GY);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff f834 	bl	8000500 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4918      	ldr	r1, [pc, #96]	@ (8001500 <main+0x230>)
 800149e:	4813      	ldr	r0, [pc, #76]	@ (80014ec <main+0x21c>)
 80014a0:	f003 fb18 	bl	8004ad4 <siprintf>
	    draw_string(GX_X, GY_Y, COLOR_BLUE, 1.75, buf);
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <main+0x21c>)
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	221f      	movs	r2, #31
 80014ac:	213c      	movs	r1, #60	@ 0x3c
 80014ae:	206e      	movs	r0, #110	@ 0x6e
 80014b0:	f7ff feda 	bl	8001268 <draw_string>

	    sprintf(buf, "GZ=%.2f", new_GZ);
 80014b4:	6838      	ldr	r0, [r7, #0]
 80014b6:	f7ff f823 	bl	8000500 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4911      	ldr	r1, [pc, #68]	@ (8001504 <main+0x234>)
 80014c0:	480a      	ldr	r0, [pc, #40]	@ (80014ec <main+0x21c>)
 80014c2:	f003 fb07 	bl	8004ad4 <siprintf>
	    draw_string(GX_X, GZ_Y, COLOR_ORANGE, 1.75, buf);
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <main+0x21c>)
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 80014d0:	2150      	movs	r1, #80	@ 0x50
 80014d2:	206e      	movs	r0, #110	@ 0x6e
 80014d4:	f7ff fec8 	bl	8001268 <draw_string>
  {
 80014d8:	bf00      	nop
 80014da:	e713      	b.n	8001304 <main+0x34>
 80014dc:	200001f4 	.word	0x200001f4
 80014e0:	200002a8 	.word	0x200002a8
 80014e4:	08006d58 	.word	0x08006d58
 80014e8:	08006d60 	.word	0x08006d60
 80014ec:	200002a0 	.word	0x200002a0
 80014f0:	08006d68 	.word	0x08006d68
 80014f4:	08006d70 	.word	0x08006d70
 80014f8:	08006d78 	.word	0x08006d78
 80014fc:	08006d80 	.word	0x08006d80
 8001500:	08006d88 	.word	0x08006d88
 8001504:	08006d90 	.word	0x08006d90

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b090      	sub	sp, #64	@ 0x40
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2228      	movs	r2, #40	@ 0x28
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fb3f 	bl	8004b9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001546:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4618      	mov	r0, r3
 8001552:	f001 ff23 	bl	800339c <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800155c:	f000 f8ca 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2102      	movs	r1, #2
 800157a:	4618      	mov	r0, r3
 800157c:	f002 f990 	bl	80038a0 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001586:	f000 f8b5 	bl	80016f4 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3740      	adds	r7, #64	@ 0x40
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_I2C1_Init+0x50>)
 800159a:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <MX_I2C1_Init+0x54>)
 800159c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015a0:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <MX_I2C1_Init+0x58>)
 80015a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015d2:	f000 fe7d 	bl	80022d0 <HAL_I2C_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015dc:	f000 f88a 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001f4 	.word	0x200001f4
 80015e8:	40005400 	.word	0x40005400
 80015ec:	000186a0 	.word	0x000186a0

080015f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_SPI2_Init+0x68>)
 80015f6:	4a19      	ldr	r2, [pc, #100]	@ (800165c <MX_SPI2_Init+0x6c>)
 80015f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <MX_SPI2_Init+0x68>)
 80015fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001600:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_SPI2_Init+0x68>)
 8001604:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001608:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_SPI2_Init+0x68>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_SPI2_Init+0x68>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <MX_SPI2_Init+0x68>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_SPI2_Init+0x68>)
 800161e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001622:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_SPI2_Init+0x68>)
 8001626:	2218      	movs	r2, #24
 8001628:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_SPI2_Init+0x68>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_SPI2_Init+0x68>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_SPI2_Init+0x68>)
 8001638:	2200      	movs	r2, #0
 800163a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_SPI2_Init+0x68>)
 800163e:	220a      	movs	r2, #10
 8001640:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_SPI2_Init+0x68>)
 8001644:	f002 faa6 	bl	8003b94 <HAL_SPI_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800164e:	f000 f851 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000248 	.word	0x20000248
 800165c:	40003800 	.word	0x40003800

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <MX_GPIO_Init+0x8c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a1c      	ldr	r2, [pc, #112]	@ (80016ec <MX_GPIO_Init+0x8c>)
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_GPIO_Init+0x8c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_GPIO_Init+0x8c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <MX_GPIO_Init+0x8c>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_GPIO_Init+0x8c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_GPIO_Init+0x8c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <MX_GPIO_Init+0x8c>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_GPIO_Init+0x8c>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	210e      	movs	r1, #14
 80016c0:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <MX_GPIO_Init+0x90>)
 80016c2:	f000 fded 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80016c6:	230e      	movs	r3, #14
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <MX_GPIO_Init+0x90>)
 80016de:	f000 fc4b 	bl	8001f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e2:	bf00      	nop
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010800 	.word	0x40010800

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <Error_Handler+0x8>

08001700 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af04      	add	r7, sp, #16
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001708:	2364      	movs	r3, #100	@ 0x64
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	f107 030f 	add.w	r3, r7, #15
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	2275      	movs	r2, #117	@ 0x75
 800171a:	21d0      	movs	r1, #208	@ 0xd0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f001 f815 	bl	800274c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b68      	cmp	r3, #104	@ 0x68
 8001726:	d13d      	bne.n	80017a4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800172c:	2364      	movs	r3, #100	@ 0x64
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	f107 030e 	add.w	r3, r7, #14
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	226b      	movs	r2, #107	@ 0x6b
 800173e:	21d0      	movs	r1, #208	@ 0xd0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 ff09 	bl	8002558 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001746:	2307      	movs	r3, #7
 8001748:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800174a:	2364      	movs	r3, #100	@ 0x64
 800174c:	9302      	str	r3, [sp, #8]
 800174e:	2301      	movs	r3, #1
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	f107 030e 	add.w	r3, r7, #14
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	2219      	movs	r2, #25
 800175c:	21d0      	movs	r1, #208	@ 0xd0
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fefa 	bl	8002558 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001764:	2300      	movs	r3, #0
 8001766:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001768:	2364      	movs	r3, #100	@ 0x64
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	2301      	movs	r3, #1
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	f107 030e 	add.w	r3, r7, #14
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2301      	movs	r3, #1
 8001778:	221c      	movs	r2, #28
 800177a:	21d0      	movs	r1, #208	@ 0xd0
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 feeb 	bl	8002558 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001786:	2364      	movs	r3, #100	@ 0x64
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2301      	movs	r3, #1
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	f107 030e 	add.w	r3, r7, #14
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2301      	movs	r3, #1
 8001796:	221b      	movs	r2, #27
 8001798:	21d0      	movs	r1, #208	@ 0xd0
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fedc 	bl	8002558 <HAL_I2C_Mem_Write>
        return 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e000      	b.n	80017a6 <MPU6050_Init+0xa6>
    }
    return 1;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af04      	add	r7, sp, #16
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80017ba:	2364      	movs	r3, #100	@ 0x64
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2306      	movs	r3, #6
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	223b      	movs	r2, #59	@ 0x3b
 80017cc:	21d0      	movs	r1, #208	@ 0xd0
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 ffbc 	bl	800274c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80017d4:	7a3b      	ldrb	r3, [r7, #8]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	7a7b      	ldrb	r3, [r7, #9]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80017e6:	7abb      	ldrb	r3, [r7, #10]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	7afb      	ldrb	r3, [r7, #11]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe63 	bl	80004dc <__aeabi_i2d>
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <MPU6050_Read_Accel+0xd0>)
 800181c:	f7fe fff2 	bl	8000804 <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe53 	bl	80004dc <__aeabi_i2d>
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <MPU6050_Read_Accel+0xd0>)
 800183c:	f7fe ffe2 	bl	8000804 <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	6839      	ldr	r1, [r7, #0]
 8001846:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe43 	bl	80004dc <__aeabi_i2d>
 8001856:	a308      	add	r3, pc, #32	@ (adr r3, 8001878 <MPU6050_Read_Accel+0xc8>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe ffd2 	bl	8000804 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	00000000 	.word	0x00000000
 800187c:	40cc2900 	.word	0x40cc2900
 8001880:	40d00000 	.word	0x40d00000
 8001884:	00000000 	.word	0x00000000

08001888 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af04      	add	r7, sp, #16
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001892:	2364      	movs	r3, #100	@ 0x64
 8001894:	9302      	str	r3, [sp, #8]
 8001896:	2306      	movs	r3, #6
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	2243      	movs	r2, #67	@ 0x43
 80018a4:	21d0      	movs	r1, #208	@ 0xd0
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 ff50 	bl	800274c <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80018ac:	7a3b      	ldrb	r3, [r7, #8]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	7a7b      	ldrb	r3, [r7, #9]
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80018be:	7abb      	ldrb	r3, [r7, #10]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	7afb      	ldrb	r3, [r7, #11]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80018d0:	7b3b      	ldrb	r3, [r7, #12]
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	7b7b      	ldrb	r3, [r7, #13]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fdf7 	bl	80004dc <__aeabi_i2d>
 80018ee:	a318      	add	r3, pc, #96	@ (adr r3, 8001950 <MPU6050_Read_Gyro+0xc8>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe ff86 	bl	8000804 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fde7 	bl	80004dc <__aeabi_i2d>
 800190e:	a310      	add	r3, pc, #64	@ (adr r3, 8001950 <MPU6050_Read_Gyro+0xc8>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe ff76 	bl	8000804 <__aeabi_ddiv>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fdd7 	bl	80004dc <__aeabi_i2d>
 800192e:	a308      	add	r3, pc, #32	@ (adr r3, 8001950 <MPU6050_Read_Gyro+0xc8>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe ff66 	bl	8000804 <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	6839      	ldr	r1, [r7, #0]
 800193e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w
 8001950:	00000000 	.word	0x00000000
 8001954:	40606000 	.word	0x40606000

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <HAL_MspInit+0x5c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_MspInit+0x60>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_MspInit+0x60>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000

080019bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <HAL_I2C_MspInit+0x70>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d123      	bne.n	8001a24 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <HAL_I2C_MspInit+0x74>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a13      	ldr	r2, [pc, #76]	@ (8001a30 <HAL_I2C_MspInit+0x74>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_I2C_MspInit+0x74>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f4:	23c0      	movs	r3, #192	@ 0xc0
 80019f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f8:	2312      	movs	r3, #18
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <HAL_I2C_MspInit+0x78>)
 8001a08:	f000 fab6 	bl	8001f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <HAL_I2C_MspInit+0x74>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a07      	ldr	r2, [pc, #28]	@ (8001a30 <HAL_I2C_MspInit+0x74>)
 8001a12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a16:	61d3      	str	r3, [r2, #28]
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_I2C_MspInit+0x74>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010c00 	.word	0x40010c00

08001a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <HAL_SPI_MspInit+0x74>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d124      	bne.n	8001aa2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_SPI_MspInit+0x78>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <HAL_SPI_MspInit+0x78>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a62:	61d3      	str	r3, [r2, #28]
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_SPI_MspInit+0x78>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_SPI_MspInit+0x78>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <HAL_SPI_MspInit+0x78>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_SPI_MspInit+0x78>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a88:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <HAL_SPI_MspInit+0x7c>)
 8001a9e:	f000 fa6b 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40003800 	.word	0x40003800
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <NMI_Handler+0x4>

08001ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <MemManage_Handler+0x4>

08001ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <UsageFault_Handler+0x4>

08001ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 f936 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <_kill>:

int _kill(int pid, int sig)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b28:	f003 f88a 	bl	8004c40 <__errno>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2216      	movs	r2, #22
 8001b30:	601a      	str	r2, [r3, #0]
  return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_exit>:

void _exit (int status)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b46:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffe7 	bl	8001b1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <_exit+0x12>

08001b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e00a      	b.n	8001b7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b66:	f3af 8000 	nop.w
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf0      	blt.n	8001b66 <_read+0x12>
  }

  return len;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e009      	b.n	8001bb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	60ba      	str	r2, [r7, #8]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf1      	blt.n	8001ba0 <_write+0x12>
  }
  return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_close>:

int _close(int file)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bec:	605a      	str	r2, [r3, #4]
  return 0;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <_isatty>:

int _isatty(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f002 fff2 	bl	8004c40 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000c000 	.word	0x2000c000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	20000300 	.word	0x20000300
 8001c90:	20000458 	.word	0x20000458

08001c94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff fff8 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480b      	ldr	r0, [pc, #44]	@ (8001cd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ca6:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cbc:	4c09      	ldr	r4, [pc, #36]	@ (8001ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f002 ffbf 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cce:	f7ff faff 	bl	80012d0 <main>
  bx lr
 8001cd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cdc:	08007618 	.word	0x08007618
  ldr r2, =_sbss
 8001ce0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ce4:	20000454 	.word	0x20000454

08001ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC1_2_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_Init+0x28>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	@ (8001d14 <HAL_Init+0x28>)
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 f907 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f000 f808 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d08:	f7ff fe26 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40022000 	.word	0x40022000

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_InitTick+0x54>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_InitTick+0x58>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f911 	bl	8001f5e <HAL_SYSTICK_Config>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d80a      	bhi.n	8001d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 f8e7 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <HAL_InitTick+0x5c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_IncTick+0x20>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a03      	ldr	r2, [pc, #12]	@ (8001d98 <HAL_IncTick+0x20>)
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20000304 	.word	0x20000304

08001d9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b02      	ldr	r3, [pc, #8]	@ (8001dac <HAL_GetTick+0x10>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000304 	.word	0x20000304

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	@ (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	@ (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
         );
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	@ 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff90 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff49 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff5e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff90 	bl	8001e68 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5f 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffb0 	bl	8001ecc <SysTick_Config>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	@ 0x2c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8a:	e179      	b.n	8002280 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 8168 	bne.w	800227a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a96      	ldr	r2, [pc, #600]	@ (8002208 <HAL_GPIO_Init+0x290>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d05e      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fb4:	4a94      	ldr	r2, [pc, #592]	@ (8002208 <HAL_GPIO_Init+0x290>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d875      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fba:	4a94      	ldr	r2, [pc, #592]	@ (800220c <HAL_GPIO_Init+0x294>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d058      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fc0:	4a92      	ldr	r2, [pc, #584]	@ (800220c <HAL_GPIO_Init+0x294>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d86f      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fc6:	4a92      	ldr	r2, [pc, #584]	@ (8002210 <HAL_GPIO_Init+0x298>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d052      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fcc:	4a90      	ldr	r2, [pc, #576]	@ (8002210 <HAL_GPIO_Init+0x298>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d869      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fd2:	4a90      	ldr	r2, [pc, #576]	@ (8002214 <HAL_GPIO_Init+0x29c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04c      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fd8:	4a8e      	ldr	r2, [pc, #568]	@ (8002214 <HAL_GPIO_Init+0x29c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d863      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fde:	4a8e      	ldr	r2, [pc, #568]	@ (8002218 <HAL_GPIO_Init+0x2a0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d046      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fe4:	4a8c      	ldr	r2, [pc, #560]	@ (8002218 <HAL_GPIO_Init+0x2a0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d85d      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d82a      	bhi.n	8002044 <HAL_GPIO_Init+0xcc>
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d859      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff8 <HAL_GPIO_Init+0x80>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	0800204d 	.word	0x0800204d
 8002000:	0800205f 	.word	0x0800205f
 8002004:	080020a1 	.word	0x080020a1
 8002008:	080020a7 	.word	0x080020a7
 800200c:	080020a7 	.word	0x080020a7
 8002010:	080020a7 	.word	0x080020a7
 8002014:	080020a7 	.word	0x080020a7
 8002018:	080020a7 	.word	0x080020a7
 800201c:	080020a7 	.word	0x080020a7
 8002020:	080020a7 	.word	0x080020a7
 8002024:	080020a7 	.word	0x080020a7
 8002028:	080020a7 	.word	0x080020a7
 800202c:	080020a7 	.word	0x080020a7
 8002030:	080020a7 	.word	0x080020a7
 8002034:	080020a7 	.word	0x080020a7
 8002038:	080020a7 	.word	0x080020a7
 800203c:	08002055 	.word	0x08002055
 8002040:	08002069 	.word	0x08002069
 8002044:	4a75      	ldr	r2, [pc, #468]	@ (800221c <HAL_GPIO_Init+0x2a4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800204a:	e02c      	b.n	80020a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e029      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	3304      	adds	r3, #4
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e024      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	3308      	adds	r3, #8
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e01f      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	330c      	adds	r3, #12
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e01a      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800207a:	2304      	movs	r3, #4
 800207c:	623b      	str	r3, [r7, #32]
          break;
 800207e:	e013      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002088:	2308      	movs	r3, #8
 800208a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	611a      	str	r2, [r3, #16]
          break;
 8002092:	e009      	b.n	80020a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002094:	2308      	movs	r3, #8
 8002096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	615a      	str	r2, [r3, #20]
          break;
 800209e:	e003      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          break;
 80020a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2bff      	cmp	r3, #255	@ 0xff
 80020ac:	d801      	bhi.n	80020b2 <HAL_GPIO_Init+0x13a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	e001      	b.n	80020b6 <HAL_GPIO_Init+0x13e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2bff      	cmp	r3, #255	@ 0xff
 80020bc:	d802      	bhi.n	80020c4 <HAL_GPIO_Init+0x14c>
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0x152>
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	3b08      	subs	r3, #8
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	210f      	movs	r1, #15
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	6a39      	ldr	r1, [r7, #32]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	431a      	orrs	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80c1 	beq.w	800227a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f8:	4b49      	ldr	r3, [pc, #292]	@ (8002220 <HAL_GPIO_Init+0x2a8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a48      	ldr	r2, [pc, #288]	@ (8002220 <HAL_GPIO_Init+0x2a8>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <HAL_GPIO_Init+0x2a8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002110:	4a44      	ldr	r2, [pc, #272]	@ (8002224 <HAL_GPIO_Init+0x2ac>)
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3c      	ldr	r2, [pc, #240]	@ (8002228 <HAL_GPIO_Init+0x2b0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01f      	beq.n	800217c <HAL_GPIO_Init+0x204>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3b      	ldr	r2, [pc, #236]	@ (800222c <HAL_GPIO_Init+0x2b4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d019      	beq.n	8002178 <HAL_GPIO_Init+0x200>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3a      	ldr	r2, [pc, #232]	@ (8002230 <HAL_GPIO_Init+0x2b8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_GPIO_Init+0x1fc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a39      	ldr	r2, [pc, #228]	@ (8002234 <HAL_GPIO_Init+0x2bc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00d      	beq.n	8002170 <HAL_GPIO_Init+0x1f8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a38      	ldr	r2, [pc, #224]	@ (8002238 <HAL_GPIO_Init+0x2c0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x1f4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a37      	ldr	r2, [pc, #220]	@ (800223c <HAL_GPIO_Init+0x2c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_GPIO_Init+0x1f0>
 8002164:	2305      	movs	r3, #5
 8002166:	e00a      	b.n	800217e <HAL_GPIO_Init+0x206>
 8002168:	2306      	movs	r3, #6
 800216a:	e008      	b.n	800217e <HAL_GPIO_Init+0x206>
 800216c:	2304      	movs	r3, #4
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x206>
 8002170:	2303      	movs	r3, #3
 8002172:	e004      	b.n	800217e <HAL_GPIO_Init+0x206>
 8002174:	2302      	movs	r3, #2
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x206>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_GPIO_Init+0x206>
 800217c:	2300      	movs	r3, #0
 800217e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4093      	lsls	r3, r2
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800218e:	4925      	ldr	r1, [pc, #148]	@ (8002224 <HAL_GPIO_Init+0x2ac>)
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4924      	ldr	r1, [pc, #144]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b6:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	4920      	ldr	r1, [pc, #128]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	491a      	ldr	r1, [pc, #104]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4916      	ldr	r1, [pc, #88]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d025      	beq.n	8002244 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4910      	ldr	r1, [pc, #64]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e025      	b.n	8002252 <HAL_GPIO_Init+0x2da>
 8002206:	bf00      	nop
 8002208:	10320000 	.word	0x10320000
 800220c:	10310000 	.word	0x10310000
 8002210:	10220000 	.word	0x10220000
 8002214:	10210000 	.word	0x10210000
 8002218:	10120000 	.word	0x10120000
 800221c:	10110000 	.word	0x10110000
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000
 8002228:	40010800 	.word	0x40010800
 800222c:	40010c00 	.word	0x40010c00
 8002230:	40011000 	.word	0x40011000
 8002234:	40011400 	.word	0x40011400
 8002238:	40011800 	.word	0x40011800
 800223c:	40011c00 	.word	0x40011c00
 8002240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	43db      	mvns	r3, r3
 800224c:	4913      	ldr	r1, [pc, #76]	@ (800229c <HAL_GPIO_Init+0x324>)
 800224e:	4013      	ands	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800225e:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	490e      	ldr	r1, [pc, #56]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
 800226a:	e006      	b.n	800227a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_GPIO_Init+0x324>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	43db      	mvns	r3, r3
 8002274:	4909      	ldr	r1, [pc, #36]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002276:	4013      	ands	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f ae7e 	bne.w	8001f8c <HAL_GPIO_Init+0x14>
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	372c      	adds	r7, #44	@ 0x2c
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e12b      	b.n	800253a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fb60 	bl	80019bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2224      	movs	r2, #36	@ 0x24
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002334:	f001 fbfc 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8002338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4a81      	ldr	r2, [pc, #516]	@ (8002544 <HAL_I2C_Init+0x274>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d807      	bhi.n	8002354 <HAL_I2C_Init+0x84>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a80      	ldr	r2, [pc, #512]	@ (8002548 <HAL_I2C_Init+0x278>)
 8002348:	4293      	cmp	r3, r2
 800234a:	bf94      	ite	ls
 800234c:	2301      	movls	r3, #1
 800234e:	2300      	movhi	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	e006      	b.n	8002362 <HAL_I2C_Init+0x92>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a7d      	ldr	r2, [pc, #500]	@ (800254c <HAL_I2C_Init+0x27c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	bf94      	ite	ls
 800235c:	2301      	movls	r3, #1
 800235e:	2300      	movhi	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0e7      	b.n	800253a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a78      	ldr	r2, [pc, #480]	@ (8002550 <HAL_I2C_Init+0x280>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0c9b      	lsrs	r3, r3, #18
 8002374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a6a      	ldr	r2, [pc, #424]	@ (8002544 <HAL_I2C_Init+0x274>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d802      	bhi.n	80023a4 <HAL_I2C_Init+0xd4>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3301      	adds	r3, #1
 80023a2:	e009      	b.n	80023b8 <HAL_I2C_Init+0xe8>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	4a69      	ldr	r2, [pc, #420]	@ (8002554 <HAL_I2C_Init+0x284>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	099b      	lsrs	r3, r3, #6
 80023b6:	3301      	adds	r3, #1
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	430b      	orrs	r3, r1
 80023be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	495c      	ldr	r1, [pc, #368]	@ (8002544 <HAL_I2C_Init+0x274>)
 80023d4:	428b      	cmp	r3, r1
 80023d6:	d819      	bhi.n	800240c <HAL_I2C_Init+0x13c>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e59      	subs	r1, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e6:	1c59      	adds	r1, r3, #1
 80023e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023ec:	400b      	ands	r3, r1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_I2C_Init+0x138>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1e59      	subs	r1, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002400:	3301      	adds	r3, #1
 8002402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002406:	e051      	b.n	80024ac <HAL_I2C_Init+0x1dc>
 8002408:	2304      	movs	r3, #4
 800240a:	e04f      	b.n	80024ac <HAL_I2C_Init+0x1dc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d111      	bne.n	8002438 <HAL_I2C_Init+0x168>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e58      	subs	r0, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	440b      	add	r3, r1
 8002422:	fbb0 f3f3 	udiv	r3, r0, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e012      	b.n	800245e <HAL_I2C_Init+0x18e>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Init+0x196>
 8002462:	2301      	movs	r3, #1
 8002464:	e022      	b.n	80024ac <HAL_I2C_Init+0x1dc>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10e      	bne.n	800248c <HAL_I2C_Init+0x1bc>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1e58      	subs	r0, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	440b      	add	r3, r1
 800247c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800248a:	e00f      	b.n	80024ac <HAL_I2C_Init+0x1dc>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	0099      	lsls	r1, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	6809      	ldr	r1, [r1, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6911      	ldr	r1, [r2, #16]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68d2      	ldr	r2, [r2, #12]
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	000186a0 	.word	0x000186a0
 8002548:	001e847f 	.word	0x001e847f
 800254c:	003d08ff 	.word	0x003d08ff
 8002550:	431bde83 	.word	0x431bde83
 8002554:	10624dd3 	.word	0x10624dd3

08002558 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	4608      	mov	r0, r1
 8002562:	4611      	mov	r1, r2
 8002564:	461a      	mov	r2, r3
 8002566:	4603      	mov	r3, r0
 8002568:	817b      	strh	r3, [r7, #10]
 800256a:	460b      	mov	r3, r1
 800256c:	813b      	strh	r3, [r7, #8]
 800256e:	4613      	mov	r3, r2
 8002570:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002572:	f7ff fc13 	bl	8001d9c <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b20      	cmp	r3, #32
 8002582:	f040 80d9 	bne.w	8002738 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2319      	movs	r3, #25
 800258c:	2201      	movs	r2, #1
 800258e:	496d      	ldr	r1, [pc, #436]	@ (8002744 <HAL_I2C_Mem_Write+0x1ec>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fccd 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
 800259e:	e0cc      	b.n	800273a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Mem_Write+0x56>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0c5      	b.n	800273a <HAL_I2C_Mem_Write+0x1e2>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d007      	beq.n	80025d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2221      	movs	r2, #33	@ 0x21
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a3a      	ldr	r2, [r7, #32]
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a4d      	ldr	r2, [pc, #308]	@ (8002748 <HAL_I2C_Mem_Write+0x1f0>)
 8002614:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002616:	88f8      	ldrh	r0, [r7, #6]
 8002618:	893a      	ldrh	r2, [r7, #8]
 800261a:	8979      	ldrh	r1, [r7, #10]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	4603      	mov	r3, r0
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fb04 	bl	8002c34 <I2C_RequestMemoryWrite>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d052      	beq.n	80026d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e081      	b.n	800273a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fd92 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	2b04      	cmp	r3, #4
 800264c:	d107      	bne.n	800265e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06b      	b.n	800273a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d11b      	bne.n	80026d8 <HAL_I2C_Mem_Write+0x180>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d017      	beq.n	80026d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1aa      	bne.n	8002636 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fd85 	bl	80031f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d107      	bne.n	8002708 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002706:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e016      	b.n	800273a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e000      	b.n	800273a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002738:	2302      	movs	r3, #2
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	00100002 	.word	0x00100002
 8002748:	ffff0000 	.word	0xffff0000

0800274c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	@ 0x30
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800276a:	f7ff fb17 	bl	8001d9c <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	f040 8250 	bne.w	8002c1e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2319      	movs	r3, #25
 8002784:	2201      	movs	r2, #1
 8002786:	4982      	ldr	r1, [pc, #520]	@ (8002990 <HAL_I2C_Mem_Read+0x244>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fbd1 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002794:	2302      	movs	r3, #2
 8002796:	e243      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_I2C_Mem_Read+0x5a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e23c      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d007      	beq.n	80027cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2222      	movs	r2, #34	@ 0x22
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2240      	movs	r2, #64	@ 0x40
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80027fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a62      	ldr	r2, [pc, #392]	@ (8002994 <HAL_I2C_Mem_Read+0x248>)
 800280c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800280e:	88f8      	ldrh	r0, [r7, #6]
 8002810:	893a      	ldrh	r2, [r7, #8]
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4603      	mov	r3, r0
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fa9e 	bl	8002d60 <I2C_RequestMemoryRead>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1f8      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e1cc      	b.n	8002bf8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	2b01      	cmp	r3, #1
 8002864:	d11e      	bne.n	80028a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002874:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002876:	b672      	cpsid	i
}
 8002878:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028a0:	b662      	cpsie	i
}
 80028a2:	e035      	b.n	8002910 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d11e      	bne.n	80028ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028bc:	b672      	cpsid	i
}
 80028be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028e6:	b662      	cpsie	i
}
 80028e8:	e012      	b.n	8002910 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002910:	e172      	b.n	8002bf8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002916:	2b03      	cmp	r3, #3
 8002918:	f200 811f 	bhi.w	8002b5a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002920:	2b01      	cmp	r3, #1
 8002922:	d123      	bne.n	800296c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002926:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fcab 	bl	8003284 <I2C_WaitOnRXNEFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e173      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800296a:	e145      	b.n	8002bf8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002970:	2b02      	cmp	r3, #2
 8002972:	d152      	bne.n	8002a1a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800297a:	2200      	movs	r2, #0
 800297c:	4906      	ldr	r1, [pc, #24]	@ (8002998 <HAL_I2C_Mem_Read+0x24c>)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fad6 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e148      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
 800298e:	bf00      	nop
 8002990:	00100002 	.word	0x00100002
 8002994:	ffff0000 	.word	0xffff0000
 8002998:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029e2:	b662      	cpsie	i
}
 80029e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a18:	e0ee      	b.n	8002bf8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a20:	2200      	movs	r2, #0
 8002a22:	4981      	ldr	r1, [pc, #516]	@ (8002c28 <HAL_I2C_Mem_Read+0x4dc>)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fa83 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0f5      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c2c <HAL_I2C_Mem_Read+0x4e0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	4a6b      	ldr	r2, [pc, #428]	@ (8002c30 <HAL_I2C_Mem_Read+0x4e4>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0a1a      	lsrs	r2, r3, #8
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00da      	lsls	r2, r3, #3
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d118      	bne.n	8002ad2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac2:	b662      	cpsie	i
}
 8002ac4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0a6      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d1d9      	bne.n	8002a94 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b22:	b662      	cpsie	i
}
 8002b24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b58:	e04e      	b.n	8002bf8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fb90 	bl	8003284 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e058      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d124      	bne.n	8002bf8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f ae88 	bne.w	8002912 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3728      	adds	r7, #40	@ 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	00010004 	.word	0x00010004
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	14f8b589 	.word	0x14f8b589

08002c34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f960 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c84:	d103      	bne.n	8002c8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e05f      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	492d      	ldr	r1, [pc, #180]	@ (8002d5c <I2C_RequestMemoryWrite+0x128>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f9bb 	bl	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e04c      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fa46 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e02b      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]
 8002d0a:	e021      	b.n	8002d50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fa20 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e005      	b.n	8002d52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	00010002 	.word	0x00010002

08002d60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	4608      	mov	r0, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	817b      	strh	r3, [r7, #10]
 8002d72:	460b      	mov	r3, r1
 8002d74:	813b      	strh	r3, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8c2 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc0:	d103      	bne.n	8002dca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0aa      	b.n	8002f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	4952      	ldr	r1, [pc, #328]	@ (8002f2c <I2C_RequestMemoryRead+0x1cc>)
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f91d 	bl	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e097      	b.n	8002f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f9a8 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e076      	b.n	8002f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	611a      	str	r2, [r3, #16]
 8002e46:	e021      	b.n	8002e8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e58:	6a39      	ldr	r1, [r7, #32]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f982 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d107      	bne.n	8002e7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e050      	b.n	8002f24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e82:	893b      	ldrh	r3, [r7, #8]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8e:	6a39      	ldr	r1, [r7, #32]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f967 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d107      	bne.n	8002eb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e035      	b.n	8002f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f82b 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eee:	d103      	bne.n	8002ef8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e013      	b.n	8002f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002efc:	897b      	ldrh	r3, [r7, #10]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	6a3a      	ldr	r2, [r7, #32]
 8002f10:	4906      	ldr	r1, [pc, #24]	@ (8002f2c <I2C_RequestMemoryRead+0x1cc>)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f886 	bl	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	00010002 	.word	0x00010002

08002f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f40:	e048      	b.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d044      	beq.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe ff27 	bl	8001d9c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d139      	bne.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10d      	bne.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	e00c      	b.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d116      	bne.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e023      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	0c1b      	lsrs	r3, r3, #16
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10d      	bne.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	e00c      	b.n	8003014 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	429a      	cmp	r2, r3
 8003018:	d093      	beq.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003032:	e071      	b.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003042:	d123      	bne.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003052:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800305c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e067      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d041      	beq.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003094:	f7fe fe82 	bl	8001d9c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d136      	bne.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e00b      	b.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e021      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	0c1b      	lsrs	r3, r3, #16
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10c      	bne.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	43da      	mvns	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e00b      	b.n	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4013      	ands	r3, r2
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f af6d 	bne.w	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003170:	e034      	b.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8e3 	bl	800333e <I2C_IsAcknowledgeFailed>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e034      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d028      	beq.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe fe07 	bl	8001d9c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d11d      	bne.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b80      	cmp	r3, #128	@ 0x80
 80031ac:	d016      	beq.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e007      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e6:	2b80      	cmp	r3, #128	@ 0x80
 80031e8:	d1c3      	bne.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003200:	e034      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f89b 	bl	800333e <I2C_IsAcknowledgeFailed>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e034      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d028      	beq.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fe fdbf 	bl	8001d9c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11d      	bne.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d016      	beq.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e007      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d1c3      	bne.n	8003202 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003290:	e049      	b.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b10      	cmp	r3, #16
 800329e:	d119      	bne.n	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0210 	mvn.w	r2, #16
 80032a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e030      	b.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d4:	f7fe fd62 	bl	8001d9c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d302      	bcc.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11d      	bne.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	d016      	beq.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e007      	b.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003330:	2b40      	cmp	r3, #64	@ 0x40
 8003332:	d1ae      	bne.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003354:	d11b      	bne.n	800338e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800335e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f043 0204 	orr.w	r2, r3, #4
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
	...

0800339c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e272      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8087 	beq.w	80034ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033bc:	4b92      	ldr	r3, [pc, #584]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d00c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d112      	bne.n	80033fa <HAL_RCC_OscConfig+0x5e>
 80033d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d10b      	bne.n	80033fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e2:	4b89      	ldr	r3, [pc, #548]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d06c      	beq.n	80034c8 <HAL_RCC_OscConfig+0x12c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d168      	bne.n	80034c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e24c      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x76>
 8003404:	4b80      	ldr	r3, [pc, #512]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7f      	ldr	r2, [pc, #508]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800340a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e02e      	b.n	8003470 <HAL_RCC_OscConfig+0xd4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x98>
 800341a:	4b7b      	ldr	r3, [pc, #492]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7a      	ldr	r2, [pc, #488]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b78      	ldr	r3, [pc, #480]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a77      	ldr	r2, [pc, #476]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800342c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e01d      	b.n	8003470 <HAL_RCC_OscConfig+0xd4>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0xbc>
 800343e:	4b72      	ldr	r3, [pc, #456]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a71      	ldr	r2, [pc, #452]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b6f      	ldr	r3, [pc, #444]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6e      	ldr	r2, [pc, #440]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e00b      	b.n	8003470 <HAL_RCC_OscConfig+0xd4>
 8003458:	4b6b      	ldr	r3, [pc, #428]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a6a      	ldr	r2, [pc, #424]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800345e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b68      	ldr	r3, [pc, #416]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a67      	ldr	r2, [pc, #412]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800346a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800346e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fc90 	bl	8001d9c <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003480:	f7fe fc8c 	bl	8001d9c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	@ 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e200      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b5d      	ldr	r3, [pc, #372]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0xe4>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fe fc7c 	bl	8001d9c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a8:	f7fe fc78 	bl	8001d9c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	@ 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e1ec      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	4b53      	ldr	r3, [pc, #332]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x10c>
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d063      	beq.n	800359e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034e2:	4b49      	ldr	r3, [pc, #292]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d11c      	bne.n	8003528 <HAL_RCC_OscConfig+0x18c>
 80034ee:	4b46      	ldr	r3, [pc, #280]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	4b43      	ldr	r3, [pc, #268]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_RCC_OscConfig+0x176>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d001      	beq.n	8003512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e1c0      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b3d      	ldr	r3, [pc, #244]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4939      	ldr	r1, [pc, #228]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	e03a      	b.n	800359e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003530:	4b36      	ldr	r3, [pc, #216]	@ (800360c <HAL_RCC_OscConfig+0x270>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fe fc31 	bl	8001d9c <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353e:	f7fe fc2d 	bl	8001d9c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e1a1      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	4b2d      	ldr	r3, [pc, #180]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4927      	ldr	r1, [pc, #156]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]
 8003570:	e015      	b.n	800359e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003572:	4b26      	ldr	r3, [pc, #152]	@ (800360c <HAL_RCC_OscConfig+0x270>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fc10 	bl	8001d9c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7fe fc0c 	bl	8001d9c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e180      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	4b1d      	ldr	r3, [pc, #116]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d03a      	beq.n	8003620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b2:	4b17      	ldr	r3, [pc, #92]	@ (8003610 <HAL_RCC_OscConfig+0x274>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b8:	f7fe fbf0 	bl	8001d9c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c0:	f7fe fbec 	bl	8001d9c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e160      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035de:	2001      	movs	r0, #1
 80035e0:	f000 faba 	bl	8003b58 <RCC_Delay>
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <HAL_RCC_OscConfig+0x274>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe fbd6 	bl	8001d9c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f2:	e00f      	b.n	8003614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe fbd2 	bl	8001d9c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d908      	bls.n	8003614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e146      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	42420000 	.word	0x42420000
 8003610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	4b92      	ldr	r3, [pc, #584]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e9      	bne.n	80035f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80a6 	beq.w	800377a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362e:	2300      	movs	r3, #0
 8003630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003632:	4b8b      	ldr	r3, [pc, #556]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4b88      	ldr	r3, [pc, #544]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a87      	ldr	r2, [pc, #540]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003648:	61d3      	str	r3, [r2, #28]
 800364a:	4b85      	ldr	r3, [pc, #532]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b82      	ldr	r3, [pc, #520]	@ (8003864 <HAL_RCC_OscConfig+0x4c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d118      	bne.n	8003698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b7f      	ldr	r3, [pc, #508]	@ (8003864 <HAL_RCC_OscConfig+0x4c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7e      	ldr	r2, [pc, #504]	@ (8003864 <HAL_RCC_OscConfig+0x4c8>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fe fb93 	bl	8001d9c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7fe fb8f 	bl	8001d9c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b64      	cmp	r3, #100	@ 0x64
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e103      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b75      	ldr	r3, [pc, #468]	@ (8003864 <HAL_RCC_OscConfig+0x4c8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x312>
 80036a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	e02d      	b.n	800370a <HAL_RCC_OscConfig+0x36e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x334>
 80036b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a69      	ldr	r2, [pc, #420]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6213      	str	r3, [r2, #32]
 80036c2:	4b67      	ldr	r3, [pc, #412]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a66      	ldr	r2, [pc, #408]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	e01c      	b.n	800370a <HAL_RCC_OscConfig+0x36e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCC_OscConfig+0x356>
 80036d8:	4b61      	ldr	r3, [pc, #388]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4a60      	ldr	r2, [pc, #384]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6213      	str	r3, [r2, #32]
 80036e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	e00b      	b.n	800370a <HAL_RCC_OscConfig+0x36e>
 80036f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6213      	str	r3, [r2, #32]
 80036fe:	4b58      	ldr	r3, [pc, #352]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4a57      	ldr	r2, [pc, #348]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d015      	beq.n	800373e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe fb43 	bl	8001d9c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe fb3f 	bl	8001d9c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0b1      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	4b4b      	ldr	r3, [pc, #300]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ee      	beq.n	800371a <HAL_RCC_OscConfig+0x37e>
 800373c:	e014      	b.n	8003768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fe fb2d 	bl	8001d9c <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fe fb29 	bl	8001d9c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e09b      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ee      	bne.n	8003746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d105      	bne.n	800377a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b3c      	ldr	r3, [pc, #240]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4a3b      	ldr	r2, [pc, #236]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8087 	beq.w	8003892 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003784:	4b36      	ldr	r3, [pc, #216]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d061      	beq.n	8003854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d146      	bne.n	8003826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	4b33      	ldr	r3, [pc, #204]	@ (8003868 <HAL_RCC_OscConfig+0x4cc>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fe fafd 	bl	8001d9c <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fe faf9 	bl	8001d9c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e06d      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b8:	4b29      	ldr	r3, [pc, #164]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f0      	bne.n	80037a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d108      	bne.n	80037e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ce:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4921      	ldr	r1, [pc, #132]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a19      	ldr	r1, [r3, #32]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	430b      	orrs	r3, r1
 80037f2:	491b      	ldr	r1, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <HAL_RCC_OscConfig+0x4cc>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fe:	f7fe facd 	bl	8001d9c <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003806:	f7fe fac9 	bl	8001d9c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e03d      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x46a>
 8003824:	e035      	b.n	8003892 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe fab6 	bl	8001d9c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe fab2 	bl	8001d9c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e026      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003846:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x498>
 8003852:	e01e      	b.n	8003892 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e019      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
 8003868:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_RCC_OscConfig+0x500>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0d0      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d910      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b67      	ldr	r3, [pc, #412]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	4965      	ldr	r1, [pc, #404]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b63      	ldr	r3, [pc, #396]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b8      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038fc:	4b59      	ldr	r3, [pc, #356]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a58      	ldr	r2, [pc, #352]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003914:	4b53      	ldr	r3, [pc, #332]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a52      	ldr	r2, [pc, #328]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800391e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b50      	ldr	r3, [pc, #320]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494d      	ldr	r1, [pc, #308]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d040      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b47      	ldr	r3, [pc, #284]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d115      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	4b41      	ldr	r3, [pc, #260]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e073      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e06b      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397e:	4b39      	ldr	r3, [pc, #228]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f023 0203 	bic.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4936      	ldr	r1, [pc, #216]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003990:	f7fe fa04 	bl	8001d9c <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	e00a      	b.n	80039ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003998:	f7fe fa00 	bl	8001d9c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e053      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 020c 	and.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1eb      	bne.n	8003998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c0:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d210      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 0207 	bic.w	r2, r3, #7
 80039d6:	4922      	ldr	r1, [pc, #136]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e032      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b19      	ldr	r3, [pc, #100]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4916      	ldr	r1, [pc, #88]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a1a:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	490e      	ldr	r1, [pc, #56]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a2e:	f000 f821 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	490a      	ldr	r1, [pc, #40]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <HAL_RCC_ClockConfig+0x1cc>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a4a:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <HAL_RCC_ClockConfig+0x1d0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe f962 	bl	8001d18 <HAL_InitTick>

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40021000 	.word	0x40021000
 8003a68:	0800726c 	.word	0x0800726c
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x36>
 8003aa2:	e027      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa6:	613b      	str	r3, [r7, #16]
      break;
 8003aa8:	e027      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0c9b      	lsrs	r3, r3, #18
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ab4:	5cd3      	ldrb	r3, [r2, r3]
 8003ab6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ac2:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	0c5b      	lsrs	r3, r3, #17
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	4a11      	ldr	r2, [pc, #68]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ace:	5cd3      	ldrb	r3, [r2, r3]
 8003ad0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad6:	fb03 f202 	mul.w	r2, r3, r2
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e004      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	613b      	str	r3, [r7, #16]
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003af6:	613b      	str	r3, [r7, #16]
      break;
 8003af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afa:	693b      	ldr	r3, [r7, #16]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	007a1200 	.word	0x007a1200
 8003b10:	08007284 	.word	0x08007284
 8003b14:	08007294 	.word	0x08007294
 8003b18:	003d0900 	.word	0x003d0900

08003b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b20:	4b02      	ldr	r3, [pc, #8]	@ (8003b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000000 	.word	0x20000000

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b34:	f7ff fff2 	bl	8003b1c <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	@ (8003b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	@ (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	0800727c 	.word	0x0800727c

08003b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b60:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <RCC_Delay+0x34>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <RCC_Delay+0x38>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0a5b      	lsrs	r3, r3, #9
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b74:	bf00      	nop
  }
  while (Delay --);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	60fa      	str	r2, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f9      	bne.n	8003b74 <RCC_Delay+0x1c>
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	10624dd3 	.word	0x10624dd3

08003b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e076      	b.n	8003c94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb6:	d009      	beq.n	8003bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
 8003bbe:	e005      	b.n	8003bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd ff26 	bl	8001a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	0c1a      	lsrs	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f002 0204 	and.w	r2, r2, #4
 8003c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cac:	f7fe f876 	bl	8001d9c <HAL_GetTick>
 8003cb0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e12a      	b.n	8003f1c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit+0x36>
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e122      	b.n	8003f1c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_SPI_Transmit+0x48>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e11b      	b.n	8003f1c <HAL_SPI_Transmit+0x280>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d32:	d10f      	bne.n	8003d54 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	d007      	beq.n	8003d72 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d7a:	d152      	bne.n	8003e22 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Transmit+0xee>
 8003d84:	8b7b      	ldrh	r3, [r7, #26]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d145      	bne.n	8003e16 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dae:	e032      	b.n	8003e16 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d112      	bne.n	8003de4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003de2:	e018      	b.n	8003e16 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de4:	f7fd ffda 	bl	8001d9c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d803      	bhi.n	8003dfc <HAL_SPI_Transmit+0x160>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d102      	bne.n	8003e02 <HAL_SPI_Transmit+0x166>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e082      	b.n	8003f1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1c7      	bne.n	8003db0 <HAL_SPI_Transmit+0x114>
 8003e20:	e053      	b.n	8003eca <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SPI_Transmit+0x194>
 8003e2a:	8b7b      	ldrh	r3, [r7, #26]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d147      	bne.n	8003ec0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	7812      	ldrb	r2, [r2, #0]
 8003e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e56:	e033      	b.n	8003ec0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d113      	bne.n	8003e8e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e8c:	e018      	b.n	8003ec0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8e:	f7fd ff85 	bl	8001d9c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d803      	bhi.n	8003ea6 <HAL_SPI_Transmit+0x20a>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d102      	bne.n	8003eac <HAL_SPI_Transmit+0x210>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e02d      	b.n	8003f1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1c6      	bne.n	8003e58 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8b0 	bl	8004034 <SPI_EndRxTxTransaction>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f34:	f7fd ff32 	bl	8001d9c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	4413      	add	r3, r2
 8003f42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f44:	f7fd ff2a 	bl	8001d9c <HAL_GetTick>
 8003f48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f4a:	4b39      	ldr	r3, [pc, #228]	@ (8004030 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	015b      	lsls	r3, r3, #5
 8003f50:	0d1b      	lsrs	r3, r3, #20
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5a:	e054      	b.n	8004006 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d050      	beq.n	8004006 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f64:	f7fd ff1a 	bl	8001d9c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d902      	bls.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d13d      	bne.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f92:	d111      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f9c:	d004      	beq.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa6:	d107      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc0:	d10f      	bne.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e017      	b.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3b01      	subs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	429a      	cmp	r2, r3
 8004022:	d19b      	bne.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000000 	.word	0x20000000

08004034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2201      	movs	r2, #1
 8004048:	2102      	movs	r1, #2
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff ff6a 	bl	8003f24 <SPI_WaitFlagStateUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	f043 0220 	orr.w	r2, r3, #32
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e013      	b.n	800408e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2200      	movs	r2, #0
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ff57 	bl	8003f24 <SPI_WaitFlagStateUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e000      	b.n	800408e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <__cvt>:
 8004096:	2b00      	cmp	r3, #0
 8004098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	461d      	mov	r5, r3
 800409e:	bfbb      	ittet	lt
 80040a0:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80040a4:	461d      	movlt	r5, r3
 80040a6:	2300      	movge	r3, #0
 80040a8:	232d      	movlt	r3, #45	@ 0x2d
 80040aa:	b088      	sub	sp, #32
 80040ac:	4614      	mov	r4, r2
 80040ae:	bfb8      	it	lt
 80040b0:	4614      	movlt	r4, r2
 80040b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80040b4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80040b6:	7013      	strb	r3, [r2, #0]
 80040b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80040ba:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80040be:	f023 0820 	bic.w	r8, r3, #32
 80040c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040c6:	d005      	beq.n	80040d4 <__cvt+0x3e>
 80040c8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80040cc:	d100      	bne.n	80040d0 <__cvt+0x3a>
 80040ce:	3601      	adds	r6, #1
 80040d0:	2302      	movs	r3, #2
 80040d2:	e000      	b.n	80040d6 <__cvt+0x40>
 80040d4:	2303      	movs	r3, #3
 80040d6:	aa07      	add	r2, sp, #28
 80040d8:	9204      	str	r2, [sp, #16]
 80040da:	aa06      	add	r2, sp, #24
 80040dc:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040e0:	e9cd 3600 	strd	r3, r6, [sp]
 80040e4:	4622      	mov	r2, r4
 80040e6:	462b      	mov	r3, r5
 80040e8:	f000 fe6e 	bl	8004dc8 <_dtoa_r>
 80040ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80040f0:	4607      	mov	r7, r0
 80040f2:	d119      	bne.n	8004128 <__cvt+0x92>
 80040f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80040f6:	07db      	lsls	r3, r3, #31
 80040f8:	d50e      	bpl.n	8004118 <__cvt+0x82>
 80040fa:	eb00 0906 	add.w	r9, r0, r6
 80040fe:	2200      	movs	r2, #0
 8004100:	2300      	movs	r3, #0
 8004102:	4620      	mov	r0, r4
 8004104:	4629      	mov	r1, r5
 8004106:	f7fc fcbb 	bl	8000a80 <__aeabi_dcmpeq>
 800410a:	b108      	cbz	r0, 8004110 <__cvt+0x7a>
 800410c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004110:	2230      	movs	r2, #48	@ 0x30
 8004112:	9b07      	ldr	r3, [sp, #28]
 8004114:	454b      	cmp	r3, r9
 8004116:	d31e      	bcc.n	8004156 <__cvt+0xc0>
 8004118:	4638      	mov	r0, r7
 800411a:	9b07      	ldr	r3, [sp, #28]
 800411c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800411e:	1bdb      	subs	r3, r3, r7
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	b008      	add	sp, #32
 8004124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004128:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800412c:	eb00 0906 	add.w	r9, r0, r6
 8004130:	d1e5      	bne.n	80040fe <__cvt+0x68>
 8004132:	7803      	ldrb	r3, [r0, #0]
 8004134:	2b30      	cmp	r3, #48	@ 0x30
 8004136:	d10a      	bne.n	800414e <__cvt+0xb8>
 8004138:	2200      	movs	r2, #0
 800413a:	2300      	movs	r3, #0
 800413c:	4620      	mov	r0, r4
 800413e:	4629      	mov	r1, r5
 8004140:	f7fc fc9e 	bl	8000a80 <__aeabi_dcmpeq>
 8004144:	b918      	cbnz	r0, 800414e <__cvt+0xb8>
 8004146:	f1c6 0601 	rsb	r6, r6, #1
 800414a:	f8ca 6000 	str.w	r6, [sl]
 800414e:	f8da 3000 	ldr.w	r3, [sl]
 8004152:	4499      	add	r9, r3
 8004154:	e7d3      	b.n	80040fe <__cvt+0x68>
 8004156:	1c59      	adds	r1, r3, #1
 8004158:	9107      	str	r1, [sp, #28]
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e7d9      	b.n	8004112 <__cvt+0x7c>

0800415e <__exponent>:
 800415e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004160:	2900      	cmp	r1, #0
 8004162:	bfb6      	itet	lt
 8004164:	232d      	movlt	r3, #45	@ 0x2d
 8004166:	232b      	movge	r3, #43	@ 0x2b
 8004168:	4249      	neglt	r1, r1
 800416a:	2909      	cmp	r1, #9
 800416c:	7002      	strb	r2, [r0, #0]
 800416e:	7043      	strb	r3, [r0, #1]
 8004170:	dd29      	ble.n	80041c6 <__exponent+0x68>
 8004172:	f10d 0307 	add.w	r3, sp, #7
 8004176:	461d      	mov	r5, r3
 8004178:	270a      	movs	r7, #10
 800417a:	fbb1 f6f7 	udiv	r6, r1, r7
 800417e:	461a      	mov	r2, r3
 8004180:	fb07 1416 	mls	r4, r7, r6, r1
 8004184:	3430      	adds	r4, #48	@ 0x30
 8004186:	f802 4c01 	strb.w	r4, [r2, #-1]
 800418a:	460c      	mov	r4, r1
 800418c:	2c63      	cmp	r4, #99	@ 0x63
 800418e:	4631      	mov	r1, r6
 8004190:	f103 33ff 	add.w	r3, r3, #4294967295
 8004194:	dcf1      	bgt.n	800417a <__exponent+0x1c>
 8004196:	3130      	adds	r1, #48	@ 0x30
 8004198:	1e94      	subs	r4, r2, #2
 800419a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800419e:	4623      	mov	r3, r4
 80041a0:	1c41      	adds	r1, r0, #1
 80041a2:	42ab      	cmp	r3, r5
 80041a4:	d30a      	bcc.n	80041bc <__exponent+0x5e>
 80041a6:	f10d 0309 	add.w	r3, sp, #9
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	42ac      	cmp	r4, r5
 80041ae:	bf88      	it	hi
 80041b0:	2300      	movhi	r3, #0
 80041b2:	3302      	adds	r3, #2
 80041b4:	4403      	add	r3, r0
 80041b6:	1a18      	subs	r0, r3, r0
 80041b8:	b003      	add	sp, #12
 80041ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80041c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80041c4:	e7ed      	b.n	80041a2 <__exponent+0x44>
 80041c6:	2330      	movs	r3, #48	@ 0x30
 80041c8:	3130      	adds	r1, #48	@ 0x30
 80041ca:	7083      	strb	r3, [r0, #2]
 80041cc:	70c1      	strb	r1, [r0, #3]
 80041ce:	1d03      	adds	r3, r0, #4
 80041d0:	e7f1      	b.n	80041b6 <__exponent+0x58>
	...

080041d4 <_printf_float>:
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	b091      	sub	sp, #68	@ 0x44
 80041da:	460c      	mov	r4, r1
 80041dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80041e0:	4616      	mov	r6, r2
 80041e2:	461f      	mov	r7, r3
 80041e4:	4605      	mov	r5, r0
 80041e6:	f000 fce1 	bl	8004bac <_localeconv_r>
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	9308      	str	r3, [sp, #32]
 80041f0:	f7fc f81a 	bl	8000228 <strlen>
 80041f4:	2300      	movs	r3, #0
 80041f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80041f8:	f8d8 3000 	ldr.w	r3, [r8]
 80041fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80041fe:	3307      	adds	r3, #7
 8004200:	f023 0307 	bic.w	r3, r3, #7
 8004204:	f103 0208 	add.w	r2, r3, #8
 8004208:	f894 a018 	ldrb.w	sl, [r4, #24]
 800420c:	f8d4 b000 	ldr.w	fp, [r4]
 8004210:	f8c8 2000 	str.w	r2, [r8]
 8004214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004218:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800421c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800421e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004222:	f04f 32ff 	mov.w	r2, #4294967295
 8004226:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800422a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800422e:	4b9c      	ldr	r3, [pc, #624]	@ (80044a0 <_printf_float+0x2cc>)
 8004230:	f7fc fc58 	bl	8000ae4 <__aeabi_dcmpun>
 8004234:	bb70      	cbnz	r0, 8004294 <_printf_float+0xc0>
 8004236:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	4b98      	ldr	r3, [pc, #608]	@ (80044a0 <_printf_float+0x2cc>)
 8004240:	f7fc fc32 	bl	8000aa8 <__aeabi_dcmple>
 8004244:	bb30      	cbnz	r0, 8004294 <_printf_float+0xc0>
 8004246:	2200      	movs	r2, #0
 8004248:	2300      	movs	r3, #0
 800424a:	4640      	mov	r0, r8
 800424c:	4649      	mov	r1, r9
 800424e:	f7fc fc21 	bl	8000a94 <__aeabi_dcmplt>
 8004252:	b110      	cbz	r0, 800425a <_printf_float+0x86>
 8004254:	232d      	movs	r3, #45	@ 0x2d
 8004256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800425a:	4a92      	ldr	r2, [pc, #584]	@ (80044a4 <_printf_float+0x2d0>)
 800425c:	4b92      	ldr	r3, [pc, #584]	@ (80044a8 <_printf_float+0x2d4>)
 800425e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004262:	bf94      	ite	ls
 8004264:	4690      	movls	r8, r2
 8004266:	4698      	movhi	r8, r3
 8004268:	2303      	movs	r3, #3
 800426a:	f04f 0900 	mov.w	r9, #0
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	f02b 0304 	bic.w	r3, fp, #4
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	4633      	mov	r3, r6
 8004278:	4621      	mov	r1, r4
 800427a:	4628      	mov	r0, r5
 800427c:	9700      	str	r7, [sp, #0]
 800427e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004280:	f000 f9d4 	bl	800462c <_printf_common>
 8004284:	3001      	adds	r0, #1
 8004286:	f040 8090 	bne.w	80043aa <_printf_float+0x1d6>
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	b011      	add	sp, #68	@ 0x44
 8004290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004294:	4642      	mov	r2, r8
 8004296:	464b      	mov	r3, r9
 8004298:	4640      	mov	r0, r8
 800429a:	4649      	mov	r1, r9
 800429c:	f7fc fc22 	bl	8000ae4 <__aeabi_dcmpun>
 80042a0:	b148      	cbz	r0, 80042b6 <_printf_float+0xe2>
 80042a2:	464b      	mov	r3, r9
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bfb8      	it	lt
 80042a8:	232d      	movlt	r3, #45	@ 0x2d
 80042aa:	4a80      	ldr	r2, [pc, #512]	@ (80044ac <_printf_float+0x2d8>)
 80042ac:	bfb8      	it	lt
 80042ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80042b2:	4b7f      	ldr	r3, [pc, #508]	@ (80044b0 <_printf_float+0x2dc>)
 80042b4:	e7d3      	b.n	800425e <_printf_float+0x8a>
 80042b6:	6863      	ldr	r3, [r4, #4]
 80042b8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	d13f      	bne.n	8004340 <_printf_float+0x16c>
 80042c0:	2306      	movs	r3, #6
 80042c2:	6063      	str	r3, [r4, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	9206      	str	r2, [sp, #24]
 80042ce:	aa0e      	add	r2, sp, #56	@ 0x38
 80042d0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80042d4:	aa0d      	add	r2, sp, #52	@ 0x34
 80042d6:	9203      	str	r2, [sp, #12]
 80042d8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80042dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	4642      	mov	r2, r8
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	4628      	mov	r0, r5
 80042e8:	464b      	mov	r3, r9
 80042ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80042ec:	f7ff fed3 	bl	8004096 <__cvt>
 80042f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042f2:	4680      	mov	r8, r0
 80042f4:	2947      	cmp	r1, #71	@ 0x47
 80042f6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80042f8:	d128      	bne.n	800434c <_printf_float+0x178>
 80042fa:	1cc8      	adds	r0, r1, #3
 80042fc:	db02      	blt.n	8004304 <_printf_float+0x130>
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	4299      	cmp	r1, r3
 8004302:	dd40      	ble.n	8004386 <_printf_float+0x1b2>
 8004304:	f1aa 0a02 	sub.w	sl, sl, #2
 8004308:	fa5f fa8a 	uxtb.w	sl, sl
 800430c:	4652      	mov	r2, sl
 800430e:	3901      	subs	r1, #1
 8004310:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004314:	910d      	str	r1, [sp, #52]	@ 0x34
 8004316:	f7ff ff22 	bl	800415e <__exponent>
 800431a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800431c:	4681      	mov	r9, r0
 800431e:	1813      	adds	r3, r2, r0
 8004320:	2a01      	cmp	r2, #1
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	dc02      	bgt.n	800432c <_printf_float+0x158>
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	07d2      	lsls	r2, r2, #31
 800432a:	d501      	bpl.n	8004330 <_printf_float+0x15c>
 800432c:	3301      	adds	r3, #1
 800432e:	6123      	str	r3, [r4, #16]
 8004330:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004334:	2b00      	cmp	r3, #0
 8004336:	d09e      	beq.n	8004276 <_printf_float+0xa2>
 8004338:	232d      	movs	r3, #45	@ 0x2d
 800433a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800433e:	e79a      	b.n	8004276 <_printf_float+0xa2>
 8004340:	2947      	cmp	r1, #71	@ 0x47
 8004342:	d1bf      	bne.n	80042c4 <_printf_float+0xf0>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1bd      	bne.n	80042c4 <_printf_float+0xf0>
 8004348:	2301      	movs	r3, #1
 800434a:	e7ba      	b.n	80042c2 <_printf_float+0xee>
 800434c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004350:	d9dc      	bls.n	800430c <_printf_float+0x138>
 8004352:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004356:	d118      	bne.n	800438a <_printf_float+0x1b6>
 8004358:	2900      	cmp	r1, #0
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	dd0b      	ble.n	8004376 <_printf_float+0x1a2>
 800435e:	6121      	str	r1, [r4, #16]
 8004360:	b913      	cbnz	r3, 8004368 <_printf_float+0x194>
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	07d0      	lsls	r0, r2, #31
 8004366:	d502      	bpl.n	800436e <_printf_float+0x19a>
 8004368:	3301      	adds	r3, #1
 800436a:	440b      	add	r3, r1
 800436c:	6123      	str	r3, [r4, #16]
 800436e:	f04f 0900 	mov.w	r9, #0
 8004372:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004374:	e7dc      	b.n	8004330 <_printf_float+0x15c>
 8004376:	b913      	cbnz	r3, 800437e <_printf_float+0x1aa>
 8004378:	6822      	ldr	r2, [r4, #0]
 800437a:	07d2      	lsls	r2, r2, #31
 800437c:	d501      	bpl.n	8004382 <_printf_float+0x1ae>
 800437e:	3302      	adds	r3, #2
 8004380:	e7f4      	b.n	800436c <_printf_float+0x198>
 8004382:	2301      	movs	r3, #1
 8004384:	e7f2      	b.n	800436c <_printf_float+0x198>
 8004386:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800438a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800438c:	4299      	cmp	r1, r3
 800438e:	db05      	blt.n	800439c <_printf_float+0x1c8>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	6121      	str	r1, [r4, #16]
 8004394:	07d8      	lsls	r0, r3, #31
 8004396:	d5ea      	bpl.n	800436e <_printf_float+0x19a>
 8004398:	1c4b      	adds	r3, r1, #1
 800439a:	e7e7      	b.n	800436c <_printf_float+0x198>
 800439c:	2900      	cmp	r1, #0
 800439e:	bfcc      	ite	gt
 80043a0:	2201      	movgt	r2, #1
 80043a2:	f1c1 0202 	rsble	r2, r1, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	e7e0      	b.n	800436c <_printf_float+0x198>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	055a      	lsls	r2, r3, #21
 80043ae:	d407      	bmi.n	80043c0 <_printf_float+0x1ec>
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	4642      	mov	r2, r8
 80043b4:	4631      	mov	r1, r6
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b8      	blx	r7
 80043ba:	3001      	adds	r0, #1
 80043bc:	d12b      	bne.n	8004416 <_printf_float+0x242>
 80043be:	e764      	b.n	800428a <_printf_float+0xb6>
 80043c0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043c4:	f240 80dc 	bls.w	8004580 <_printf_float+0x3ac>
 80043c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043cc:	2200      	movs	r2, #0
 80043ce:	2300      	movs	r3, #0
 80043d0:	f7fc fb56 	bl	8000a80 <__aeabi_dcmpeq>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d033      	beq.n	8004440 <_printf_float+0x26c>
 80043d8:	2301      	movs	r3, #1
 80043da:	4631      	mov	r1, r6
 80043dc:	4628      	mov	r0, r5
 80043de:	4a35      	ldr	r2, [pc, #212]	@ (80044b4 <_printf_float+0x2e0>)
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f af51 	beq.w	800428a <_printf_float+0xb6>
 80043e8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80043ec:	4543      	cmp	r3, r8
 80043ee:	db02      	blt.n	80043f6 <_printf_float+0x222>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	07d8      	lsls	r0, r3, #31
 80043f4:	d50f      	bpl.n	8004416 <_printf_float+0x242>
 80043f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	f43f af42 	beq.w	800428a <_printf_float+0xb6>
 8004406:	f04f 0900 	mov.w	r9, #0
 800440a:	f108 38ff 	add.w	r8, r8, #4294967295
 800440e:	f104 0a1a 	add.w	sl, r4, #26
 8004412:	45c8      	cmp	r8, r9
 8004414:	dc09      	bgt.n	800442a <_printf_float+0x256>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	079b      	lsls	r3, r3, #30
 800441a:	f100 8102 	bmi.w	8004622 <_printf_float+0x44e>
 800441e:	68e0      	ldr	r0, [r4, #12]
 8004420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004422:	4298      	cmp	r0, r3
 8004424:	bfb8      	it	lt
 8004426:	4618      	movlt	r0, r3
 8004428:	e731      	b.n	800428e <_printf_float+0xba>
 800442a:	2301      	movs	r3, #1
 800442c:	4652      	mov	r2, sl
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	f43f af28 	beq.w	800428a <_printf_float+0xb6>
 800443a:	f109 0901 	add.w	r9, r9, #1
 800443e:	e7e8      	b.n	8004412 <_printf_float+0x23e>
 8004440:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004442:	2b00      	cmp	r3, #0
 8004444:	dc38      	bgt.n	80044b8 <_printf_float+0x2e4>
 8004446:	2301      	movs	r3, #1
 8004448:	4631      	mov	r1, r6
 800444a:	4628      	mov	r0, r5
 800444c:	4a19      	ldr	r2, [pc, #100]	@ (80044b4 <_printf_float+0x2e0>)
 800444e:	47b8      	blx	r7
 8004450:	3001      	adds	r0, #1
 8004452:	f43f af1a 	beq.w	800428a <_printf_float+0xb6>
 8004456:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800445a:	ea59 0303 	orrs.w	r3, r9, r3
 800445e:	d102      	bne.n	8004466 <_printf_float+0x292>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	07d9      	lsls	r1, r3, #31
 8004464:	d5d7      	bpl.n	8004416 <_printf_float+0x242>
 8004466:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	f43f af0a 	beq.w	800428a <_printf_float+0xb6>
 8004476:	f04f 0a00 	mov.w	sl, #0
 800447a:	f104 0b1a 	add.w	fp, r4, #26
 800447e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004480:	425b      	negs	r3, r3
 8004482:	4553      	cmp	r3, sl
 8004484:	dc01      	bgt.n	800448a <_printf_float+0x2b6>
 8004486:	464b      	mov	r3, r9
 8004488:	e793      	b.n	80043b2 <_printf_float+0x1de>
 800448a:	2301      	movs	r3, #1
 800448c:	465a      	mov	r2, fp
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	f43f aef8 	beq.w	800428a <_printf_float+0xb6>
 800449a:	f10a 0a01 	add.w	sl, sl, #1
 800449e:	e7ee      	b.n	800447e <_printf_float+0x2aa>
 80044a0:	7fefffff 	.word	0x7fefffff
 80044a4:	08007296 	.word	0x08007296
 80044a8:	0800729a 	.word	0x0800729a
 80044ac:	0800729e 	.word	0x0800729e
 80044b0:	080072a2 	.word	0x080072a2
 80044b4:	080072a6 	.word	0x080072a6
 80044b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044ba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044be:	4553      	cmp	r3, sl
 80044c0:	bfa8      	it	ge
 80044c2:	4653      	movge	r3, sl
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	4699      	mov	r9, r3
 80044c8:	dc36      	bgt.n	8004538 <_printf_float+0x364>
 80044ca:	f04f 0b00 	mov.w	fp, #0
 80044ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044d2:	f104 021a 	add.w	r2, r4, #26
 80044d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80044da:	eba3 0309 	sub.w	r3, r3, r9
 80044de:	455b      	cmp	r3, fp
 80044e0:	dc31      	bgt.n	8004546 <_printf_float+0x372>
 80044e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044e4:	459a      	cmp	sl, r3
 80044e6:	dc3a      	bgt.n	800455e <_printf_float+0x38a>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	07da      	lsls	r2, r3, #31
 80044ec:	d437      	bmi.n	800455e <_printf_float+0x38a>
 80044ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044f0:	ebaa 0903 	sub.w	r9, sl, r3
 80044f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044f6:	ebaa 0303 	sub.w	r3, sl, r3
 80044fa:	4599      	cmp	r9, r3
 80044fc:	bfa8      	it	ge
 80044fe:	4699      	movge	r9, r3
 8004500:	f1b9 0f00 	cmp.w	r9, #0
 8004504:	dc33      	bgt.n	800456e <_printf_float+0x39a>
 8004506:	f04f 0800 	mov.w	r8, #0
 800450a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800450e:	f104 0b1a 	add.w	fp, r4, #26
 8004512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004514:	ebaa 0303 	sub.w	r3, sl, r3
 8004518:	eba3 0309 	sub.w	r3, r3, r9
 800451c:	4543      	cmp	r3, r8
 800451e:	f77f af7a 	ble.w	8004416 <_printf_float+0x242>
 8004522:	2301      	movs	r3, #1
 8004524:	465a      	mov	r2, fp
 8004526:	4631      	mov	r1, r6
 8004528:	4628      	mov	r0, r5
 800452a:	47b8      	blx	r7
 800452c:	3001      	adds	r0, #1
 800452e:	f43f aeac 	beq.w	800428a <_printf_float+0xb6>
 8004532:	f108 0801 	add.w	r8, r8, #1
 8004536:	e7ec      	b.n	8004512 <_printf_float+0x33e>
 8004538:	4642      	mov	r2, r8
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	d1c2      	bne.n	80044ca <_printf_float+0x2f6>
 8004544:	e6a1      	b.n	800428a <_printf_float+0xb6>
 8004546:	2301      	movs	r3, #1
 8004548:	4631      	mov	r1, r6
 800454a:	4628      	mov	r0, r5
 800454c:	920a      	str	r2, [sp, #40]	@ 0x28
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae9a 	beq.w	800428a <_printf_float+0xb6>
 8004556:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004558:	f10b 0b01 	add.w	fp, fp, #1
 800455c:	e7bb      	b.n	80044d6 <_printf_float+0x302>
 800455e:	4631      	mov	r1, r6
 8004560:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004564:	4628      	mov	r0, r5
 8004566:	47b8      	blx	r7
 8004568:	3001      	adds	r0, #1
 800456a:	d1c0      	bne.n	80044ee <_printf_float+0x31a>
 800456c:	e68d      	b.n	800428a <_printf_float+0xb6>
 800456e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004570:	464b      	mov	r3, r9
 8004572:	4631      	mov	r1, r6
 8004574:	4628      	mov	r0, r5
 8004576:	4442      	add	r2, r8
 8004578:	47b8      	blx	r7
 800457a:	3001      	adds	r0, #1
 800457c:	d1c3      	bne.n	8004506 <_printf_float+0x332>
 800457e:	e684      	b.n	800428a <_printf_float+0xb6>
 8004580:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004584:	f1ba 0f01 	cmp.w	sl, #1
 8004588:	dc01      	bgt.n	800458e <_printf_float+0x3ba>
 800458a:	07db      	lsls	r3, r3, #31
 800458c:	d536      	bpl.n	80045fc <_printf_float+0x428>
 800458e:	2301      	movs	r3, #1
 8004590:	4642      	mov	r2, r8
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f ae76 	beq.w	800428a <_printf_float+0xb6>
 800459e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	47b8      	blx	r7
 80045a8:	3001      	adds	r0, #1
 80045aa:	f43f ae6e 	beq.w	800428a <_printf_float+0xb6>
 80045ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045b2:	2200      	movs	r2, #0
 80045b4:	2300      	movs	r3, #0
 80045b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045ba:	f7fc fa61 	bl	8000a80 <__aeabi_dcmpeq>
 80045be:	b9c0      	cbnz	r0, 80045f2 <_printf_float+0x41e>
 80045c0:	4653      	mov	r3, sl
 80045c2:	f108 0201 	add.w	r2, r8, #1
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	d10c      	bne.n	80045ea <_printf_float+0x416>
 80045d0:	e65b      	b.n	800428a <_printf_float+0xb6>
 80045d2:	2301      	movs	r3, #1
 80045d4:	465a      	mov	r2, fp
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f ae54 	beq.w	800428a <_printf_float+0xb6>
 80045e2:	f108 0801 	add.w	r8, r8, #1
 80045e6:	45d0      	cmp	r8, sl
 80045e8:	dbf3      	blt.n	80045d2 <_printf_float+0x3fe>
 80045ea:	464b      	mov	r3, r9
 80045ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80045f0:	e6e0      	b.n	80043b4 <_printf_float+0x1e0>
 80045f2:	f04f 0800 	mov.w	r8, #0
 80045f6:	f104 0b1a 	add.w	fp, r4, #26
 80045fa:	e7f4      	b.n	80045e6 <_printf_float+0x412>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4642      	mov	r2, r8
 8004600:	e7e1      	b.n	80045c6 <_printf_float+0x3f2>
 8004602:	2301      	movs	r3, #1
 8004604:	464a      	mov	r2, r9
 8004606:	4631      	mov	r1, r6
 8004608:	4628      	mov	r0, r5
 800460a:	47b8      	blx	r7
 800460c:	3001      	adds	r0, #1
 800460e:	f43f ae3c 	beq.w	800428a <_printf_float+0xb6>
 8004612:	f108 0801 	add.w	r8, r8, #1
 8004616:	68e3      	ldr	r3, [r4, #12]
 8004618:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800461a:	1a5b      	subs	r3, r3, r1
 800461c:	4543      	cmp	r3, r8
 800461e:	dcf0      	bgt.n	8004602 <_printf_float+0x42e>
 8004620:	e6fd      	b.n	800441e <_printf_float+0x24a>
 8004622:	f04f 0800 	mov.w	r8, #0
 8004626:	f104 0919 	add.w	r9, r4, #25
 800462a:	e7f4      	b.n	8004616 <_printf_float+0x442>

0800462c <_printf_common>:
 800462c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	4616      	mov	r6, r2
 8004632:	4698      	mov	r8, r3
 8004634:	688a      	ldr	r2, [r1, #8]
 8004636:	690b      	ldr	r3, [r1, #16]
 8004638:	4607      	mov	r7, r0
 800463a:	4293      	cmp	r3, r2
 800463c:	bfb8      	it	lt
 800463e:	4613      	movlt	r3, r2
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004646:	460c      	mov	r4, r1
 8004648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800464c:	b10a      	cbz	r2, 8004652 <_printf_common+0x26>
 800464e:	3301      	adds	r3, #1
 8004650:	6033      	str	r3, [r6, #0]
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	0699      	lsls	r1, r3, #26
 8004656:	bf42      	ittt	mi
 8004658:	6833      	ldrmi	r3, [r6, #0]
 800465a:	3302      	addmi	r3, #2
 800465c:	6033      	strmi	r3, [r6, #0]
 800465e:	6825      	ldr	r5, [r4, #0]
 8004660:	f015 0506 	ands.w	r5, r5, #6
 8004664:	d106      	bne.n	8004674 <_printf_common+0x48>
 8004666:	f104 0a19 	add.w	sl, r4, #25
 800466a:	68e3      	ldr	r3, [r4, #12]
 800466c:	6832      	ldr	r2, [r6, #0]
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	42ab      	cmp	r3, r5
 8004672:	dc2b      	bgt.n	80046cc <_printf_common+0xa0>
 8004674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	3b00      	subs	r3, #0
 800467c:	bf18      	it	ne
 800467e:	2301      	movne	r3, #1
 8004680:	0692      	lsls	r2, r2, #26
 8004682:	d430      	bmi.n	80046e6 <_printf_common+0xba>
 8004684:	4641      	mov	r1, r8
 8004686:	4638      	mov	r0, r7
 8004688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800468c:	47c8      	blx	r9
 800468e:	3001      	adds	r0, #1
 8004690:	d023      	beq.n	80046da <_printf_common+0xae>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	6922      	ldr	r2, [r4, #16]
 8004696:	f003 0306 	and.w	r3, r3, #6
 800469a:	2b04      	cmp	r3, #4
 800469c:	bf14      	ite	ne
 800469e:	2500      	movne	r5, #0
 80046a0:	6833      	ldreq	r3, [r6, #0]
 80046a2:	f04f 0600 	mov.w	r6, #0
 80046a6:	bf08      	it	eq
 80046a8:	68e5      	ldreq	r5, [r4, #12]
 80046aa:	f104 041a 	add.w	r4, r4, #26
 80046ae:	bf08      	it	eq
 80046b0:	1aed      	subeq	r5, r5, r3
 80046b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80046b6:	bf08      	it	eq
 80046b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046bc:	4293      	cmp	r3, r2
 80046be:	bfc4      	itt	gt
 80046c0:	1a9b      	subgt	r3, r3, r2
 80046c2:	18ed      	addgt	r5, r5, r3
 80046c4:	42b5      	cmp	r5, r6
 80046c6:	d11a      	bne.n	80046fe <_printf_common+0xd2>
 80046c8:	2000      	movs	r0, #0
 80046ca:	e008      	b.n	80046de <_printf_common+0xb2>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4652      	mov	r2, sl
 80046d0:	4641      	mov	r1, r8
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c8      	blx	r9
 80046d6:	3001      	adds	r0, #1
 80046d8:	d103      	bne.n	80046e2 <_printf_common+0xb6>
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e2:	3501      	adds	r5, #1
 80046e4:	e7c1      	b.n	800466a <_printf_common+0x3e>
 80046e6:	2030      	movs	r0, #48	@ 0x30
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046f4:	4422      	add	r2, r4
 80046f6:	3302      	adds	r3, #2
 80046f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046fc:	e7c2      	b.n	8004684 <_printf_common+0x58>
 80046fe:	2301      	movs	r3, #1
 8004700:	4622      	mov	r2, r4
 8004702:	4641      	mov	r1, r8
 8004704:	4638      	mov	r0, r7
 8004706:	47c8      	blx	r9
 8004708:	3001      	adds	r0, #1
 800470a:	d0e6      	beq.n	80046da <_printf_common+0xae>
 800470c:	3601      	adds	r6, #1
 800470e:	e7d9      	b.n	80046c4 <_printf_common+0x98>

08004710 <_printf_i>:
 8004710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	7e0f      	ldrb	r7, [r1, #24]
 8004716:	4691      	mov	r9, r2
 8004718:	2f78      	cmp	r7, #120	@ 0x78
 800471a:	4680      	mov	r8, r0
 800471c:	460c      	mov	r4, r1
 800471e:	469a      	mov	sl, r3
 8004720:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004726:	d807      	bhi.n	8004738 <_printf_i+0x28>
 8004728:	2f62      	cmp	r7, #98	@ 0x62
 800472a:	d80a      	bhi.n	8004742 <_printf_i+0x32>
 800472c:	2f00      	cmp	r7, #0
 800472e:	f000 80d3 	beq.w	80048d8 <_printf_i+0x1c8>
 8004732:	2f58      	cmp	r7, #88	@ 0x58
 8004734:	f000 80ba 	beq.w	80048ac <_printf_i+0x19c>
 8004738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800473c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004740:	e03a      	b.n	80047b8 <_printf_i+0xa8>
 8004742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004746:	2b15      	cmp	r3, #21
 8004748:	d8f6      	bhi.n	8004738 <_printf_i+0x28>
 800474a:	a101      	add	r1, pc, #4	@ (adr r1, 8004750 <_printf_i+0x40>)
 800474c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004750:	080047a9 	.word	0x080047a9
 8004754:	080047bd 	.word	0x080047bd
 8004758:	08004739 	.word	0x08004739
 800475c:	08004739 	.word	0x08004739
 8004760:	08004739 	.word	0x08004739
 8004764:	08004739 	.word	0x08004739
 8004768:	080047bd 	.word	0x080047bd
 800476c:	08004739 	.word	0x08004739
 8004770:	08004739 	.word	0x08004739
 8004774:	08004739 	.word	0x08004739
 8004778:	08004739 	.word	0x08004739
 800477c:	080048bf 	.word	0x080048bf
 8004780:	080047e7 	.word	0x080047e7
 8004784:	08004879 	.word	0x08004879
 8004788:	08004739 	.word	0x08004739
 800478c:	08004739 	.word	0x08004739
 8004790:	080048e1 	.word	0x080048e1
 8004794:	08004739 	.word	0x08004739
 8004798:	080047e7 	.word	0x080047e7
 800479c:	08004739 	.word	0x08004739
 80047a0:	08004739 	.word	0x08004739
 80047a4:	08004881 	.word	0x08004881
 80047a8:	6833      	ldr	r3, [r6, #0]
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6032      	str	r2, [r6, #0]
 80047b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047b8:	2301      	movs	r3, #1
 80047ba:	e09e      	b.n	80048fa <_printf_i+0x1ea>
 80047bc:	6833      	ldr	r3, [r6, #0]
 80047be:	6820      	ldr	r0, [r4, #0]
 80047c0:	1d19      	adds	r1, r3, #4
 80047c2:	6031      	str	r1, [r6, #0]
 80047c4:	0606      	lsls	r6, r0, #24
 80047c6:	d501      	bpl.n	80047cc <_printf_i+0xbc>
 80047c8:	681d      	ldr	r5, [r3, #0]
 80047ca:	e003      	b.n	80047d4 <_printf_i+0xc4>
 80047cc:	0645      	lsls	r5, r0, #25
 80047ce:	d5fb      	bpl.n	80047c8 <_printf_i+0xb8>
 80047d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	da03      	bge.n	80047e0 <_printf_i+0xd0>
 80047d8:	232d      	movs	r3, #45	@ 0x2d
 80047da:	426d      	negs	r5, r5
 80047dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e0:	230a      	movs	r3, #10
 80047e2:	4859      	ldr	r0, [pc, #356]	@ (8004948 <_printf_i+0x238>)
 80047e4:	e011      	b.n	800480a <_printf_i+0xfa>
 80047e6:	6821      	ldr	r1, [r4, #0]
 80047e8:	6833      	ldr	r3, [r6, #0]
 80047ea:	0608      	lsls	r0, r1, #24
 80047ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80047f0:	d402      	bmi.n	80047f8 <_printf_i+0xe8>
 80047f2:	0649      	lsls	r1, r1, #25
 80047f4:	bf48      	it	mi
 80047f6:	b2ad      	uxthmi	r5, r5
 80047f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80047fa:	6033      	str	r3, [r6, #0]
 80047fc:	bf14      	ite	ne
 80047fe:	230a      	movne	r3, #10
 8004800:	2308      	moveq	r3, #8
 8004802:	4851      	ldr	r0, [pc, #324]	@ (8004948 <_printf_i+0x238>)
 8004804:	2100      	movs	r1, #0
 8004806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800480a:	6866      	ldr	r6, [r4, #4]
 800480c:	2e00      	cmp	r6, #0
 800480e:	bfa8      	it	ge
 8004810:	6821      	ldrge	r1, [r4, #0]
 8004812:	60a6      	str	r6, [r4, #8]
 8004814:	bfa4      	itt	ge
 8004816:	f021 0104 	bicge.w	r1, r1, #4
 800481a:	6021      	strge	r1, [r4, #0]
 800481c:	b90d      	cbnz	r5, 8004822 <_printf_i+0x112>
 800481e:	2e00      	cmp	r6, #0
 8004820:	d04b      	beq.n	80048ba <_printf_i+0x1aa>
 8004822:	4616      	mov	r6, r2
 8004824:	fbb5 f1f3 	udiv	r1, r5, r3
 8004828:	fb03 5711 	mls	r7, r3, r1, r5
 800482c:	5dc7      	ldrb	r7, [r0, r7]
 800482e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004832:	462f      	mov	r7, r5
 8004834:	42bb      	cmp	r3, r7
 8004836:	460d      	mov	r5, r1
 8004838:	d9f4      	bls.n	8004824 <_printf_i+0x114>
 800483a:	2b08      	cmp	r3, #8
 800483c:	d10b      	bne.n	8004856 <_printf_i+0x146>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	07df      	lsls	r7, r3, #31
 8004842:	d508      	bpl.n	8004856 <_printf_i+0x146>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	6861      	ldr	r1, [r4, #4]
 8004848:	4299      	cmp	r1, r3
 800484a:	bfde      	ittt	le
 800484c:	2330      	movle	r3, #48	@ 0x30
 800484e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004852:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004856:	1b92      	subs	r2, r2, r6
 8004858:	6122      	str	r2, [r4, #16]
 800485a:	464b      	mov	r3, r9
 800485c:	4621      	mov	r1, r4
 800485e:	4640      	mov	r0, r8
 8004860:	f8cd a000 	str.w	sl, [sp]
 8004864:	aa03      	add	r2, sp, #12
 8004866:	f7ff fee1 	bl	800462c <_printf_common>
 800486a:	3001      	adds	r0, #1
 800486c:	d14a      	bne.n	8004904 <_printf_i+0x1f4>
 800486e:	f04f 30ff 	mov.w	r0, #4294967295
 8004872:	b004      	add	sp, #16
 8004874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	f043 0320 	orr.w	r3, r3, #32
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	2778      	movs	r7, #120	@ 0x78
 8004882:	4832      	ldr	r0, [pc, #200]	@ (800494c <_printf_i+0x23c>)
 8004884:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	6831      	ldr	r1, [r6, #0]
 800488c:	061f      	lsls	r7, r3, #24
 800488e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004892:	d402      	bmi.n	800489a <_printf_i+0x18a>
 8004894:	065f      	lsls	r7, r3, #25
 8004896:	bf48      	it	mi
 8004898:	b2ad      	uxthmi	r5, r5
 800489a:	6031      	str	r1, [r6, #0]
 800489c:	07d9      	lsls	r1, r3, #31
 800489e:	bf44      	itt	mi
 80048a0:	f043 0320 	orrmi.w	r3, r3, #32
 80048a4:	6023      	strmi	r3, [r4, #0]
 80048a6:	b11d      	cbz	r5, 80048b0 <_printf_i+0x1a0>
 80048a8:	2310      	movs	r3, #16
 80048aa:	e7ab      	b.n	8004804 <_printf_i+0xf4>
 80048ac:	4826      	ldr	r0, [pc, #152]	@ (8004948 <_printf_i+0x238>)
 80048ae:	e7e9      	b.n	8004884 <_printf_i+0x174>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f023 0320 	bic.w	r3, r3, #32
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	e7f6      	b.n	80048a8 <_printf_i+0x198>
 80048ba:	4616      	mov	r6, r2
 80048bc:	e7bd      	b.n	800483a <_printf_i+0x12a>
 80048be:	6833      	ldr	r3, [r6, #0]
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	1d18      	adds	r0, r3, #4
 80048c4:	6961      	ldr	r1, [r4, #20]
 80048c6:	6030      	str	r0, [r6, #0]
 80048c8:	062e      	lsls	r6, r5, #24
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	d501      	bpl.n	80048d2 <_printf_i+0x1c2>
 80048ce:	6019      	str	r1, [r3, #0]
 80048d0:	e002      	b.n	80048d8 <_printf_i+0x1c8>
 80048d2:	0668      	lsls	r0, r5, #25
 80048d4:	d5fb      	bpl.n	80048ce <_printf_i+0x1be>
 80048d6:	8019      	strh	r1, [r3, #0]
 80048d8:	2300      	movs	r3, #0
 80048da:	4616      	mov	r6, r2
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	e7bc      	b.n	800485a <_printf_i+0x14a>
 80048e0:	6833      	ldr	r3, [r6, #0]
 80048e2:	2100      	movs	r1, #0
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	6032      	str	r2, [r6, #0]
 80048e8:	681e      	ldr	r6, [r3, #0]
 80048ea:	6862      	ldr	r2, [r4, #4]
 80048ec:	4630      	mov	r0, r6
 80048ee:	f000 f9d4 	bl	8004c9a <memchr>
 80048f2:	b108      	cbz	r0, 80048f8 <_printf_i+0x1e8>
 80048f4:	1b80      	subs	r0, r0, r6
 80048f6:	6060      	str	r0, [r4, #4]
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	2300      	movs	r3, #0
 80048fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004902:	e7aa      	b.n	800485a <_printf_i+0x14a>
 8004904:	4632      	mov	r2, r6
 8004906:	4649      	mov	r1, r9
 8004908:	4640      	mov	r0, r8
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	47d0      	blx	sl
 800490e:	3001      	adds	r0, #1
 8004910:	d0ad      	beq.n	800486e <_printf_i+0x15e>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	079b      	lsls	r3, r3, #30
 8004916:	d413      	bmi.n	8004940 <_printf_i+0x230>
 8004918:	68e0      	ldr	r0, [r4, #12]
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	4298      	cmp	r0, r3
 800491e:	bfb8      	it	lt
 8004920:	4618      	movlt	r0, r3
 8004922:	e7a6      	b.n	8004872 <_printf_i+0x162>
 8004924:	2301      	movs	r3, #1
 8004926:	4632      	mov	r2, r6
 8004928:	4649      	mov	r1, r9
 800492a:	4640      	mov	r0, r8
 800492c:	47d0      	blx	sl
 800492e:	3001      	adds	r0, #1
 8004930:	d09d      	beq.n	800486e <_printf_i+0x15e>
 8004932:	3501      	adds	r5, #1
 8004934:	68e3      	ldr	r3, [r4, #12]
 8004936:	9903      	ldr	r1, [sp, #12]
 8004938:	1a5b      	subs	r3, r3, r1
 800493a:	42ab      	cmp	r3, r5
 800493c:	dcf2      	bgt.n	8004924 <_printf_i+0x214>
 800493e:	e7eb      	b.n	8004918 <_printf_i+0x208>
 8004940:	2500      	movs	r5, #0
 8004942:	f104 0619 	add.w	r6, r4, #25
 8004946:	e7f5      	b.n	8004934 <_printf_i+0x224>
 8004948:	080072a8 	.word	0x080072a8
 800494c:	080072b9 	.word	0x080072b9

08004950 <std>:
 8004950:	2300      	movs	r3, #0
 8004952:	b510      	push	{r4, lr}
 8004954:	4604      	mov	r4, r0
 8004956:	e9c0 3300 	strd	r3, r3, [r0]
 800495a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495e:	6083      	str	r3, [r0, #8]
 8004960:	8181      	strh	r1, [r0, #12]
 8004962:	6643      	str	r3, [r0, #100]	@ 0x64
 8004964:	81c2      	strh	r2, [r0, #14]
 8004966:	6183      	str	r3, [r0, #24]
 8004968:	4619      	mov	r1, r3
 800496a:	2208      	movs	r2, #8
 800496c:	305c      	adds	r0, #92	@ 0x5c
 800496e:	f000 f914 	bl	8004b9a <memset>
 8004972:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <std+0x58>)
 8004974:	6224      	str	r4, [r4, #32]
 8004976:	6263      	str	r3, [r4, #36]	@ 0x24
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <std+0x5c>)
 800497a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800497c:	4b0c      	ldr	r3, [pc, #48]	@ (80049b0 <std+0x60>)
 800497e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004980:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <std+0x64>)
 8004982:	6323      	str	r3, [r4, #48]	@ 0x30
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <std+0x68>)
 8004986:	429c      	cmp	r4, r3
 8004988:	d006      	beq.n	8004998 <std+0x48>
 800498a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800498e:	4294      	cmp	r4, r2
 8004990:	d002      	beq.n	8004998 <std+0x48>
 8004992:	33d0      	adds	r3, #208	@ 0xd0
 8004994:	429c      	cmp	r4, r3
 8004996:	d105      	bne.n	80049a4 <std+0x54>
 8004998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a0:	f000 b978 	b.w	8004c94 <__retarget_lock_init_recursive>
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop
 80049a8:	08004b15 	.word	0x08004b15
 80049ac:	08004b37 	.word	0x08004b37
 80049b0:	08004b6f 	.word	0x08004b6f
 80049b4:	08004b93 	.word	0x08004b93
 80049b8:	20000308 	.word	0x20000308

080049bc <stdio_exit_handler>:
 80049bc:	4a02      	ldr	r2, [pc, #8]	@ (80049c8 <stdio_exit_handler+0xc>)
 80049be:	4903      	ldr	r1, [pc, #12]	@ (80049cc <stdio_exit_handler+0x10>)
 80049c0:	4803      	ldr	r0, [pc, #12]	@ (80049d0 <stdio_exit_handler+0x14>)
 80049c2:	f000 b869 	b.w	8004a98 <_fwalk_sglue>
 80049c6:	bf00      	nop
 80049c8:	2000000c 	.word	0x2000000c
 80049cc:	08006605 	.word	0x08006605
 80049d0:	2000001c 	.word	0x2000001c

080049d4 <cleanup_stdio>:
 80049d4:	6841      	ldr	r1, [r0, #4]
 80049d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <cleanup_stdio+0x34>)
 80049d8:	b510      	push	{r4, lr}
 80049da:	4299      	cmp	r1, r3
 80049dc:	4604      	mov	r4, r0
 80049de:	d001      	beq.n	80049e4 <cleanup_stdio+0x10>
 80049e0:	f001 fe10 	bl	8006604 <_fflush_r>
 80049e4:	68a1      	ldr	r1, [r4, #8]
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <cleanup_stdio+0x38>)
 80049e8:	4299      	cmp	r1, r3
 80049ea:	d002      	beq.n	80049f2 <cleanup_stdio+0x1e>
 80049ec:	4620      	mov	r0, r4
 80049ee:	f001 fe09 	bl	8006604 <_fflush_r>
 80049f2:	68e1      	ldr	r1, [r4, #12]
 80049f4:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <cleanup_stdio+0x3c>)
 80049f6:	4299      	cmp	r1, r3
 80049f8:	d004      	beq.n	8004a04 <cleanup_stdio+0x30>
 80049fa:	4620      	mov	r0, r4
 80049fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a00:	f001 be00 	b.w	8006604 <_fflush_r>
 8004a04:	bd10      	pop	{r4, pc}
 8004a06:	bf00      	nop
 8004a08:	20000308 	.word	0x20000308
 8004a0c:	20000370 	.word	0x20000370
 8004a10:	200003d8 	.word	0x200003d8

08004a14 <global_stdio_init.part.0>:
 8004a14:	b510      	push	{r4, lr}
 8004a16:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <global_stdio_init.part.0+0x30>)
 8004a18:	4c0b      	ldr	r4, [pc, #44]	@ (8004a48 <global_stdio_init.part.0+0x34>)
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a4c <global_stdio_init.part.0+0x38>)
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	2104      	movs	r1, #4
 8004a22:	2200      	movs	r2, #0
 8004a24:	f7ff ff94 	bl	8004950 <std>
 8004a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2109      	movs	r1, #9
 8004a30:	f7ff ff8e 	bl	8004950 <std>
 8004a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a38:	2202      	movs	r2, #2
 8004a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3e:	2112      	movs	r1, #18
 8004a40:	f7ff bf86 	b.w	8004950 <std>
 8004a44:	20000440 	.word	0x20000440
 8004a48:	20000308 	.word	0x20000308
 8004a4c:	080049bd 	.word	0x080049bd

08004a50 <__sfp_lock_acquire>:
 8004a50:	4801      	ldr	r0, [pc, #4]	@ (8004a58 <__sfp_lock_acquire+0x8>)
 8004a52:	f000 b920 	b.w	8004c96 <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	20000449 	.word	0x20000449

08004a5c <__sfp_lock_release>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	@ (8004a64 <__sfp_lock_release+0x8>)
 8004a5e:	f000 b91b 	b.w	8004c98 <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	20000449 	.word	0x20000449

08004a68 <__sinit>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	f7ff fff0 	bl	8004a50 <__sfp_lock_acquire>
 8004a70:	6a23      	ldr	r3, [r4, #32]
 8004a72:	b11b      	cbz	r3, 8004a7c <__sinit+0x14>
 8004a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a78:	f7ff bff0 	b.w	8004a5c <__sfp_lock_release>
 8004a7c:	4b04      	ldr	r3, [pc, #16]	@ (8004a90 <__sinit+0x28>)
 8004a7e:	6223      	str	r3, [r4, #32]
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__sinit+0x2c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f5      	bne.n	8004a74 <__sinit+0xc>
 8004a88:	f7ff ffc4 	bl	8004a14 <global_stdio_init.part.0>
 8004a8c:	e7f2      	b.n	8004a74 <__sinit+0xc>
 8004a8e:	bf00      	nop
 8004a90:	080049d5 	.word	0x080049d5
 8004a94:	20000440 	.word	0x20000440

08004a98 <_fwalk_sglue>:
 8004a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	4688      	mov	r8, r1
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8004aac:	d505      	bpl.n	8004aba <_fwalk_sglue+0x22>
 8004aae:	6824      	ldr	r4, [r4, #0]
 8004ab0:	2c00      	cmp	r4, #0
 8004ab2:	d1f7      	bne.n	8004aa4 <_fwalk_sglue+0xc>
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aba:	89ab      	ldrh	r3, [r5, #12]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d907      	bls.n	8004ad0 <_fwalk_sglue+0x38>
 8004ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	d003      	beq.n	8004ad0 <_fwalk_sglue+0x38>
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4638      	mov	r0, r7
 8004acc:	47c0      	blx	r8
 8004ace:	4306      	orrs	r6, r0
 8004ad0:	3568      	adds	r5, #104	@ 0x68
 8004ad2:	e7e9      	b.n	8004aa8 <_fwalk_sglue+0x10>

08004ad4 <siprintf>:
 8004ad4:	b40e      	push	{r1, r2, r3}
 8004ad6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ada:	b500      	push	{lr}
 8004adc:	b09c      	sub	sp, #112	@ 0x70
 8004ade:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ae0:	9002      	str	r0, [sp, #8]
 8004ae2:	9006      	str	r0, [sp, #24]
 8004ae4:	9107      	str	r1, [sp, #28]
 8004ae6:	9104      	str	r1, [sp, #16]
 8004ae8:	4808      	ldr	r0, [pc, #32]	@ (8004b0c <siprintf+0x38>)
 8004aea:	4909      	ldr	r1, [pc, #36]	@ (8004b10 <siprintf+0x3c>)
 8004aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8004af0:	9105      	str	r1, [sp, #20]
 8004af2:	6800      	ldr	r0, [r0, #0]
 8004af4:	a902      	add	r1, sp, #8
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	f001 fc08 	bl	800630c <_svfiprintf_r>
 8004afc:	2200      	movs	r2, #0
 8004afe:	9b02      	ldr	r3, [sp, #8]
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	b01c      	add	sp, #112	@ 0x70
 8004b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b08:	b003      	add	sp, #12
 8004b0a:	4770      	bx	lr
 8004b0c:	20000018 	.word	0x20000018
 8004b10:	ffff0208 	.word	0xffff0208

08004b14 <__sread>:
 8004b14:	b510      	push	{r4, lr}
 8004b16:	460c      	mov	r4, r1
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	f000 f86c 	bl	8004bf8 <_read_r>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	bfab      	itete	ge
 8004b24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b26:	89a3      	ldrhlt	r3, [r4, #12]
 8004b28:	181b      	addge	r3, r3, r0
 8004b2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b2e:	bfac      	ite	ge
 8004b30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b32:	81a3      	strhlt	r3, [r4, #12]
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <__swrite>:
 8004b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	461f      	mov	r7, r3
 8004b3c:	898b      	ldrh	r3, [r1, #12]
 8004b3e:	4605      	mov	r5, r0
 8004b40:	05db      	lsls	r3, r3, #23
 8004b42:	460c      	mov	r4, r1
 8004b44:	4616      	mov	r6, r2
 8004b46:	d505      	bpl.n	8004b54 <__swrite+0x1e>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	f000 f840 	bl	8004bd4 <_lseek_r>
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	4632      	mov	r2, r6
 8004b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	463b      	mov	r3, r7
 8004b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6a:	f000 b857 	b.w	8004c1c <_write_r>

08004b6e <__sseek>:
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	460c      	mov	r4, r1
 8004b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b76:	f000 f82d 	bl	8004bd4 <_lseek_r>
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	bf15      	itete	ne
 8004b80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b8a:	81a3      	strheq	r3, [r4, #12]
 8004b8c:	bf18      	it	ne
 8004b8e:	81a3      	strhne	r3, [r4, #12]
 8004b90:	bd10      	pop	{r4, pc}

08004b92 <__sclose>:
 8004b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b96:	f000 b80d 	b.w	8004bb4 <_close_r>

08004b9a <memset>:
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4402      	add	r2, r0
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d100      	bne.n	8004ba4 <memset+0xa>
 8004ba2:	4770      	bx	lr
 8004ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba8:	e7f9      	b.n	8004b9e <memset+0x4>
	...

08004bac <_localeconv_r>:
 8004bac:	4800      	ldr	r0, [pc, #0]	@ (8004bb0 <_localeconv_r+0x4>)
 8004bae:	4770      	bx	lr
 8004bb0:	20000158 	.word	0x20000158

08004bb4 <_close_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4d05      	ldr	r5, [pc, #20]	@ (8004bd0 <_close_r+0x1c>)
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fd f801 	bl	8001bc6 <_close>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_close_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_close_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000444 	.word	0x20000444

08004bd4 <_lseek_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4608      	mov	r0, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4d05      	ldr	r5, [pc, #20]	@ (8004bf4 <_lseek_r+0x20>)
 8004be0:	602a      	str	r2, [r5, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f7fd f813 	bl	8001c0e <_lseek>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_lseek_r+0x1e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_lseek_r+0x1e>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000444 	.word	0x20000444

08004bf8 <_read_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	2200      	movs	r2, #0
 8004c02:	4d05      	ldr	r5, [pc, #20]	@ (8004c18 <_read_r+0x20>)
 8004c04:	602a      	str	r2, [r5, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f7fc ffa4 	bl	8001b54 <_read>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_read_r+0x1e>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_read_r+0x1e>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	20000444 	.word	0x20000444

08004c1c <_write_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	2200      	movs	r2, #0
 8004c26:	4d05      	ldr	r5, [pc, #20]	@ (8004c3c <_write_r+0x20>)
 8004c28:	602a      	str	r2, [r5, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f7fc ffaf 	bl	8001b8e <_write>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_write_r+0x1e>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_write_r+0x1e>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000444 	.word	0x20000444

08004c40 <__errno>:
 8004c40:	4b01      	ldr	r3, [pc, #4]	@ (8004c48 <__errno+0x8>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000018 	.word	0x20000018

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2600      	movs	r6, #0
 8004c50:	4d0c      	ldr	r5, [pc, #48]	@ (8004c84 <__libc_init_array+0x38>)
 8004c52:	4c0d      	ldr	r4, [pc, #52]	@ (8004c88 <__libc_init_array+0x3c>)
 8004c54:	1b64      	subs	r4, r4, r5
 8004c56:	10a4      	asrs	r4, r4, #2
 8004c58:	42a6      	cmp	r6, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	f002 f86e 	bl	8006d3c <_init>
 8004c60:	2600      	movs	r6, #0
 8004c62:	4d0a      	ldr	r5, [pc, #40]	@ (8004c8c <__libc_init_array+0x40>)
 8004c64:	4c0a      	ldr	r4, [pc, #40]	@ (8004c90 <__libc_init_array+0x44>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	42a6      	cmp	r6, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c74:	4798      	blx	r3
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7e:	4798      	blx	r3
 8004c80:	3601      	adds	r6, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	08007610 	.word	0x08007610
 8004c88:	08007610 	.word	0x08007610
 8004c8c:	08007610 	.word	0x08007610
 8004c90:	08007614 	.word	0x08007614

08004c94 <__retarget_lock_init_recursive>:
 8004c94:	4770      	bx	lr

08004c96 <__retarget_lock_acquire_recursive>:
 8004c96:	4770      	bx	lr

08004c98 <__retarget_lock_release_recursive>:
 8004c98:	4770      	bx	lr

08004c9a <memchr>:
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	b2c9      	uxtb	r1, r1
 8004ca0:	4402      	add	r2, r0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	d101      	bne.n	8004cac <memchr+0x12>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e003      	b.n	8004cb4 <memchr+0x1a>
 8004cac:	7804      	ldrb	r4, [r0, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	428c      	cmp	r4, r1
 8004cb2:	d1f6      	bne.n	8004ca2 <memchr+0x8>
 8004cb4:	bd10      	pop	{r4, pc}

08004cb6 <quorem>:
 8004cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	6903      	ldr	r3, [r0, #16]
 8004cbc:	690c      	ldr	r4, [r1, #16]
 8004cbe:	4607      	mov	r7, r0
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	db7e      	blt.n	8004dc2 <quorem+0x10c>
 8004cc4:	3c01      	subs	r4, #1
 8004cc6:	00a3      	lsls	r3, r4, #2
 8004cc8:	f100 0514 	add.w	r5, r0, #20
 8004ccc:	f101 0814 	add.w	r8, r1, #20
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cec:	d32e      	bcc.n	8004d4c <quorem+0x96>
 8004cee:	f04f 0a00 	mov.w	sl, #0
 8004cf2:	46c4      	mov	ip, r8
 8004cf4:	46ae      	mov	lr, r5
 8004cf6:	46d3      	mov	fp, sl
 8004cf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004cfc:	b298      	uxth	r0, r3
 8004cfe:	fb06 a000 	mla	r0, r6, r0, sl
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	0c02      	lsrs	r2, r0, #16
 8004d06:	fb06 2303 	mla	r3, r6, r3, r2
 8004d0a:	f8de 2000 	ldr.w	r2, [lr]
 8004d0e:	b280      	uxth	r0, r0
 8004d10:	b292      	uxth	r2, r2
 8004d12:	1a12      	subs	r2, r2, r0
 8004d14:	445a      	add	r2, fp
 8004d16:	f8de 0000 	ldr.w	r0, [lr]
 8004d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004d28:	b292      	uxth	r2, r2
 8004d2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d2e:	45e1      	cmp	r9, ip
 8004d30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004d34:	f84e 2b04 	str.w	r2, [lr], #4
 8004d38:	d2de      	bcs.n	8004cf8 <quorem+0x42>
 8004d3a:	9b00      	ldr	r3, [sp, #0]
 8004d3c:	58eb      	ldr	r3, [r5, r3]
 8004d3e:	b92b      	cbnz	r3, 8004d4c <quorem+0x96>
 8004d40:	9b01      	ldr	r3, [sp, #4]
 8004d42:	3b04      	subs	r3, #4
 8004d44:	429d      	cmp	r5, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	d32f      	bcc.n	8004daa <quorem+0xf4>
 8004d4a:	613c      	str	r4, [r7, #16]
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f001 f979 	bl	8006044 <__mcmp>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	db25      	blt.n	8004da2 <quorem+0xec>
 8004d56:	4629      	mov	r1, r5
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d5e:	f8d1 c000 	ldr.w	ip, [r1]
 8004d62:	fa1f fe82 	uxth.w	lr, r2
 8004d66:	fa1f f38c 	uxth.w	r3, ip
 8004d6a:	eba3 030e 	sub.w	r3, r3, lr
 8004d6e:	4403      	add	r3, r0
 8004d70:	0c12      	lsrs	r2, r2, #16
 8004d72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d80:	45c1      	cmp	r9, r8
 8004d82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d86:	f841 3b04 	str.w	r3, [r1], #4
 8004d8a:	d2e6      	bcs.n	8004d5a <quorem+0xa4>
 8004d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d94:	b922      	cbnz	r2, 8004da0 <quorem+0xea>
 8004d96:	3b04      	subs	r3, #4
 8004d98:	429d      	cmp	r5, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	d30b      	bcc.n	8004db6 <quorem+0x100>
 8004d9e:	613c      	str	r4, [r7, #16]
 8004da0:	3601      	adds	r6, #1
 8004da2:	4630      	mov	r0, r6
 8004da4:	b003      	add	sp, #12
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	3b04      	subs	r3, #4
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d1cb      	bne.n	8004d4a <quorem+0x94>
 8004db2:	3c01      	subs	r4, #1
 8004db4:	e7c6      	b.n	8004d44 <quorem+0x8e>
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	3b04      	subs	r3, #4
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	d1ef      	bne.n	8004d9e <quorem+0xe8>
 8004dbe:	3c01      	subs	r4, #1
 8004dc0:	e7ea      	b.n	8004d98 <quorem+0xe2>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e7ee      	b.n	8004da4 <quorem+0xee>
	...

08004dc8 <_dtoa_r>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	4614      	mov	r4, r2
 8004dce:	461d      	mov	r5, r3
 8004dd0:	69c7      	ldr	r7, [r0, #28]
 8004dd2:	b097      	sub	sp, #92	@ 0x5c
 8004dd4:	4683      	mov	fp, r0
 8004dd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004dda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004ddc:	b97f      	cbnz	r7, 8004dfe <_dtoa_r+0x36>
 8004dde:	2010      	movs	r0, #16
 8004de0:	f000 fe02 	bl	80059e8 <malloc>
 8004de4:	4602      	mov	r2, r0
 8004de6:	f8cb 001c 	str.w	r0, [fp, #28]
 8004dea:	b920      	cbnz	r0, 8004df6 <_dtoa_r+0x2e>
 8004dec:	21ef      	movs	r1, #239	@ 0xef
 8004dee:	4ba8      	ldr	r3, [pc, #672]	@ (8005090 <_dtoa_r+0x2c8>)
 8004df0:	48a8      	ldr	r0, [pc, #672]	@ (8005094 <_dtoa_r+0x2cc>)
 8004df2:	f001 fc67 	bl	80066c4 <__assert_func>
 8004df6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004dfa:	6007      	str	r7, [r0, #0]
 8004dfc:	60c7      	str	r7, [r0, #12]
 8004dfe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	b159      	cbz	r1, 8004e1e <_dtoa_r+0x56>
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4093      	lsls	r3, r2
 8004e0c:	604a      	str	r2, [r1, #4]
 8004e0e:	608b      	str	r3, [r1, #8]
 8004e10:	4658      	mov	r0, fp
 8004e12:	f000 fedf 	bl	8005bd4 <_Bfree>
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	1e2b      	subs	r3, r5, #0
 8004e20:	bfaf      	iteee	ge
 8004e22:	2300      	movge	r3, #0
 8004e24:	2201      	movlt	r2, #1
 8004e26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004e2a:	9303      	strlt	r3, [sp, #12]
 8004e2c:	bfa8      	it	ge
 8004e2e:	6033      	strge	r3, [r6, #0]
 8004e30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e34:	4b98      	ldr	r3, [pc, #608]	@ (8005098 <_dtoa_r+0x2d0>)
 8004e36:	bfb8      	it	lt
 8004e38:	6032      	strlt	r2, [r6, #0]
 8004e3a:	ea33 0308 	bics.w	r3, r3, r8
 8004e3e:	d112      	bne.n	8004e66 <_dtoa_r+0x9e>
 8004e40:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004e44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004e4c:	4323      	orrs	r3, r4
 8004e4e:	f000 8550 	beq.w	80058f2 <_dtoa_r+0xb2a>
 8004e52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e54:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800509c <_dtoa_r+0x2d4>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8552 	beq.w	8005902 <_dtoa_r+0xb3a>
 8004e5e:	f10a 0303 	add.w	r3, sl, #3
 8004e62:	f000 bd4c 	b.w	80058fe <_dtoa_r+0xb36>
 8004e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e72:	2200      	movs	r2, #0
 8004e74:	2300      	movs	r3, #0
 8004e76:	f7fb fe03 	bl	8000a80 <__aeabi_dcmpeq>
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	b158      	cbz	r0, 8004e96 <_dtoa_r+0xce>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e86:	b113      	cbz	r3, 8004e8e <_dtoa_r+0xc6>
 8004e88:	4b85      	ldr	r3, [pc, #532]	@ (80050a0 <_dtoa_r+0x2d8>)
 8004e8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80050a4 <_dtoa_r+0x2dc>
 8004e92:	f000 bd36 	b.w	8005902 <_dtoa_r+0xb3a>
 8004e96:	ab14      	add	r3, sp, #80	@ 0x50
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	ab15      	add	r3, sp, #84	@ 0x54
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	4658      	mov	r0, fp
 8004ea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004ea4:	f001 f97e 	bl	80061a4 <__d2b>
 8004ea8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004eac:	4681      	mov	r9, r0
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	d077      	beq.n	8004fa2 <_dtoa_r+0x1da>
 8004eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ec0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ec4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004ec8:	9712      	str	r7, [sp, #72]	@ 0x48
 8004eca:	4619      	mov	r1, r3
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4b76      	ldr	r3, [pc, #472]	@ (80050a8 <_dtoa_r+0x2e0>)
 8004ed0:	f7fb f9b6 	bl	8000240 <__aeabi_dsub>
 8004ed4:	a368      	add	r3, pc, #416	@ (adr r3, 8005078 <_dtoa_r+0x2b0>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb fb69 	bl	80005b0 <__aeabi_dmul>
 8004ede:	a368      	add	r3, pc, #416	@ (adr r3, 8005080 <_dtoa_r+0x2b8>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb f9ae 	bl	8000244 <__adddf3>
 8004ee8:	4604      	mov	r4, r0
 8004eea:	4630      	mov	r0, r6
 8004eec:	460d      	mov	r5, r1
 8004eee:	f7fb faf5 	bl	80004dc <__aeabi_i2d>
 8004ef2:	a365      	add	r3, pc, #404	@ (adr r3, 8005088 <_dtoa_r+0x2c0>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f7fb fb5a 	bl	80005b0 <__aeabi_dmul>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4620      	mov	r0, r4
 8004f02:	4629      	mov	r1, r5
 8004f04:	f7fb f99e 	bl	8000244 <__adddf3>
 8004f08:	4604      	mov	r4, r0
 8004f0a:	460d      	mov	r5, r1
 8004f0c:	f7fb fe00 	bl	8000b10 <__aeabi_d2iz>
 8004f10:	2200      	movs	r2, #0
 8004f12:	4607      	mov	r7, r0
 8004f14:	2300      	movs	r3, #0
 8004f16:	4620      	mov	r0, r4
 8004f18:	4629      	mov	r1, r5
 8004f1a:	f7fb fdbb 	bl	8000a94 <__aeabi_dcmplt>
 8004f1e:	b140      	cbz	r0, 8004f32 <_dtoa_r+0x16a>
 8004f20:	4638      	mov	r0, r7
 8004f22:	f7fb fadb 	bl	80004dc <__aeabi_i2d>
 8004f26:	4622      	mov	r2, r4
 8004f28:	462b      	mov	r3, r5
 8004f2a:	f7fb fda9 	bl	8000a80 <__aeabi_dcmpeq>
 8004f2e:	b900      	cbnz	r0, 8004f32 <_dtoa_r+0x16a>
 8004f30:	3f01      	subs	r7, #1
 8004f32:	2f16      	cmp	r7, #22
 8004f34:	d853      	bhi.n	8004fde <_dtoa_r+0x216>
 8004f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80050ac <_dtoa_r+0x2e4>)
 8004f3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb fda6 	bl	8000a94 <__aeabi_dcmplt>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d04a      	beq.n	8004fe2 <_dtoa_r+0x21a>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	3f01      	subs	r7, #1
 8004f50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f54:	1b9b      	subs	r3, r3, r6
 8004f56:	1e5a      	subs	r2, r3, #1
 8004f58:	bf46      	itte	mi
 8004f5a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004f5e:	2300      	movmi	r3, #0
 8004f60:	f04f 0800 	movpl.w	r8, #0
 8004f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f66:	bf48      	it	mi
 8004f68:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004f6a:	2f00      	cmp	r7, #0
 8004f6c:	db3b      	blt.n	8004fe6 <_dtoa_r+0x21e>
 8004f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f70:	970e      	str	r7, [sp, #56]	@ 0x38
 8004f72:	443b      	add	r3, r7
 8004f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f76:	2300      	movs	r3, #0
 8004f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f7c:	2b09      	cmp	r3, #9
 8004f7e:	d866      	bhi.n	800504e <_dtoa_r+0x286>
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	bfc4      	itt	gt
 8004f84:	3b04      	subgt	r3, #4
 8004f86:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004f88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f8a:	bfc8      	it	gt
 8004f8c:	2400      	movgt	r4, #0
 8004f8e:	f1a3 0302 	sub.w	r3, r3, #2
 8004f92:	bfd8      	it	le
 8004f94:	2401      	movle	r4, #1
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d864      	bhi.n	8005064 <_dtoa_r+0x29c>
 8004f9a:	e8df f003 	tbb	[pc, r3]
 8004f9e:	382b      	.short	0x382b
 8004fa0:	5636      	.short	0x5636
 8004fa2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004fa6:	441e      	add	r6, r3
 8004fa8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	bfc1      	itttt	gt
 8004fb0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004fb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004fb8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004fbc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004fc0:	bfd6      	itet	le
 8004fc2:	f1c3 0320 	rsble	r3, r3, #32
 8004fc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004fca:	fa04 f003 	lslle.w	r0, r4, r3
 8004fce:	f7fb fa75 	bl	80004bc <__aeabi_ui2d>
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004fd8:	3e01      	subs	r6, #1
 8004fda:	9212      	str	r2, [sp, #72]	@ 0x48
 8004fdc:	e775      	b.n	8004eca <_dtoa_r+0x102>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e7b6      	b.n	8004f50 <_dtoa_r+0x188>
 8004fe2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004fe4:	e7b5      	b.n	8004f52 <_dtoa_r+0x18a>
 8004fe6:	427b      	negs	r3, r7
 8004fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fea:	2300      	movs	r3, #0
 8004fec:	eba8 0807 	sub.w	r8, r8, r7
 8004ff0:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ff2:	e7c2      	b.n	8004f7a <_dtoa_r+0x1b2>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	dc35      	bgt.n	800506a <_dtoa_r+0x2a2>
 8004ffe:	2301      	movs	r3, #1
 8005000:	461a      	mov	r2, r3
 8005002:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005006:	9221      	str	r2, [sp, #132]	@ 0x84
 8005008:	e00b      	b.n	8005022 <_dtoa_r+0x25a>
 800500a:	2301      	movs	r3, #1
 800500c:	e7f3      	b.n	8004ff6 <_dtoa_r+0x22e>
 800500e:	2300      	movs	r3, #0
 8005010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	9308      	str	r3, [sp, #32]
 8005018:	3301      	adds	r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	9307      	str	r3, [sp, #28]
 800501e:	bfb8      	it	lt
 8005020:	2301      	movlt	r3, #1
 8005022:	2100      	movs	r1, #0
 8005024:	2204      	movs	r2, #4
 8005026:	f8db 001c 	ldr.w	r0, [fp, #28]
 800502a:	f102 0514 	add.w	r5, r2, #20
 800502e:	429d      	cmp	r5, r3
 8005030:	d91f      	bls.n	8005072 <_dtoa_r+0x2aa>
 8005032:	6041      	str	r1, [r0, #4]
 8005034:	4658      	mov	r0, fp
 8005036:	f000 fd8d 	bl	8005b54 <_Balloc>
 800503a:	4682      	mov	sl, r0
 800503c:	2800      	cmp	r0, #0
 800503e:	d139      	bne.n	80050b4 <_dtoa_r+0x2ec>
 8005040:	4602      	mov	r2, r0
 8005042:	f240 11af 	movw	r1, #431	@ 0x1af
 8005046:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <_dtoa_r+0x2e8>)
 8005048:	e6d2      	b.n	8004df0 <_dtoa_r+0x28>
 800504a:	2301      	movs	r3, #1
 800504c:	e7e0      	b.n	8005010 <_dtoa_r+0x248>
 800504e:	2401      	movs	r4, #1
 8005050:	2300      	movs	r3, #0
 8005052:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005054:	9320      	str	r3, [sp, #128]	@ 0x80
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	2200      	movs	r2, #0
 800505c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005060:	2312      	movs	r3, #18
 8005062:	e7d0      	b.n	8005006 <_dtoa_r+0x23e>
 8005064:	2301      	movs	r3, #1
 8005066:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005068:	e7f5      	b.n	8005056 <_dtoa_r+0x28e>
 800506a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800506c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005070:	e7d7      	b.n	8005022 <_dtoa_r+0x25a>
 8005072:	3101      	adds	r1, #1
 8005074:	0052      	lsls	r2, r2, #1
 8005076:	e7d8      	b.n	800502a <_dtoa_r+0x262>
 8005078:	636f4361 	.word	0x636f4361
 800507c:	3fd287a7 	.word	0x3fd287a7
 8005080:	8b60c8b3 	.word	0x8b60c8b3
 8005084:	3fc68a28 	.word	0x3fc68a28
 8005088:	509f79fb 	.word	0x509f79fb
 800508c:	3fd34413 	.word	0x3fd34413
 8005090:	080072d7 	.word	0x080072d7
 8005094:	080072ee 	.word	0x080072ee
 8005098:	7ff00000 	.word	0x7ff00000
 800509c:	080072d3 	.word	0x080072d3
 80050a0:	080072a7 	.word	0x080072a7
 80050a4:	080072a6 	.word	0x080072a6
 80050a8:	3ff80000 	.word	0x3ff80000
 80050ac:	080073e8 	.word	0x080073e8
 80050b0:	08007346 	.word	0x08007346
 80050b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80050b8:	6018      	str	r0, [r3, #0]
 80050ba:	9b07      	ldr	r3, [sp, #28]
 80050bc:	2b0e      	cmp	r3, #14
 80050be:	f200 80a4 	bhi.w	800520a <_dtoa_r+0x442>
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	f000 80a1 	beq.w	800520a <_dtoa_r+0x442>
 80050c8:	2f00      	cmp	r7, #0
 80050ca:	dd33      	ble.n	8005134 <_dtoa_r+0x36c>
 80050cc:	4b86      	ldr	r3, [pc, #536]	@ (80052e8 <_dtoa_r+0x520>)
 80050ce:	f007 020f 	and.w	r2, r7, #15
 80050d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050d6:	05f8      	lsls	r0, r7, #23
 80050d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80050e4:	d516      	bpl.n	8005114 <_dtoa_r+0x34c>
 80050e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050ea:	4b80      	ldr	r3, [pc, #512]	@ (80052ec <_dtoa_r+0x524>)
 80050ec:	2603      	movs	r6, #3
 80050ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050f2:	f7fb fb87 	bl	8000804 <__aeabi_ddiv>
 80050f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050fa:	f004 040f 	and.w	r4, r4, #15
 80050fe:	4d7b      	ldr	r5, [pc, #492]	@ (80052ec <_dtoa_r+0x524>)
 8005100:	b954      	cbnz	r4, 8005118 <_dtoa_r+0x350>
 8005102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800510a:	f7fb fb7b 	bl	8000804 <__aeabi_ddiv>
 800510e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005112:	e028      	b.n	8005166 <_dtoa_r+0x39e>
 8005114:	2602      	movs	r6, #2
 8005116:	e7f2      	b.n	80050fe <_dtoa_r+0x336>
 8005118:	07e1      	lsls	r1, r4, #31
 800511a:	d508      	bpl.n	800512e <_dtoa_r+0x366>
 800511c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005120:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005124:	f7fb fa44 	bl	80005b0 <__aeabi_dmul>
 8005128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800512c:	3601      	adds	r6, #1
 800512e:	1064      	asrs	r4, r4, #1
 8005130:	3508      	adds	r5, #8
 8005132:	e7e5      	b.n	8005100 <_dtoa_r+0x338>
 8005134:	f000 80d2 	beq.w	80052dc <_dtoa_r+0x514>
 8005138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800513c:	427c      	negs	r4, r7
 800513e:	4b6a      	ldr	r3, [pc, #424]	@ (80052e8 <_dtoa_r+0x520>)
 8005140:	f004 020f 	and.w	r2, r4, #15
 8005144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb fa30 	bl	80005b0 <__aeabi_dmul>
 8005150:	2602      	movs	r6, #2
 8005152:	2300      	movs	r3, #0
 8005154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005158:	4d64      	ldr	r5, [pc, #400]	@ (80052ec <_dtoa_r+0x524>)
 800515a:	1124      	asrs	r4, r4, #4
 800515c:	2c00      	cmp	r4, #0
 800515e:	f040 80b2 	bne.w	80052c6 <_dtoa_r+0x4fe>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d3      	bne.n	800510e <_dtoa_r+0x346>
 8005166:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800516a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80b7 	beq.w	80052e0 <_dtoa_r+0x518>
 8005172:	2200      	movs	r2, #0
 8005174:	4620      	mov	r0, r4
 8005176:	4629      	mov	r1, r5
 8005178:	4b5d      	ldr	r3, [pc, #372]	@ (80052f0 <_dtoa_r+0x528>)
 800517a:	f7fb fc8b 	bl	8000a94 <__aeabi_dcmplt>
 800517e:	2800      	cmp	r0, #0
 8005180:	f000 80ae 	beq.w	80052e0 <_dtoa_r+0x518>
 8005184:	9b07      	ldr	r3, [sp, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80aa 	beq.w	80052e0 <_dtoa_r+0x518>
 800518c:	9b08      	ldr	r3, [sp, #32]
 800518e:	2b00      	cmp	r3, #0
 8005190:	dd37      	ble.n	8005202 <_dtoa_r+0x43a>
 8005192:	1e7b      	subs	r3, r7, #1
 8005194:	4620      	mov	r0, r4
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	2200      	movs	r2, #0
 800519a:	4629      	mov	r1, r5
 800519c:	4b55      	ldr	r3, [pc, #340]	@ (80052f4 <_dtoa_r+0x52c>)
 800519e:	f7fb fa07 	bl	80005b0 <__aeabi_dmul>
 80051a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051a6:	9c08      	ldr	r4, [sp, #32]
 80051a8:	3601      	adds	r6, #1
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7fb f996 	bl	80004dc <__aeabi_i2d>
 80051b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051b4:	f7fb f9fc 	bl	80005b0 <__aeabi_dmul>
 80051b8:	2200      	movs	r2, #0
 80051ba:	4b4f      	ldr	r3, [pc, #316]	@ (80052f8 <_dtoa_r+0x530>)
 80051bc:	f7fb f842 	bl	8000244 <__adddf3>
 80051c0:	4605      	mov	r5, r0
 80051c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80051c6:	2c00      	cmp	r4, #0
 80051c8:	f040 809a 	bne.w	8005300 <_dtoa_r+0x538>
 80051cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051d0:	2200      	movs	r2, #0
 80051d2:	4b4a      	ldr	r3, [pc, #296]	@ (80052fc <_dtoa_r+0x534>)
 80051d4:	f7fb f834 	bl	8000240 <__aeabi_dsub>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051e0:	462a      	mov	r2, r5
 80051e2:	4633      	mov	r3, r6
 80051e4:	f7fb fc74 	bl	8000ad0 <__aeabi_dcmpgt>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	f040 828e 	bne.w	800570a <_dtoa_r+0x942>
 80051ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f2:	462a      	mov	r2, r5
 80051f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80051f8:	f7fb fc4c 	bl	8000a94 <__aeabi_dcmplt>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	f040 8127 	bne.w	8005450 <_dtoa_r+0x688>
 8005202:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005206:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800520a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800520c:	2b00      	cmp	r3, #0
 800520e:	f2c0 8163 	blt.w	80054d8 <_dtoa_r+0x710>
 8005212:	2f0e      	cmp	r7, #14
 8005214:	f300 8160 	bgt.w	80054d8 <_dtoa_r+0x710>
 8005218:	4b33      	ldr	r3, [pc, #204]	@ (80052e8 <_dtoa_r+0x520>)
 800521a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800521e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005222:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005226:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005228:	2b00      	cmp	r3, #0
 800522a:	da03      	bge.n	8005234 <_dtoa_r+0x46c>
 800522c:	9b07      	ldr	r3, [sp, #28]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f340 8100 	ble.w	8005434 <_dtoa_r+0x66c>
 8005234:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005238:	4656      	mov	r6, sl
 800523a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	f7fb fadf 	bl	8000804 <__aeabi_ddiv>
 8005246:	f7fb fc63 	bl	8000b10 <__aeabi_d2iz>
 800524a:	4680      	mov	r8, r0
 800524c:	f7fb f946 	bl	80004dc <__aeabi_i2d>
 8005250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005254:	f7fb f9ac 	bl	80005b0 <__aeabi_dmul>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fa ffee 	bl	8000240 <__aeabi_dsub>
 8005264:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005268:	9d07      	ldr	r5, [sp, #28]
 800526a:	f806 4b01 	strb.w	r4, [r6], #1
 800526e:	eba6 040a 	sub.w	r4, r6, sl
 8005272:	42a5      	cmp	r5, r4
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	f040 8116 	bne.w	80054a8 <_dtoa_r+0x6e0>
 800527c:	f7fa ffe2 	bl	8000244 <__adddf3>
 8005280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005284:	4604      	mov	r4, r0
 8005286:	460d      	mov	r5, r1
 8005288:	f7fb fc22 	bl	8000ad0 <__aeabi_dcmpgt>
 800528c:	2800      	cmp	r0, #0
 800528e:	f040 80f8 	bne.w	8005482 <_dtoa_r+0x6ba>
 8005292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f7fb fbf1 	bl	8000a80 <__aeabi_dcmpeq>
 800529e:	b118      	cbz	r0, 80052a8 <_dtoa_r+0x4e0>
 80052a0:	f018 0f01 	tst.w	r8, #1
 80052a4:	f040 80ed 	bne.w	8005482 <_dtoa_r+0x6ba>
 80052a8:	4649      	mov	r1, r9
 80052aa:	4658      	mov	r0, fp
 80052ac:	f000 fc92 	bl	8005bd4 <_Bfree>
 80052b0:	2300      	movs	r3, #0
 80052b2:	7033      	strb	r3, [r6, #0]
 80052b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80052b6:	3701      	adds	r7, #1
 80052b8:	601f      	str	r7, [r3, #0]
 80052ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8320 	beq.w	8005902 <_dtoa_r+0xb3a>
 80052c2:	601e      	str	r6, [r3, #0]
 80052c4:	e31d      	b.n	8005902 <_dtoa_r+0xb3a>
 80052c6:	07e2      	lsls	r2, r4, #31
 80052c8:	d505      	bpl.n	80052d6 <_dtoa_r+0x50e>
 80052ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052ce:	f7fb f96f 	bl	80005b0 <__aeabi_dmul>
 80052d2:	2301      	movs	r3, #1
 80052d4:	3601      	adds	r6, #1
 80052d6:	1064      	asrs	r4, r4, #1
 80052d8:	3508      	adds	r5, #8
 80052da:	e73f      	b.n	800515c <_dtoa_r+0x394>
 80052dc:	2602      	movs	r6, #2
 80052de:	e742      	b.n	8005166 <_dtoa_r+0x39e>
 80052e0:	9c07      	ldr	r4, [sp, #28]
 80052e2:	9704      	str	r7, [sp, #16]
 80052e4:	e761      	b.n	80051aa <_dtoa_r+0x3e2>
 80052e6:	bf00      	nop
 80052e8:	080073e8 	.word	0x080073e8
 80052ec:	080073c0 	.word	0x080073c0
 80052f0:	3ff00000 	.word	0x3ff00000
 80052f4:	40240000 	.word	0x40240000
 80052f8:	401c0000 	.word	0x401c0000
 80052fc:	40140000 	.word	0x40140000
 8005300:	4b70      	ldr	r3, [pc, #448]	@ (80054c4 <_dtoa_r+0x6fc>)
 8005302:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005304:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005308:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800530c:	4454      	add	r4, sl
 800530e:	2900      	cmp	r1, #0
 8005310:	d045      	beq.n	800539e <_dtoa_r+0x5d6>
 8005312:	2000      	movs	r0, #0
 8005314:	496c      	ldr	r1, [pc, #432]	@ (80054c8 <_dtoa_r+0x700>)
 8005316:	f7fb fa75 	bl	8000804 <__aeabi_ddiv>
 800531a:	4633      	mov	r3, r6
 800531c:	462a      	mov	r2, r5
 800531e:	f7fa ff8f 	bl	8000240 <__aeabi_dsub>
 8005322:	4656      	mov	r6, sl
 8005324:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800532c:	f7fb fbf0 	bl	8000b10 <__aeabi_d2iz>
 8005330:	4605      	mov	r5, r0
 8005332:	f7fb f8d3 	bl	80004dc <__aeabi_i2d>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800533e:	f7fa ff7f 	bl	8000240 <__aeabi_dsub>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	3530      	adds	r5, #48	@ 0x30
 8005348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800534c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005350:	f806 5b01 	strb.w	r5, [r6], #1
 8005354:	f7fb fb9e 	bl	8000a94 <__aeabi_dcmplt>
 8005358:	2800      	cmp	r0, #0
 800535a:	d163      	bne.n	8005424 <_dtoa_r+0x65c>
 800535c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005360:	2000      	movs	r0, #0
 8005362:	495a      	ldr	r1, [pc, #360]	@ (80054cc <_dtoa_r+0x704>)
 8005364:	f7fa ff6c 	bl	8000240 <__aeabi_dsub>
 8005368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800536c:	f7fb fb92 	bl	8000a94 <__aeabi_dcmplt>
 8005370:	2800      	cmp	r0, #0
 8005372:	f040 8087 	bne.w	8005484 <_dtoa_r+0x6bc>
 8005376:	42a6      	cmp	r6, r4
 8005378:	f43f af43 	beq.w	8005202 <_dtoa_r+0x43a>
 800537c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005380:	2200      	movs	r2, #0
 8005382:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <_dtoa_r+0x708>)
 8005384:	f7fb f914 	bl	80005b0 <__aeabi_dmul>
 8005388:	2200      	movs	r2, #0
 800538a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800538e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005392:	4b4f      	ldr	r3, [pc, #316]	@ (80054d0 <_dtoa_r+0x708>)
 8005394:	f7fb f90c 	bl	80005b0 <__aeabi_dmul>
 8005398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800539c:	e7c4      	b.n	8005328 <_dtoa_r+0x560>
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	f7fb f905 	bl	80005b0 <__aeabi_dmul>
 80053a6:	4656      	mov	r6, sl
 80053a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80053ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053b2:	f7fb fbad 	bl	8000b10 <__aeabi_d2iz>
 80053b6:	4605      	mov	r5, r0
 80053b8:	f7fb f890 	bl	80004dc <__aeabi_i2d>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c4:	f7fa ff3c 	bl	8000240 <__aeabi_dsub>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	3530      	adds	r5, #48	@ 0x30
 80053ce:	f806 5b01 	strb.w	r5, [r6], #1
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	d124      	bne.n	8005428 <_dtoa_r+0x660>
 80053de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80053e2:	4b39      	ldr	r3, [pc, #228]	@ (80054c8 <_dtoa_r+0x700>)
 80053e4:	f7fa ff2e 	bl	8000244 <__adddf3>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053f0:	f7fb fb6e 	bl	8000ad0 <__aeabi_dcmpgt>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d145      	bne.n	8005484 <_dtoa_r+0x6bc>
 80053f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053fc:	2000      	movs	r0, #0
 80053fe:	4932      	ldr	r1, [pc, #200]	@ (80054c8 <_dtoa_r+0x700>)
 8005400:	f7fa ff1e 	bl	8000240 <__aeabi_dsub>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540c:	f7fb fb42 	bl	8000a94 <__aeabi_dcmplt>
 8005410:	2800      	cmp	r0, #0
 8005412:	f43f aef6 	beq.w	8005202 <_dtoa_r+0x43a>
 8005416:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005418:	1e73      	subs	r3, r6, #1
 800541a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800541c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d0f8      	beq.n	8005416 <_dtoa_r+0x64e>
 8005424:	9f04      	ldr	r7, [sp, #16]
 8005426:	e73f      	b.n	80052a8 <_dtoa_r+0x4e0>
 8005428:	4b29      	ldr	r3, [pc, #164]	@ (80054d0 <_dtoa_r+0x708>)
 800542a:	f7fb f8c1 	bl	80005b0 <__aeabi_dmul>
 800542e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005432:	e7bc      	b.n	80053ae <_dtoa_r+0x5e6>
 8005434:	d10c      	bne.n	8005450 <_dtoa_r+0x688>
 8005436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800543a:	2200      	movs	r2, #0
 800543c:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <_dtoa_r+0x70c>)
 800543e:	f7fb f8b7 	bl	80005b0 <__aeabi_dmul>
 8005442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005446:	f7fb fb39 	bl	8000abc <__aeabi_dcmpge>
 800544a:	2800      	cmp	r0, #0
 800544c:	f000 815b 	beq.w	8005706 <_dtoa_r+0x93e>
 8005450:	2400      	movs	r4, #0
 8005452:	4625      	mov	r5, r4
 8005454:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005456:	4656      	mov	r6, sl
 8005458:	43db      	mvns	r3, r3
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	2700      	movs	r7, #0
 800545e:	4621      	mov	r1, r4
 8005460:	4658      	mov	r0, fp
 8005462:	f000 fbb7 	bl	8005bd4 <_Bfree>
 8005466:	2d00      	cmp	r5, #0
 8005468:	d0dc      	beq.n	8005424 <_dtoa_r+0x65c>
 800546a:	b12f      	cbz	r7, 8005478 <_dtoa_r+0x6b0>
 800546c:	42af      	cmp	r7, r5
 800546e:	d003      	beq.n	8005478 <_dtoa_r+0x6b0>
 8005470:	4639      	mov	r1, r7
 8005472:	4658      	mov	r0, fp
 8005474:	f000 fbae 	bl	8005bd4 <_Bfree>
 8005478:	4629      	mov	r1, r5
 800547a:	4658      	mov	r0, fp
 800547c:	f000 fbaa 	bl	8005bd4 <_Bfree>
 8005480:	e7d0      	b.n	8005424 <_dtoa_r+0x65c>
 8005482:	9704      	str	r7, [sp, #16]
 8005484:	4633      	mov	r3, r6
 8005486:	461e      	mov	r6, r3
 8005488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800548c:	2a39      	cmp	r2, #57	@ 0x39
 800548e:	d107      	bne.n	80054a0 <_dtoa_r+0x6d8>
 8005490:	459a      	cmp	sl, r3
 8005492:	d1f8      	bne.n	8005486 <_dtoa_r+0x6be>
 8005494:	9a04      	ldr	r2, [sp, #16]
 8005496:	3201      	adds	r2, #1
 8005498:	9204      	str	r2, [sp, #16]
 800549a:	2230      	movs	r2, #48	@ 0x30
 800549c:	f88a 2000 	strb.w	r2, [sl]
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	3201      	adds	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e7bd      	b.n	8005424 <_dtoa_r+0x65c>
 80054a8:	2200      	movs	r2, #0
 80054aa:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <_dtoa_r+0x708>)
 80054ac:	f7fb f880 	bl	80005b0 <__aeabi_dmul>
 80054b0:	2200      	movs	r2, #0
 80054b2:	2300      	movs	r3, #0
 80054b4:	4604      	mov	r4, r0
 80054b6:	460d      	mov	r5, r1
 80054b8:	f7fb fae2 	bl	8000a80 <__aeabi_dcmpeq>
 80054bc:	2800      	cmp	r0, #0
 80054be:	f43f aebc 	beq.w	800523a <_dtoa_r+0x472>
 80054c2:	e6f1      	b.n	80052a8 <_dtoa_r+0x4e0>
 80054c4:	080073e8 	.word	0x080073e8
 80054c8:	3fe00000 	.word	0x3fe00000
 80054cc:	3ff00000 	.word	0x3ff00000
 80054d0:	40240000 	.word	0x40240000
 80054d4:	40140000 	.word	0x40140000
 80054d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80054da:	2a00      	cmp	r2, #0
 80054dc:	f000 80db 	beq.w	8005696 <_dtoa_r+0x8ce>
 80054e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80054e2:	2a01      	cmp	r2, #1
 80054e4:	f300 80bf 	bgt.w	8005666 <_dtoa_r+0x89e>
 80054e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	f000 80b7 	beq.w	800565e <_dtoa_r+0x896>
 80054f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80054f4:	4646      	mov	r6, r8
 80054f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054fa:	2101      	movs	r1, #1
 80054fc:	441a      	add	r2, r3
 80054fe:	4658      	mov	r0, fp
 8005500:	4498      	add	r8, r3
 8005502:	9209      	str	r2, [sp, #36]	@ 0x24
 8005504:	f000 fc1a 	bl	8005d3c <__i2b>
 8005508:	4605      	mov	r5, r0
 800550a:	b15e      	cbz	r6, 8005524 <_dtoa_r+0x75c>
 800550c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	dd08      	ble.n	8005524 <_dtoa_r+0x75c>
 8005512:	42b3      	cmp	r3, r6
 8005514:	bfa8      	it	ge
 8005516:	4633      	movge	r3, r6
 8005518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800551a:	eba8 0803 	sub.w	r8, r8, r3
 800551e:	1af6      	subs	r6, r6, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	9309      	str	r3, [sp, #36]	@ 0x24
 8005524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005526:	b1f3      	cbz	r3, 8005566 <_dtoa_r+0x79e>
 8005528:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80b7 	beq.w	800569e <_dtoa_r+0x8d6>
 8005530:	b18c      	cbz	r4, 8005556 <_dtoa_r+0x78e>
 8005532:	4629      	mov	r1, r5
 8005534:	4622      	mov	r2, r4
 8005536:	4658      	mov	r0, fp
 8005538:	f000 fcbe 	bl	8005eb8 <__pow5mult>
 800553c:	464a      	mov	r2, r9
 800553e:	4601      	mov	r1, r0
 8005540:	4605      	mov	r5, r0
 8005542:	4658      	mov	r0, fp
 8005544:	f000 fc10 	bl	8005d68 <__multiply>
 8005548:	4649      	mov	r1, r9
 800554a:	9004      	str	r0, [sp, #16]
 800554c:	4658      	mov	r0, fp
 800554e:	f000 fb41 	bl	8005bd4 <_Bfree>
 8005552:	9b04      	ldr	r3, [sp, #16]
 8005554:	4699      	mov	r9, r3
 8005556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005558:	1b1a      	subs	r2, r3, r4
 800555a:	d004      	beq.n	8005566 <_dtoa_r+0x79e>
 800555c:	4649      	mov	r1, r9
 800555e:	4658      	mov	r0, fp
 8005560:	f000 fcaa 	bl	8005eb8 <__pow5mult>
 8005564:	4681      	mov	r9, r0
 8005566:	2101      	movs	r1, #1
 8005568:	4658      	mov	r0, fp
 800556a:	f000 fbe7 	bl	8005d3c <__i2b>
 800556e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005570:	4604      	mov	r4, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 81c9 	beq.w	800590a <_dtoa_r+0xb42>
 8005578:	461a      	mov	r2, r3
 800557a:	4601      	mov	r1, r0
 800557c:	4658      	mov	r0, fp
 800557e:	f000 fc9b 	bl	8005eb8 <__pow5mult>
 8005582:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005584:	4604      	mov	r4, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	f300 808f 	bgt.w	80056aa <_dtoa_r+0x8e2>
 800558c:	9b02      	ldr	r3, [sp, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 8087 	bne.w	80056a2 <_dtoa_r+0x8da>
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800559a:	2b00      	cmp	r3, #0
 800559c:	f040 8083 	bne.w	80056a6 <_dtoa_r+0x8de>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055a6:	0d1b      	lsrs	r3, r3, #20
 80055a8:	051b      	lsls	r3, r3, #20
 80055aa:	b12b      	cbz	r3, 80055b8 <_dtoa_r+0x7f0>
 80055ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ae:	f108 0801 	add.w	r8, r8, #1
 80055b2:	3301      	adds	r3, #1
 80055b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b6:	2301      	movs	r3, #1
 80055b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 81aa 	beq.w	8005916 <_dtoa_r+0xb4e>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055c8:	6918      	ldr	r0, [r3, #16]
 80055ca:	f000 fb6b 	bl	8005ca4 <__hi0bits>
 80055ce:	f1c0 0020 	rsb	r0, r0, #32
 80055d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d4:	4418      	add	r0, r3
 80055d6:	f010 001f 	ands.w	r0, r0, #31
 80055da:	d071      	beq.n	80056c0 <_dtoa_r+0x8f8>
 80055dc:	f1c0 0320 	rsb	r3, r0, #32
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	dd65      	ble.n	80056b0 <_dtoa_r+0x8e8>
 80055e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055e6:	f1c0 001c 	rsb	r0, r0, #28
 80055ea:	4403      	add	r3, r0
 80055ec:	4480      	add	r8, r0
 80055ee:	4406      	add	r6, r0
 80055f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f2:	f1b8 0f00 	cmp.w	r8, #0
 80055f6:	dd05      	ble.n	8005604 <_dtoa_r+0x83c>
 80055f8:	4649      	mov	r1, r9
 80055fa:	4642      	mov	r2, r8
 80055fc:	4658      	mov	r0, fp
 80055fe:	f000 fcb5 	bl	8005f6c <__lshift>
 8005602:	4681      	mov	r9, r0
 8005604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	dd05      	ble.n	8005616 <_dtoa_r+0x84e>
 800560a:	4621      	mov	r1, r4
 800560c:	461a      	mov	r2, r3
 800560e:	4658      	mov	r0, fp
 8005610:	f000 fcac 	bl	8005f6c <__lshift>
 8005614:	4604      	mov	r4, r0
 8005616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d053      	beq.n	80056c4 <_dtoa_r+0x8fc>
 800561c:	4621      	mov	r1, r4
 800561e:	4648      	mov	r0, r9
 8005620:	f000 fd10 	bl	8006044 <__mcmp>
 8005624:	2800      	cmp	r0, #0
 8005626:	da4d      	bge.n	80056c4 <_dtoa_r+0x8fc>
 8005628:	1e7b      	subs	r3, r7, #1
 800562a:	4649      	mov	r1, r9
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	220a      	movs	r2, #10
 8005630:	2300      	movs	r3, #0
 8005632:	4658      	mov	r0, fp
 8005634:	f000 faf0 	bl	8005c18 <__multadd>
 8005638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800563a:	4681      	mov	r9, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 816c 	beq.w	800591a <_dtoa_r+0xb52>
 8005642:	2300      	movs	r3, #0
 8005644:	4629      	mov	r1, r5
 8005646:	220a      	movs	r2, #10
 8005648:	4658      	mov	r0, fp
 800564a:	f000 fae5 	bl	8005c18 <__multadd>
 800564e:	9b08      	ldr	r3, [sp, #32]
 8005650:	4605      	mov	r5, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	dc61      	bgt.n	800571a <_dtoa_r+0x952>
 8005656:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005658:	2b02      	cmp	r3, #2
 800565a:	dc3b      	bgt.n	80056d4 <_dtoa_r+0x90c>
 800565c:	e05d      	b.n	800571a <_dtoa_r+0x952>
 800565e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005660:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005664:	e746      	b.n	80054f4 <_dtoa_r+0x72c>
 8005666:	9b07      	ldr	r3, [sp, #28]
 8005668:	1e5c      	subs	r4, r3, #1
 800566a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800566c:	42a3      	cmp	r3, r4
 800566e:	bfbf      	itttt	lt
 8005670:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005672:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005674:	1ae3      	sublt	r3, r4, r3
 8005676:	18d2      	addlt	r2, r2, r3
 8005678:	bfa8      	it	ge
 800567a:	1b1c      	subge	r4, r3, r4
 800567c:	9b07      	ldr	r3, [sp, #28]
 800567e:	bfbe      	ittt	lt
 8005680:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005682:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005684:	2400      	movlt	r4, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	bfb5      	itete	lt
 800568a:	eba8 0603 	sublt.w	r6, r8, r3
 800568e:	4646      	movge	r6, r8
 8005690:	2300      	movlt	r3, #0
 8005692:	9b07      	ldrge	r3, [sp, #28]
 8005694:	e730      	b.n	80054f8 <_dtoa_r+0x730>
 8005696:	4646      	mov	r6, r8
 8005698:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800569a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800569c:	e735      	b.n	800550a <_dtoa_r+0x742>
 800569e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056a0:	e75c      	b.n	800555c <_dtoa_r+0x794>
 80056a2:	2300      	movs	r3, #0
 80056a4:	e788      	b.n	80055b8 <_dtoa_r+0x7f0>
 80056a6:	9b02      	ldr	r3, [sp, #8]
 80056a8:	e786      	b.n	80055b8 <_dtoa_r+0x7f0>
 80056aa:	2300      	movs	r3, #0
 80056ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80056ae:	e788      	b.n	80055c2 <_dtoa_r+0x7fa>
 80056b0:	d09f      	beq.n	80055f2 <_dtoa_r+0x82a>
 80056b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056b4:	331c      	adds	r3, #28
 80056b6:	441a      	add	r2, r3
 80056b8:	4498      	add	r8, r3
 80056ba:	441e      	add	r6, r3
 80056bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80056be:	e798      	b.n	80055f2 <_dtoa_r+0x82a>
 80056c0:	4603      	mov	r3, r0
 80056c2:	e7f6      	b.n	80056b2 <_dtoa_r+0x8ea>
 80056c4:	9b07      	ldr	r3, [sp, #28]
 80056c6:	9704      	str	r7, [sp, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	dc20      	bgt.n	800570e <_dtoa_r+0x946>
 80056cc:	9308      	str	r3, [sp, #32]
 80056ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	dd1e      	ble.n	8005712 <_dtoa_r+0x94a>
 80056d4:	9b08      	ldr	r3, [sp, #32]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f47f aebc 	bne.w	8005454 <_dtoa_r+0x68c>
 80056dc:	4621      	mov	r1, r4
 80056de:	2205      	movs	r2, #5
 80056e0:	4658      	mov	r0, fp
 80056e2:	f000 fa99 	bl	8005c18 <__multadd>
 80056e6:	4601      	mov	r1, r0
 80056e8:	4604      	mov	r4, r0
 80056ea:	4648      	mov	r0, r9
 80056ec:	f000 fcaa 	bl	8006044 <__mcmp>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	f77f aeaf 	ble.w	8005454 <_dtoa_r+0x68c>
 80056f6:	2331      	movs	r3, #49	@ 0x31
 80056f8:	4656      	mov	r6, sl
 80056fa:	f806 3b01 	strb.w	r3, [r6], #1
 80056fe:	9b04      	ldr	r3, [sp, #16]
 8005700:	3301      	adds	r3, #1
 8005702:	9304      	str	r3, [sp, #16]
 8005704:	e6aa      	b.n	800545c <_dtoa_r+0x694>
 8005706:	9c07      	ldr	r4, [sp, #28]
 8005708:	9704      	str	r7, [sp, #16]
 800570a:	4625      	mov	r5, r4
 800570c:	e7f3      	b.n	80056f6 <_dtoa_r+0x92e>
 800570e:	9b07      	ldr	r3, [sp, #28]
 8005710:	9308      	str	r3, [sp, #32]
 8005712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8104 	beq.w	8005922 <_dtoa_r+0xb5a>
 800571a:	2e00      	cmp	r6, #0
 800571c:	dd05      	ble.n	800572a <_dtoa_r+0x962>
 800571e:	4629      	mov	r1, r5
 8005720:	4632      	mov	r2, r6
 8005722:	4658      	mov	r0, fp
 8005724:	f000 fc22 	bl	8005f6c <__lshift>
 8005728:	4605      	mov	r5, r0
 800572a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800572c:	2b00      	cmp	r3, #0
 800572e:	d05a      	beq.n	80057e6 <_dtoa_r+0xa1e>
 8005730:	4658      	mov	r0, fp
 8005732:	6869      	ldr	r1, [r5, #4]
 8005734:	f000 fa0e 	bl	8005b54 <_Balloc>
 8005738:	4606      	mov	r6, r0
 800573a:	b928      	cbnz	r0, 8005748 <_dtoa_r+0x980>
 800573c:	4602      	mov	r2, r0
 800573e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005742:	4b83      	ldr	r3, [pc, #524]	@ (8005950 <_dtoa_r+0xb88>)
 8005744:	f7ff bb54 	b.w	8004df0 <_dtoa_r+0x28>
 8005748:	692a      	ldr	r2, [r5, #16]
 800574a:	f105 010c 	add.w	r1, r5, #12
 800574e:	3202      	adds	r2, #2
 8005750:	0092      	lsls	r2, r2, #2
 8005752:	300c      	adds	r0, #12
 8005754:	f000 ffa8 	bl	80066a8 <memcpy>
 8005758:	2201      	movs	r2, #1
 800575a:	4631      	mov	r1, r6
 800575c:	4658      	mov	r0, fp
 800575e:	f000 fc05 	bl	8005f6c <__lshift>
 8005762:	462f      	mov	r7, r5
 8005764:	4605      	mov	r5, r0
 8005766:	f10a 0301 	add.w	r3, sl, #1
 800576a:	9307      	str	r3, [sp, #28]
 800576c:	9b08      	ldr	r3, [sp, #32]
 800576e:	4453      	add	r3, sl
 8005770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005772:	9b02      	ldr	r3, [sp, #8]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	930a      	str	r3, [sp, #40]	@ 0x28
 800577a:	9b07      	ldr	r3, [sp, #28]
 800577c:	4621      	mov	r1, r4
 800577e:	3b01      	subs	r3, #1
 8005780:	4648      	mov	r0, r9
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	f7ff fa97 	bl	8004cb6 <quorem>
 8005788:	4639      	mov	r1, r7
 800578a:	9008      	str	r0, [sp, #32]
 800578c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005790:	4648      	mov	r0, r9
 8005792:	f000 fc57 	bl	8006044 <__mcmp>
 8005796:	462a      	mov	r2, r5
 8005798:	9009      	str	r0, [sp, #36]	@ 0x24
 800579a:	4621      	mov	r1, r4
 800579c:	4658      	mov	r0, fp
 800579e:	f000 fc6d 	bl	800607c <__mdiff>
 80057a2:	68c2      	ldr	r2, [r0, #12]
 80057a4:	4606      	mov	r6, r0
 80057a6:	bb02      	cbnz	r2, 80057ea <_dtoa_r+0xa22>
 80057a8:	4601      	mov	r1, r0
 80057aa:	4648      	mov	r0, r9
 80057ac:	f000 fc4a 	bl	8006044 <__mcmp>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4631      	mov	r1, r6
 80057b4:	4658      	mov	r0, fp
 80057b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80057b8:	f000 fa0c 	bl	8005bd4 <_Bfree>
 80057bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80057c0:	9e07      	ldr	r6, [sp, #28]
 80057c2:	ea43 0102 	orr.w	r1, r3, r2
 80057c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057c8:	4319      	orrs	r1, r3
 80057ca:	d110      	bne.n	80057ee <_dtoa_r+0xa26>
 80057cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057d0:	d029      	beq.n	8005826 <_dtoa_r+0xa5e>
 80057d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dd02      	ble.n	80057de <_dtoa_r+0xa16>
 80057d8:	9b08      	ldr	r3, [sp, #32]
 80057da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80057de:	9b02      	ldr	r3, [sp, #8]
 80057e0:	f883 8000 	strb.w	r8, [r3]
 80057e4:	e63b      	b.n	800545e <_dtoa_r+0x696>
 80057e6:	4628      	mov	r0, r5
 80057e8:	e7bb      	b.n	8005762 <_dtoa_r+0x99a>
 80057ea:	2201      	movs	r2, #1
 80057ec:	e7e1      	b.n	80057b2 <_dtoa_r+0x9ea>
 80057ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	db04      	blt.n	80057fe <_dtoa_r+0xa36>
 80057f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80057f6:	430b      	orrs	r3, r1
 80057f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057fa:	430b      	orrs	r3, r1
 80057fc:	d120      	bne.n	8005840 <_dtoa_r+0xa78>
 80057fe:	2a00      	cmp	r2, #0
 8005800:	dded      	ble.n	80057de <_dtoa_r+0xa16>
 8005802:	4649      	mov	r1, r9
 8005804:	2201      	movs	r2, #1
 8005806:	4658      	mov	r0, fp
 8005808:	f000 fbb0 	bl	8005f6c <__lshift>
 800580c:	4621      	mov	r1, r4
 800580e:	4681      	mov	r9, r0
 8005810:	f000 fc18 	bl	8006044 <__mcmp>
 8005814:	2800      	cmp	r0, #0
 8005816:	dc03      	bgt.n	8005820 <_dtoa_r+0xa58>
 8005818:	d1e1      	bne.n	80057de <_dtoa_r+0xa16>
 800581a:	f018 0f01 	tst.w	r8, #1
 800581e:	d0de      	beq.n	80057de <_dtoa_r+0xa16>
 8005820:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005824:	d1d8      	bne.n	80057d8 <_dtoa_r+0xa10>
 8005826:	2339      	movs	r3, #57	@ 0x39
 8005828:	9a02      	ldr	r2, [sp, #8]
 800582a:	7013      	strb	r3, [r2, #0]
 800582c:	4633      	mov	r3, r6
 800582e:	461e      	mov	r6, r3
 8005830:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005834:	3b01      	subs	r3, #1
 8005836:	2a39      	cmp	r2, #57	@ 0x39
 8005838:	d052      	beq.n	80058e0 <_dtoa_r+0xb18>
 800583a:	3201      	adds	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e60e      	b.n	800545e <_dtoa_r+0x696>
 8005840:	2a00      	cmp	r2, #0
 8005842:	dd07      	ble.n	8005854 <_dtoa_r+0xa8c>
 8005844:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005848:	d0ed      	beq.n	8005826 <_dtoa_r+0xa5e>
 800584a:	9a02      	ldr	r2, [sp, #8]
 800584c:	f108 0301 	add.w	r3, r8, #1
 8005850:	7013      	strb	r3, [r2, #0]
 8005852:	e604      	b.n	800545e <_dtoa_r+0x696>
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	9a07      	ldr	r2, [sp, #28]
 8005858:	f803 8c01 	strb.w	r8, [r3, #-1]
 800585c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800585e:	4293      	cmp	r3, r2
 8005860:	d028      	beq.n	80058b4 <_dtoa_r+0xaec>
 8005862:	4649      	mov	r1, r9
 8005864:	2300      	movs	r3, #0
 8005866:	220a      	movs	r2, #10
 8005868:	4658      	mov	r0, fp
 800586a:	f000 f9d5 	bl	8005c18 <__multadd>
 800586e:	42af      	cmp	r7, r5
 8005870:	4681      	mov	r9, r0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	f04f 020a 	mov.w	r2, #10
 800587a:	4639      	mov	r1, r7
 800587c:	4658      	mov	r0, fp
 800587e:	d107      	bne.n	8005890 <_dtoa_r+0xac8>
 8005880:	f000 f9ca 	bl	8005c18 <__multadd>
 8005884:	4607      	mov	r7, r0
 8005886:	4605      	mov	r5, r0
 8005888:	9b07      	ldr	r3, [sp, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	9307      	str	r3, [sp, #28]
 800588e:	e774      	b.n	800577a <_dtoa_r+0x9b2>
 8005890:	f000 f9c2 	bl	8005c18 <__multadd>
 8005894:	4629      	mov	r1, r5
 8005896:	4607      	mov	r7, r0
 8005898:	2300      	movs	r3, #0
 800589a:	220a      	movs	r2, #10
 800589c:	4658      	mov	r0, fp
 800589e:	f000 f9bb 	bl	8005c18 <__multadd>
 80058a2:	4605      	mov	r5, r0
 80058a4:	e7f0      	b.n	8005888 <_dtoa_r+0xac0>
 80058a6:	9b08      	ldr	r3, [sp, #32]
 80058a8:	2700      	movs	r7, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bfcc      	ite	gt
 80058ae:	461e      	movgt	r6, r3
 80058b0:	2601      	movle	r6, #1
 80058b2:	4456      	add	r6, sl
 80058b4:	4649      	mov	r1, r9
 80058b6:	2201      	movs	r2, #1
 80058b8:	4658      	mov	r0, fp
 80058ba:	f000 fb57 	bl	8005f6c <__lshift>
 80058be:	4621      	mov	r1, r4
 80058c0:	4681      	mov	r9, r0
 80058c2:	f000 fbbf 	bl	8006044 <__mcmp>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	dcb0      	bgt.n	800582c <_dtoa_r+0xa64>
 80058ca:	d102      	bne.n	80058d2 <_dtoa_r+0xb0a>
 80058cc:	f018 0f01 	tst.w	r8, #1
 80058d0:	d1ac      	bne.n	800582c <_dtoa_r+0xa64>
 80058d2:	4633      	mov	r3, r6
 80058d4:	461e      	mov	r6, r3
 80058d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058da:	2a30      	cmp	r2, #48	@ 0x30
 80058dc:	d0fa      	beq.n	80058d4 <_dtoa_r+0xb0c>
 80058de:	e5be      	b.n	800545e <_dtoa_r+0x696>
 80058e0:	459a      	cmp	sl, r3
 80058e2:	d1a4      	bne.n	800582e <_dtoa_r+0xa66>
 80058e4:	9b04      	ldr	r3, [sp, #16]
 80058e6:	3301      	adds	r3, #1
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	2331      	movs	r3, #49	@ 0x31
 80058ec:	f88a 3000 	strb.w	r3, [sl]
 80058f0:	e5b5      	b.n	800545e <_dtoa_r+0x696>
 80058f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005954 <_dtoa_r+0xb8c>
 80058f8:	b11b      	cbz	r3, 8005902 <_dtoa_r+0xb3a>
 80058fa:	f10a 0308 	add.w	r3, sl, #8
 80058fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4650      	mov	r0, sl
 8005904:	b017      	add	sp, #92	@ 0x5c
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800590c:	2b01      	cmp	r3, #1
 800590e:	f77f ae3d 	ble.w	800558c <_dtoa_r+0x7c4>
 8005912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005914:	930a      	str	r3, [sp, #40]	@ 0x28
 8005916:	2001      	movs	r0, #1
 8005918:	e65b      	b.n	80055d2 <_dtoa_r+0x80a>
 800591a:	9b08      	ldr	r3, [sp, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f77f aed6 	ble.w	80056ce <_dtoa_r+0x906>
 8005922:	4656      	mov	r6, sl
 8005924:	4621      	mov	r1, r4
 8005926:	4648      	mov	r0, r9
 8005928:	f7ff f9c5 	bl	8004cb6 <quorem>
 800592c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005930:	9b08      	ldr	r3, [sp, #32]
 8005932:	f806 8b01 	strb.w	r8, [r6], #1
 8005936:	eba6 020a 	sub.w	r2, r6, sl
 800593a:	4293      	cmp	r3, r2
 800593c:	ddb3      	ble.n	80058a6 <_dtoa_r+0xade>
 800593e:	4649      	mov	r1, r9
 8005940:	2300      	movs	r3, #0
 8005942:	220a      	movs	r2, #10
 8005944:	4658      	mov	r0, fp
 8005946:	f000 f967 	bl	8005c18 <__multadd>
 800594a:	4681      	mov	r9, r0
 800594c:	e7ea      	b.n	8005924 <_dtoa_r+0xb5c>
 800594e:	bf00      	nop
 8005950:	08007346 	.word	0x08007346
 8005954:	080072ca 	.word	0x080072ca

08005958 <_free_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4605      	mov	r5, r0
 800595c:	2900      	cmp	r1, #0
 800595e:	d040      	beq.n	80059e2 <_free_r+0x8a>
 8005960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005964:	1f0c      	subs	r4, r1, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	bfb8      	it	lt
 800596a:	18e4      	addlt	r4, r4, r3
 800596c:	f000 f8e6 	bl	8005b3c <__malloc_lock>
 8005970:	4a1c      	ldr	r2, [pc, #112]	@ (80059e4 <_free_r+0x8c>)
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	b933      	cbnz	r3, 8005984 <_free_r+0x2c>
 8005976:	6063      	str	r3, [r4, #4]
 8005978:	6014      	str	r4, [r2, #0]
 800597a:	4628      	mov	r0, r5
 800597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005980:	f000 b8e2 	b.w	8005b48 <__malloc_unlock>
 8005984:	42a3      	cmp	r3, r4
 8005986:	d908      	bls.n	800599a <_free_r+0x42>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	1821      	adds	r1, r4, r0
 800598c:	428b      	cmp	r3, r1
 800598e:	bf01      	itttt	eq
 8005990:	6819      	ldreq	r1, [r3, #0]
 8005992:	685b      	ldreq	r3, [r3, #4]
 8005994:	1809      	addeq	r1, r1, r0
 8005996:	6021      	streq	r1, [r4, #0]
 8005998:	e7ed      	b.n	8005976 <_free_r+0x1e>
 800599a:	461a      	mov	r2, r3
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b10b      	cbz	r3, 80059a4 <_free_r+0x4c>
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d9fa      	bls.n	800599a <_free_r+0x42>
 80059a4:	6811      	ldr	r1, [r2, #0]
 80059a6:	1850      	adds	r0, r2, r1
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d10b      	bne.n	80059c4 <_free_r+0x6c>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	4401      	add	r1, r0
 80059b0:	1850      	adds	r0, r2, r1
 80059b2:	4283      	cmp	r3, r0
 80059b4:	6011      	str	r1, [r2, #0]
 80059b6:	d1e0      	bne.n	800597a <_free_r+0x22>
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4408      	add	r0, r1
 80059be:	6010      	str	r0, [r2, #0]
 80059c0:	6053      	str	r3, [r2, #4]
 80059c2:	e7da      	b.n	800597a <_free_r+0x22>
 80059c4:	d902      	bls.n	80059cc <_free_r+0x74>
 80059c6:	230c      	movs	r3, #12
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	e7d6      	b.n	800597a <_free_r+0x22>
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	1821      	adds	r1, r4, r0
 80059d0:	428b      	cmp	r3, r1
 80059d2:	bf01      	itttt	eq
 80059d4:	6819      	ldreq	r1, [r3, #0]
 80059d6:	685b      	ldreq	r3, [r3, #4]
 80059d8:	1809      	addeq	r1, r1, r0
 80059da:	6021      	streq	r1, [r4, #0]
 80059dc:	6063      	str	r3, [r4, #4]
 80059de:	6054      	str	r4, [r2, #4]
 80059e0:	e7cb      	b.n	800597a <_free_r+0x22>
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000450 	.word	0x20000450

080059e8 <malloc>:
 80059e8:	4b02      	ldr	r3, [pc, #8]	@ (80059f4 <malloc+0xc>)
 80059ea:	4601      	mov	r1, r0
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	f000 b825 	b.w	8005a3c <_malloc_r>
 80059f2:	bf00      	nop
 80059f4:	20000018 	.word	0x20000018

080059f8 <sbrk_aligned>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005a38 <sbrk_aligned+0x40>)
 80059fc:	460c      	mov	r4, r1
 80059fe:	6831      	ldr	r1, [r6, #0]
 8005a00:	4605      	mov	r5, r0
 8005a02:	b911      	cbnz	r1, 8005a0a <sbrk_aligned+0x12>
 8005a04:	f000 fe40 	bl	8006688 <_sbrk_r>
 8005a08:	6030      	str	r0, [r6, #0]
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f000 fe3b 	bl	8006688 <_sbrk_r>
 8005a12:	1c43      	adds	r3, r0, #1
 8005a14:	d103      	bne.n	8005a1e <sbrk_aligned+0x26>
 8005a16:	f04f 34ff 	mov.w	r4, #4294967295
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	1cc4      	adds	r4, r0, #3
 8005a20:	f024 0403 	bic.w	r4, r4, #3
 8005a24:	42a0      	cmp	r0, r4
 8005a26:	d0f8      	beq.n	8005a1a <sbrk_aligned+0x22>
 8005a28:	1a21      	subs	r1, r4, r0
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 fe2c 	bl	8006688 <_sbrk_r>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d1f2      	bne.n	8005a1a <sbrk_aligned+0x22>
 8005a34:	e7ef      	b.n	8005a16 <sbrk_aligned+0x1e>
 8005a36:	bf00      	nop
 8005a38:	2000044c 	.word	0x2000044c

08005a3c <_malloc_r>:
 8005a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a40:	1ccd      	adds	r5, r1, #3
 8005a42:	f025 0503 	bic.w	r5, r5, #3
 8005a46:	3508      	adds	r5, #8
 8005a48:	2d0c      	cmp	r5, #12
 8005a4a:	bf38      	it	cc
 8005a4c:	250c      	movcc	r5, #12
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	4606      	mov	r6, r0
 8005a52:	db01      	blt.n	8005a58 <_malloc_r+0x1c>
 8005a54:	42a9      	cmp	r1, r5
 8005a56:	d904      	bls.n	8005a62 <_malloc_r+0x26>
 8005a58:	230c      	movs	r3, #12
 8005a5a:	6033      	str	r3, [r6, #0]
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b38 <_malloc_r+0xfc>
 8005a66:	f000 f869 	bl	8005b3c <__malloc_lock>
 8005a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a6e:	461c      	mov	r4, r3
 8005a70:	bb44      	cbnz	r4, 8005ac4 <_malloc_r+0x88>
 8005a72:	4629      	mov	r1, r5
 8005a74:	4630      	mov	r0, r6
 8005a76:	f7ff ffbf 	bl	80059f8 <sbrk_aligned>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	d158      	bne.n	8005b32 <_malloc_r+0xf6>
 8005a80:	f8d8 4000 	ldr.w	r4, [r8]
 8005a84:	4627      	mov	r7, r4
 8005a86:	2f00      	cmp	r7, #0
 8005a88:	d143      	bne.n	8005b12 <_malloc_r+0xd6>
 8005a8a:	2c00      	cmp	r4, #0
 8005a8c:	d04b      	beq.n	8005b26 <_malloc_r+0xea>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	4639      	mov	r1, r7
 8005a92:	4630      	mov	r0, r6
 8005a94:	eb04 0903 	add.w	r9, r4, r3
 8005a98:	f000 fdf6 	bl	8006688 <_sbrk_r>
 8005a9c:	4581      	cmp	r9, r0
 8005a9e:	d142      	bne.n	8005b26 <_malloc_r+0xea>
 8005aa0:	6821      	ldr	r1, [r4, #0]
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	1a6d      	subs	r5, r5, r1
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	f7ff ffa6 	bl	80059f8 <sbrk_aligned>
 8005aac:	3001      	adds	r0, #1
 8005aae:	d03a      	beq.n	8005b26 <_malloc_r+0xea>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	442b      	add	r3, r5
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	bb62      	cbnz	r2, 8005b18 <_malloc_r+0xdc>
 8005abe:	f8c8 7000 	str.w	r7, [r8]
 8005ac2:	e00f      	b.n	8005ae4 <_malloc_r+0xa8>
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	1b52      	subs	r2, r2, r5
 8005ac8:	d420      	bmi.n	8005b0c <_malloc_r+0xd0>
 8005aca:	2a0b      	cmp	r2, #11
 8005acc:	d917      	bls.n	8005afe <_malloc_r+0xc2>
 8005ace:	1961      	adds	r1, r4, r5
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	6025      	str	r5, [r4, #0]
 8005ad4:	bf18      	it	ne
 8005ad6:	6059      	strne	r1, [r3, #4]
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	bf08      	it	eq
 8005adc:	f8c8 1000 	streq.w	r1, [r8]
 8005ae0:	5162      	str	r2, [r4, r5]
 8005ae2:	604b      	str	r3, [r1, #4]
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f000 f82f 	bl	8005b48 <__malloc_unlock>
 8005aea:	f104 000b 	add.w	r0, r4, #11
 8005aee:	1d23      	adds	r3, r4, #4
 8005af0:	f020 0007 	bic.w	r0, r0, #7
 8005af4:	1ac2      	subs	r2, r0, r3
 8005af6:	bf1c      	itt	ne
 8005af8:	1a1b      	subne	r3, r3, r0
 8005afa:	50a3      	strne	r3, [r4, r2]
 8005afc:	e7af      	b.n	8005a5e <_malloc_r+0x22>
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	bf0c      	ite	eq
 8005b04:	f8c8 2000 	streq.w	r2, [r8]
 8005b08:	605a      	strne	r2, [r3, #4]
 8005b0a:	e7eb      	b.n	8005ae4 <_malloc_r+0xa8>
 8005b0c:	4623      	mov	r3, r4
 8005b0e:	6864      	ldr	r4, [r4, #4]
 8005b10:	e7ae      	b.n	8005a70 <_malloc_r+0x34>
 8005b12:	463c      	mov	r4, r7
 8005b14:	687f      	ldr	r7, [r7, #4]
 8005b16:	e7b6      	b.n	8005a86 <_malloc_r+0x4a>
 8005b18:	461a      	mov	r2, r3
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d1fb      	bne.n	8005b18 <_malloc_r+0xdc>
 8005b20:	2300      	movs	r3, #0
 8005b22:	6053      	str	r3, [r2, #4]
 8005b24:	e7de      	b.n	8005ae4 <_malloc_r+0xa8>
 8005b26:	230c      	movs	r3, #12
 8005b28:	4630      	mov	r0, r6
 8005b2a:	6033      	str	r3, [r6, #0]
 8005b2c:	f000 f80c 	bl	8005b48 <__malloc_unlock>
 8005b30:	e794      	b.n	8005a5c <_malloc_r+0x20>
 8005b32:	6005      	str	r5, [r0, #0]
 8005b34:	e7d6      	b.n	8005ae4 <_malloc_r+0xa8>
 8005b36:	bf00      	nop
 8005b38:	20000450 	.word	0x20000450

08005b3c <__malloc_lock>:
 8005b3c:	4801      	ldr	r0, [pc, #4]	@ (8005b44 <__malloc_lock+0x8>)
 8005b3e:	f7ff b8aa 	b.w	8004c96 <__retarget_lock_acquire_recursive>
 8005b42:	bf00      	nop
 8005b44:	20000448 	.word	0x20000448

08005b48 <__malloc_unlock>:
 8005b48:	4801      	ldr	r0, [pc, #4]	@ (8005b50 <__malloc_unlock+0x8>)
 8005b4a:	f7ff b8a5 	b.w	8004c98 <__retarget_lock_release_recursive>
 8005b4e:	bf00      	nop
 8005b50:	20000448 	.word	0x20000448

08005b54 <_Balloc>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	69c6      	ldr	r6, [r0, #28]
 8005b58:	4604      	mov	r4, r0
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	b976      	cbnz	r6, 8005b7c <_Balloc+0x28>
 8005b5e:	2010      	movs	r0, #16
 8005b60:	f7ff ff42 	bl	80059e8 <malloc>
 8005b64:	4602      	mov	r2, r0
 8005b66:	61e0      	str	r0, [r4, #28]
 8005b68:	b920      	cbnz	r0, 8005b74 <_Balloc+0x20>
 8005b6a:	216b      	movs	r1, #107	@ 0x6b
 8005b6c:	4b17      	ldr	r3, [pc, #92]	@ (8005bcc <_Balloc+0x78>)
 8005b6e:	4818      	ldr	r0, [pc, #96]	@ (8005bd0 <_Balloc+0x7c>)
 8005b70:	f000 fda8 	bl	80066c4 <__assert_func>
 8005b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b78:	6006      	str	r6, [r0, #0]
 8005b7a:	60c6      	str	r6, [r0, #12]
 8005b7c:	69e6      	ldr	r6, [r4, #28]
 8005b7e:	68f3      	ldr	r3, [r6, #12]
 8005b80:	b183      	cbz	r3, 8005ba4 <_Balloc+0x50>
 8005b82:	69e3      	ldr	r3, [r4, #28]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b8a:	b9b8      	cbnz	r0, 8005bbc <_Balloc+0x68>
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8005b92:	1d72      	adds	r2, r6, #5
 8005b94:	4620      	mov	r0, r4
 8005b96:	0092      	lsls	r2, r2, #2
 8005b98:	f000 fdb2 	bl	8006700 <_calloc_r>
 8005b9c:	b160      	cbz	r0, 8005bb8 <_Balloc+0x64>
 8005b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ba2:	e00e      	b.n	8005bc2 <_Balloc+0x6e>
 8005ba4:	2221      	movs	r2, #33	@ 0x21
 8005ba6:	2104      	movs	r1, #4
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 fda9 	bl	8006700 <_calloc_r>
 8005bae:	69e3      	ldr	r3, [r4, #28]
 8005bb0:	60f0      	str	r0, [r6, #12]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e4      	bne.n	8005b82 <_Balloc+0x2e>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	6802      	ldr	r2, [r0, #0]
 8005bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bc8:	e7f7      	b.n	8005bba <_Balloc+0x66>
 8005bca:	bf00      	nop
 8005bcc:	080072d7 	.word	0x080072d7
 8005bd0:	08007357 	.word	0x08007357

08005bd4 <_Bfree>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	69c6      	ldr	r6, [r0, #28]
 8005bd8:	4605      	mov	r5, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	b976      	cbnz	r6, 8005bfc <_Bfree+0x28>
 8005bde:	2010      	movs	r0, #16
 8005be0:	f7ff ff02 	bl	80059e8 <malloc>
 8005be4:	4602      	mov	r2, r0
 8005be6:	61e8      	str	r0, [r5, #28]
 8005be8:	b920      	cbnz	r0, 8005bf4 <_Bfree+0x20>
 8005bea:	218f      	movs	r1, #143	@ 0x8f
 8005bec:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <_Bfree+0x3c>)
 8005bee:	4809      	ldr	r0, [pc, #36]	@ (8005c14 <_Bfree+0x40>)
 8005bf0:	f000 fd68 	bl	80066c4 <__assert_func>
 8005bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bf8:	6006      	str	r6, [r0, #0]
 8005bfa:	60c6      	str	r6, [r0, #12]
 8005bfc:	b13c      	cbz	r4, 8005c0e <_Bfree+0x3a>
 8005bfe:	69eb      	ldr	r3, [r5, #28]
 8005c00:	6862      	ldr	r2, [r4, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c08:	6021      	str	r1, [r4, #0]
 8005c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	080072d7 	.word	0x080072d7
 8005c14:	08007357 	.word	0x08007357

08005c18 <__multadd>:
 8005c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	461e      	mov	r6, r3
 8005c22:	2000      	movs	r0, #0
 8005c24:	690d      	ldr	r5, [r1, #16]
 8005c26:	f101 0c14 	add.w	ip, r1, #20
 8005c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8005c2e:	3001      	adds	r0, #1
 8005c30:	b299      	uxth	r1, r3
 8005c32:	fb02 6101 	mla	r1, r2, r1, r6
 8005c36:	0c1e      	lsrs	r6, r3, #16
 8005c38:	0c0b      	lsrs	r3, r1, #16
 8005c3a:	fb02 3306 	mla	r3, r2, r6, r3
 8005c3e:	b289      	uxth	r1, r1
 8005c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c44:	4285      	cmp	r5, r0
 8005c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c4e:	dcec      	bgt.n	8005c2a <__multadd+0x12>
 8005c50:	b30e      	cbz	r6, 8005c96 <__multadd+0x7e>
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	dc19      	bgt.n	8005c8c <__multadd+0x74>
 8005c58:	6861      	ldr	r1, [r4, #4]
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	3101      	adds	r1, #1
 8005c5e:	f7ff ff79 	bl	8005b54 <_Balloc>
 8005c62:	4680      	mov	r8, r0
 8005c64:	b928      	cbnz	r0, 8005c72 <__multadd+0x5a>
 8005c66:	4602      	mov	r2, r0
 8005c68:	21ba      	movs	r1, #186	@ 0xba
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c9c <__multadd+0x84>)
 8005c6c:	480c      	ldr	r0, [pc, #48]	@ (8005ca0 <__multadd+0x88>)
 8005c6e:	f000 fd29 	bl	80066c4 <__assert_func>
 8005c72:	6922      	ldr	r2, [r4, #16]
 8005c74:	f104 010c 	add.w	r1, r4, #12
 8005c78:	3202      	adds	r2, #2
 8005c7a:	0092      	lsls	r2, r2, #2
 8005c7c:	300c      	adds	r0, #12
 8005c7e:	f000 fd13 	bl	80066a8 <memcpy>
 8005c82:	4621      	mov	r1, r4
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7ff ffa5 	bl	8005bd4 <_Bfree>
 8005c8a:	4644      	mov	r4, r8
 8005c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c90:	3501      	adds	r5, #1
 8005c92:	615e      	str	r6, [r3, #20]
 8005c94:	6125      	str	r5, [r4, #16]
 8005c96:	4620      	mov	r0, r4
 8005c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9c:	08007346 	.word	0x08007346
 8005ca0:	08007357 	.word	0x08007357

08005ca4 <__hi0bits>:
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005caa:	bf3a      	itte	cc
 8005cac:	0403      	lslcc	r3, r0, #16
 8005cae:	2010      	movcc	r0, #16
 8005cb0:	2000      	movcs	r0, #0
 8005cb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cb6:	bf3c      	itt	cc
 8005cb8:	021b      	lslcc	r3, r3, #8
 8005cba:	3008      	addcc	r0, #8
 8005cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cc0:	bf3c      	itt	cc
 8005cc2:	011b      	lslcc	r3, r3, #4
 8005cc4:	3004      	addcc	r0, #4
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cca:	bf3c      	itt	cc
 8005ccc:	009b      	lslcc	r3, r3, #2
 8005cce:	3002      	addcc	r0, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	db05      	blt.n	8005ce0 <__hi0bits+0x3c>
 8005cd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005cd8:	f100 0001 	add.w	r0, r0, #1
 8005cdc:	bf08      	it	eq
 8005cde:	2020      	moveq	r0, #32
 8005ce0:	4770      	bx	lr

08005ce2 <__lo0bits>:
 8005ce2:	6803      	ldr	r3, [r0, #0]
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	f013 0007 	ands.w	r0, r3, #7
 8005cea:	d00b      	beq.n	8005d04 <__lo0bits+0x22>
 8005cec:	07d9      	lsls	r1, r3, #31
 8005cee:	d421      	bmi.n	8005d34 <__lo0bits+0x52>
 8005cf0:	0798      	lsls	r0, r3, #30
 8005cf2:	bf49      	itett	mi
 8005cf4:	085b      	lsrmi	r3, r3, #1
 8005cf6:	089b      	lsrpl	r3, r3, #2
 8005cf8:	2001      	movmi	r0, #1
 8005cfa:	6013      	strmi	r3, [r2, #0]
 8005cfc:	bf5c      	itt	pl
 8005cfe:	2002      	movpl	r0, #2
 8005d00:	6013      	strpl	r3, [r2, #0]
 8005d02:	4770      	bx	lr
 8005d04:	b299      	uxth	r1, r3
 8005d06:	b909      	cbnz	r1, 8005d0c <__lo0bits+0x2a>
 8005d08:	2010      	movs	r0, #16
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	b2d9      	uxtb	r1, r3
 8005d0e:	b909      	cbnz	r1, 8005d14 <__lo0bits+0x32>
 8005d10:	3008      	adds	r0, #8
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	0719      	lsls	r1, r3, #28
 8005d16:	bf04      	itt	eq
 8005d18:	091b      	lsreq	r3, r3, #4
 8005d1a:	3004      	addeq	r0, #4
 8005d1c:	0799      	lsls	r1, r3, #30
 8005d1e:	bf04      	itt	eq
 8005d20:	089b      	lsreq	r3, r3, #2
 8005d22:	3002      	addeq	r0, #2
 8005d24:	07d9      	lsls	r1, r3, #31
 8005d26:	d403      	bmi.n	8005d30 <__lo0bits+0x4e>
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	f100 0001 	add.w	r0, r0, #1
 8005d2e:	d003      	beq.n	8005d38 <__lo0bits+0x56>
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	4770      	bx	lr
 8005d34:	2000      	movs	r0, #0
 8005d36:	4770      	bx	lr
 8005d38:	2020      	movs	r0, #32
 8005d3a:	4770      	bx	lr

08005d3c <__i2b>:
 8005d3c:	b510      	push	{r4, lr}
 8005d3e:	460c      	mov	r4, r1
 8005d40:	2101      	movs	r1, #1
 8005d42:	f7ff ff07 	bl	8005b54 <_Balloc>
 8005d46:	4602      	mov	r2, r0
 8005d48:	b928      	cbnz	r0, 8005d56 <__i2b+0x1a>
 8005d4a:	f240 1145 	movw	r1, #325	@ 0x145
 8005d4e:	4b04      	ldr	r3, [pc, #16]	@ (8005d60 <__i2b+0x24>)
 8005d50:	4804      	ldr	r0, [pc, #16]	@ (8005d64 <__i2b+0x28>)
 8005d52:	f000 fcb7 	bl	80066c4 <__assert_func>
 8005d56:	2301      	movs	r3, #1
 8005d58:	6144      	str	r4, [r0, #20]
 8005d5a:	6103      	str	r3, [r0, #16]
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	bf00      	nop
 8005d60:	08007346 	.word	0x08007346
 8005d64:	08007357 	.word	0x08007357

08005d68 <__multiply>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	690a      	ldr	r2, [r1, #16]
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	460f      	mov	r7, r1
 8005d74:	429a      	cmp	r2, r3
 8005d76:	bfa2      	ittt	ge
 8005d78:	4623      	movge	r3, r4
 8005d7a:	460c      	movge	r4, r1
 8005d7c:	461f      	movge	r7, r3
 8005d7e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005d82:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	6861      	ldr	r1, [r4, #4]
 8005d8a:	eb0a 0609 	add.w	r6, sl, r9
 8005d8e:	42b3      	cmp	r3, r6
 8005d90:	b085      	sub	sp, #20
 8005d92:	bfb8      	it	lt
 8005d94:	3101      	addlt	r1, #1
 8005d96:	f7ff fedd 	bl	8005b54 <_Balloc>
 8005d9a:	b930      	cbnz	r0, 8005daa <__multiply+0x42>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005da2:	4b43      	ldr	r3, [pc, #268]	@ (8005eb0 <__multiply+0x148>)
 8005da4:	4843      	ldr	r0, [pc, #268]	@ (8005eb4 <__multiply+0x14c>)
 8005da6:	f000 fc8d 	bl	80066c4 <__assert_func>
 8005daa:	f100 0514 	add.w	r5, r0, #20
 8005dae:	462b      	mov	r3, r5
 8005db0:	2200      	movs	r2, #0
 8005db2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005db6:	4543      	cmp	r3, r8
 8005db8:	d321      	bcc.n	8005dfe <__multiply+0x96>
 8005dba:	f107 0114 	add.w	r1, r7, #20
 8005dbe:	f104 0214 	add.w	r2, r4, #20
 8005dc2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005dc6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	1b13      	subs	r3, r2, r4
 8005dce:	3b15      	subs	r3, #21
 8005dd0:	f023 0303 	bic.w	r3, r3, #3
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	f104 0715 	add.w	r7, r4, #21
 8005dda:	42ba      	cmp	r2, r7
 8005ddc:	bf38      	it	cc
 8005dde:	2304      	movcc	r3, #4
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	9b02      	ldr	r3, [sp, #8]
 8005de4:	9103      	str	r1, [sp, #12]
 8005de6:	428b      	cmp	r3, r1
 8005de8:	d80c      	bhi.n	8005e04 <__multiply+0x9c>
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	dd03      	ble.n	8005df6 <__multiply+0x8e>
 8005dee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d05a      	beq.n	8005eac <__multiply+0x144>
 8005df6:	6106      	str	r6, [r0, #16]
 8005df8:	b005      	add	sp, #20
 8005dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfe:	f843 2b04 	str.w	r2, [r3], #4
 8005e02:	e7d8      	b.n	8005db6 <__multiply+0x4e>
 8005e04:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e08:	f1ba 0f00 	cmp.w	sl, #0
 8005e0c:	d023      	beq.n	8005e56 <__multiply+0xee>
 8005e0e:	46a9      	mov	r9, r5
 8005e10:	f04f 0c00 	mov.w	ip, #0
 8005e14:	f104 0e14 	add.w	lr, r4, #20
 8005e18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e1c:	f8d9 3000 	ldr.w	r3, [r9]
 8005e20:	fa1f fb87 	uxth.w	fp, r7
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	fb0a 330b 	mla	r3, sl, fp, r3
 8005e2a:	4463      	add	r3, ip
 8005e2c:	f8d9 c000 	ldr.w	ip, [r9]
 8005e30:	0c3f      	lsrs	r7, r7, #16
 8005e32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005e36:	fb0a c707 	mla	r7, sl, r7, ip
 8005e3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e44:	4572      	cmp	r2, lr
 8005e46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005e4a:	f849 3b04 	str.w	r3, [r9], #4
 8005e4e:	d8e3      	bhi.n	8005e18 <__multiply+0xb0>
 8005e50:	9b01      	ldr	r3, [sp, #4]
 8005e52:	f845 c003 	str.w	ip, [r5, r3]
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	3104      	adds	r1, #4
 8005e5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005e5e:	f1b9 0f00 	cmp.w	r9, #0
 8005e62:	d021      	beq.n	8005ea8 <__multiply+0x140>
 8005e64:	46ae      	mov	lr, r5
 8005e66:	f04f 0a00 	mov.w	sl, #0
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	f104 0c14 	add.w	ip, r4, #20
 8005e70:	f8bc b000 	ldrh.w	fp, [ip]
 8005e74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	fb09 770b 	mla	r7, r9, fp, r7
 8005e7e:	4457      	add	r7, sl
 8005e80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e84:	f84e 3b04 	str.w	r3, [lr], #4
 8005e88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e90:	f8be 3000 	ldrh.w	r3, [lr]
 8005e94:	4562      	cmp	r2, ip
 8005e96:	fb09 330a 	mla	r3, r9, sl, r3
 8005e9a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005e9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ea2:	d8e5      	bhi.n	8005e70 <__multiply+0x108>
 8005ea4:	9f01      	ldr	r7, [sp, #4]
 8005ea6:	51eb      	str	r3, [r5, r7]
 8005ea8:	3504      	adds	r5, #4
 8005eaa:	e79a      	b.n	8005de2 <__multiply+0x7a>
 8005eac:	3e01      	subs	r6, #1
 8005eae:	e79c      	b.n	8005dea <__multiply+0x82>
 8005eb0:	08007346 	.word	0x08007346
 8005eb4:	08007357 	.word	0x08007357

08005eb8 <__pow5mult>:
 8005eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	4615      	mov	r5, r2
 8005ebe:	f012 0203 	ands.w	r2, r2, #3
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	460e      	mov	r6, r1
 8005ec6:	d007      	beq.n	8005ed8 <__pow5mult+0x20>
 8005ec8:	4c25      	ldr	r4, [pc, #148]	@ (8005f60 <__pow5mult+0xa8>)
 8005eca:	3a01      	subs	r2, #1
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ed2:	f7ff fea1 	bl	8005c18 <__multadd>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	10ad      	asrs	r5, r5, #2
 8005eda:	d03d      	beq.n	8005f58 <__pow5mult+0xa0>
 8005edc:	69fc      	ldr	r4, [r7, #28]
 8005ede:	b97c      	cbnz	r4, 8005f00 <__pow5mult+0x48>
 8005ee0:	2010      	movs	r0, #16
 8005ee2:	f7ff fd81 	bl	80059e8 <malloc>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	61f8      	str	r0, [r7, #28]
 8005eea:	b928      	cbnz	r0, 8005ef8 <__pow5mult+0x40>
 8005eec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f64 <__pow5mult+0xac>)
 8005ef2:	481d      	ldr	r0, [pc, #116]	@ (8005f68 <__pow5mult+0xb0>)
 8005ef4:	f000 fbe6 	bl	80066c4 <__assert_func>
 8005ef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005efc:	6004      	str	r4, [r0, #0]
 8005efe:	60c4      	str	r4, [r0, #12]
 8005f00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f08:	b94c      	cbnz	r4, 8005f1e <__pow5mult+0x66>
 8005f0a:	f240 2171 	movw	r1, #625	@ 0x271
 8005f0e:	4638      	mov	r0, r7
 8005f10:	f7ff ff14 	bl	8005d3c <__i2b>
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f1c:	6003      	str	r3, [r0, #0]
 8005f1e:	f04f 0900 	mov.w	r9, #0
 8005f22:	07eb      	lsls	r3, r5, #31
 8005f24:	d50a      	bpl.n	8005f3c <__pow5mult+0x84>
 8005f26:	4631      	mov	r1, r6
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f7ff ff1c 	bl	8005d68 <__multiply>
 8005f30:	4680      	mov	r8, r0
 8005f32:	4631      	mov	r1, r6
 8005f34:	4638      	mov	r0, r7
 8005f36:	f7ff fe4d 	bl	8005bd4 <_Bfree>
 8005f3a:	4646      	mov	r6, r8
 8005f3c:	106d      	asrs	r5, r5, #1
 8005f3e:	d00b      	beq.n	8005f58 <__pow5mult+0xa0>
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	b938      	cbnz	r0, 8005f54 <__pow5mult+0x9c>
 8005f44:	4622      	mov	r2, r4
 8005f46:	4621      	mov	r1, r4
 8005f48:	4638      	mov	r0, r7
 8005f4a:	f7ff ff0d 	bl	8005d68 <__multiply>
 8005f4e:	6020      	str	r0, [r4, #0]
 8005f50:	f8c0 9000 	str.w	r9, [r0]
 8005f54:	4604      	mov	r4, r0
 8005f56:	e7e4      	b.n	8005f22 <__pow5mult+0x6a>
 8005f58:	4630      	mov	r0, r6
 8005f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5e:	bf00      	nop
 8005f60:	080073b0 	.word	0x080073b0
 8005f64:	080072d7 	.word	0x080072d7
 8005f68:	08007357 	.word	0x08007357

08005f6c <__lshift>:
 8005f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	460c      	mov	r4, r1
 8005f72:	4607      	mov	r7, r0
 8005f74:	4691      	mov	r9, r2
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	6849      	ldr	r1, [r1, #4]
 8005f7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f7e:	68a3      	ldr	r3, [r4, #8]
 8005f80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f84:	f108 0601 	add.w	r6, r8, #1
 8005f88:	42b3      	cmp	r3, r6
 8005f8a:	db0b      	blt.n	8005fa4 <__lshift+0x38>
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff fde1 	bl	8005b54 <_Balloc>
 8005f92:	4605      	mov	r5, r0
 8005f94:	b948      	cbnz	r0, 8005faa <__lshift+0x3e>
 8005f96:	4602      	mov	r2, r0
 8005f98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005f9c:	4b27      	ldr	r3, [pc, #156]	@ (800603c <__lshift+0xd0>)
 8005f9e:	4828      	ldr	r0, [pc, #160]	@ (8006040 <__lshift+0xd4>)
 8005fa0:	f000 fb90 	bl	80066c4 <__assert_func>
 8005fa4:	3101      	adds	r1, #1
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	e7ee      	b.n	8005f88 <__lshift+0x1c>
 8005faa:	2300      	movs	r3, #0
 8005fac:	f100 0114 	add.w	r1, r0, #20
 8005fb0:	f100 0210 	add.w	r2, r0, #16
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	4553      	cmp	r3, sl
 8005fb8:	db33      	blt.n	8006022 <__lshift+0xb6>
 8005fba:	6920      	ldr	r0, [r4, #16]
 8005fbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fc0:	f104 0314 	add.w	r3, r4, #20
 8005fc4:	f019 091f 	ands.w	r9, r9, #31
 8005fc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005fd0:	d02b      	beq.n	800602a <__lshift+0xbe>
 8005fd2:	468a      	mov	sl, r1
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f1c9 0e20 	rsb	lr, r9, #32
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	fa00 f009 	lsl.w	r0, r0, r9
 8005fe0:	4310      	orrs	r0, r2
 8005fe2:	f84a 0b04 	str.w	r0, [sl], #4
 8005fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fea:	459c      	cmp	ip, r3
 8005fec:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ff0:	d8f3      	bhi.n	8005fda <__lshift+0x6e>
 8005ff2:	ebac 0304 	sub.w	r3, ip, r4
 8005ff6:	3b15      	subs	r3, #21
 8005ff8:	f023 0303 	bic.w	r3, r3, #3
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	f104 0015 	add.w	r0, r4, #21
 8006002:	4584      	cmp	ip, r0
 8006004:	bf38      	it	cc
 8006006:	2304      	movcc	r3, #4
 8006008:	50ca      	str	r2, [r1, r3]
 800600a:	b10a      	cbz	r2, 8006010 <__lshift+0xa4>
 800600c:	f108 0602 	add.w	r6, r8, #2
 8006010:	3e01      	subs	r6, #1
 8006012:	4638      	mov	r0, r7
 8006014:	4621      	mov	r1, r4
 8006016:	612e      	str	r6, [r5, #16]
 8006018:	f7ff fddc 	bl	8005bd4 <_Bfree>
 800601c:	4628      	mov	r0, r5
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	f842 0f04 	str.w	r0, [r2, #4]!
 8006026:	3301      	adds	r3, #1
 8006028:	e7c5      	b.n	8005fb6 <__lshift+0x4a>
 800602a:	3904      	subs	r1, #4
 800602c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006030:	459c      	cmp	ip, r3
 8006032:	f841 2f04 	str.w	r2, [r1, #4]!
 8006036:	d8f9      	bhi.n	800602c <__lshift+0xc0>
 8006038:	e7ea      	b.n	8006010 <__lshift+0xa4>
 800603a:	bf00      	nop
 800603c:	08007346 	.word	0x08007346
 8006040:	08007357 	.word	0x08007357

08006044 <__mcmp>:
 8006044:	4603      	mov	r3, r0
 8006046:	690a      	ldr	r2, [r1, #16]
 8006048:	6900      	ldr	r0, [r0, #16]
 800604a:	b530      	push	{r4, r5, lr}
 800604c:	1a80      	subs	r0, r0, r2
 800604e:	d10e      	bne.n	800606e <__mcmp+0x2a>
 8006050:	3314      	adds	r3, #20
 8006052:	3114      	adds	r1, #20
 8006054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800605c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006064:	4295      	cmp	r5, r2
 8006066:	d003      	beq.n	8006070 <__mcmp+0x2c>
 8006068:	d205      	bcs.n	8006076 <__mcmp+0x32>
 800606a:	f04f 30ff 	mov.w	r0, #4294967295
 800606e:	bd30      	pop	{r4, r5, pc}
 8006070:	42a3      	cmp	r3, r4
 8006072:	d3f3      	bcc.n	800605c <__mcmp+0x18>
 8006074:	e7fb      	b.n	800606e <__mcmp+0x2a>
 8006076:	2001      	movs	r0, #1
 8006078:	e7f9      	b.n	800606e <__mcmp+0x2a>
	...

0800607c <__mdiff>:
 800607c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	4689      	mov	r9, r1
 8006082:	4606      	mov	r6, r0
 8006084:	4611      	mov	r1, r2
 8006086:	4648      	mov	r0, r9
 8006088:	4614      	mov	r4, r2
 800608a:	f7ff ffdb 	bl	8006044 <__mcmp>
 800608e:	1e05      	subs	r5, r0, #0
 8006090:	d112      	bne.n	80060b8 <__mdiff+0x3c>
 8006092:	4629      	mov	r1, r5
 8006094:	4630      	mov	r0, r6
 8006096:	f7ff fd5d 	bl	8005b54 <_Balloc>
 800609a:	4602      	mov	r2, r0
 800609c:	b928      	cbnz	r0, 80060aa <__mdiff+0x2e>
 800609e:	f240 2137 	movw	r1, #567	@ 0x237
 80060a2:	4b3e      	ldr	r3, [pc, #248]	@ (800619c <__mdiff+0x120>)
 80060a4:	483e      	ldr	r0, [pc, #248]	@ (80061a0 <__mdiff+0x124>)
 80060a6:	f000 fb0d 	bl	80066c4 <__assert_func>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060b0:	4610      	mov	r0, r2
 80060b2:	b003      	add	sp, #12
 80060b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b8:	bfbc      	itt	lt
 80060ba:	464b      	movlt	r3, r9
 80060bc:	46a1      	movlt	r9, r4
 80060be:	4630      	mov	r0, r6
 80060c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80060c4:	bfba      	itte	lt
 80060c6:	461c      	movlt	r4, r3
 80060c8:	2501      	movlt	r5, #1
 80060ca:	2500      	movge	r5, #0
 80060cc:	f7ff fd42 	bl	8005b54 <_Balloc>
 80060d0:	4602      	mov	r2, r0
 80060d2:	b918      	cbnz	r0, 80060dc <__mdiff+0x60>
 80060d4:	f240 2145 	movw	r1, #581	@ 0x245
 80060d8:	4b30      	ldr	r3, [pc, #192]	@ (800619c <__mdiff+0x120>)
 80060da:	e7e3      	b.n	80060a4 <__mdiff+0x28>
 80060dc:	f100 0b14 	add.w	fp, r0, #20
 80060e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80060e4:	f109 0310 	add.w	r3, r9, #16
 80060e8:	60c5      	str	r5, [r0, #12]
 80060ea:	f04f 0c00 	mov.w	ip, #0
 80060ee:	f109 0514 	add.w	r5, r9, #20
 80060f2:	46d9      	mov	r9, fp
 80060f4:	6926      	ldr	r6, [r4, #16]
 80060f6:	f104 0e14 	add.w	lr, r4, #20
 80060fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80060fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	f85e 0b04 	ldr.w	r0, [lr], #4
 800610a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800610e:	b281      	uxth	r1, r0
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	fa1f f38a 	uxth.w	r3, sl
 8006116:	1a5b      	subs	r3, r3, r1
 8006118:	0c00      	lsrs	r0, r0, #16
 800611a:	4463      	add	r3, ip
 800611c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006120:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006124:	b29b      	uxth	r3, r3
 8006126:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800612a:	4576      	cmp	r6, lr
 800612c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006130:	f849 3b04 	str.w	r3, [r9], #4
 8006134:	d8e6      	bhi.n	8006104 <__mdiff+0x88>
 8006136:	1b33      	subs	r3, r6, r4
 8006138:	3b15      	subs	r3, #21
 800613a:	f023 0303 	bic.w	r3, r3, #3
 800613e:	3415      	adds	r4, #21
 8006140:	3304      	adds	r3, #4
 8006142:	42a6      	cmp	r6, r4
 8006144:	bf38      	it	cc
 8006146:	2304      	movcc	r3, #4
 8006148:	441d      	add	r5, r3
 800614a:	445b      	add	r3, fp
 800614c:	461e      	mov	r6, r3
 800614e:	462c      	mov	r4, r5
 8006150:	4544      	cmp	r4, r8
 8006152:	d30e      	bcc.n	8006172 <__mdiff+0xf6>
 8006154:	f108 0103 	add.w	r1, r8, #3
 8006158:	1b49      	subs	r1, r1, r5
 800615a:	f021 0103 	bic.w	r1, r1, #3
 800615e:	3d03      	subs	r5, #3
 8006160:	45a8      	cmp	r8, r5
 8006162:	bf38      	it	cc
 8006164:	2100      	movcc	r1, #0
 8006166:	440b      	add	r3, r1
 8006168:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800616c:	b199      	cbz	r1, 8006196 <__mdiff+0x11a>
 800616e:	6117      	str	r7, [r2, #16]
 8006170:	e79e      	b.n	80060b0 <__mdiff+0x34>
 8006172:	46e6      	mov	lr, ip
 8006174:	f854 1b04 	ldr.w	r1, [r4], #4
 8006178:	fa1f fc81 	uxth.w	ip, r1
 800617c:	44f4      	add	ip, lr
 800617e:	0c08      	lsrs	r0, r1, #16
 8006180:	4471      	add	r1, lr
 8006182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006186:	b289      	uxth	r1, r1
 8006188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800618c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006190:	f846 1b04 	str.w	r1, [r6], #4
 8006194:	e7dc      	b.n	8006150 <__mdiff+0xd4>
 8006196:	3f01      	subs	r7, #1
 8006198:	e7e6      	b.n	8006168 <__mdiff+0xec>
 800619a:	bf00      	nop
 800619c:	08007346 	.word	0x08007346
 80061a0:	08007357 	.word	0x08007357

080061a4 <__d2b>:
 80061a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80061a8:	2101      	movs	r1, #1
 80061aa:	4690      	mov	r8, r2
 80061ac:	4699      	mov	r9, r3
 80061ae:	9e08      	ldr	r6, [sp, #32]
 80061b0:	f7ff fcd0 	bl	8005b54 <_Balloc>
 80061b4:	4604      	mov	r4, r0
 80061b6:	b930      	cbnz	r0, 80061c6 <__d2b+0x22>
 80061b8:	4602      	mov	r2, r0
 80061ba:	f240 310f 	movw	r1, #783	@ 0x30f
 80061be:	4b23      	ldr	r3, [pc, #140]	@ (800624c <__d2b+0xa8>)
 80061c0:	4823      	ldr	r0, [pc, #140]	@ (8006250 <__d2b+0xac>)
 80061c2:	f000 fa7f 	bl	80066c4 <__assert_func>
 80061c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061ce:	b10d      	cbz	r5, 80061d4 <__d2b+0x30>
 80061d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	f1b8 0300 	subs.w	r3, r8, #0
 80061da:	d024      	beq.n	8006226 <__d2b+0x82>
 80061dc:	4668      	mov	r0, sp
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	f7ff fd7f 	bl	8005ce2 <__lo0bits>
 80061e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80061e8:	b1d8      	cbz	r0, 8006222 <__d2b+0x7e>
 80061ea:	f1c0 0320 	rsb	r3, r0, #32
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	430b      	orrs	r3, r1
 80061f4:	40c2      	lsrs	r2, r0
 80061f6:	6163      	str	r3, [r4, #20]
 80061f8:	9201      	str	r2, [sp, #4]
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bf0c      	ite	eq
 8006200:	2201      	moveq	r2, #1
 8006202:	2202      	movne	r2, #2
 8006204:	61a3      	str	r3, [r4, #24]
 8006206:	6122      	str	r2, [r4, #16]
 8006208:	b1ad      	cbz	r5, 8006236 <__d2b+0x92>
 800620a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800620e:	4405      	add	r5, r0
 8006210:	6035      	str	r5, [r6, #0]
 8006212:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006218:	6018      	str	r0, [r3, #0]
 800621a:	4620      	mov	r0, r4
 800621c:	b002      	add	sp, #8
 800621e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006222:	6161      	str	r1, [r4, #20]
 8006224:	e7e9      	b.n	80061fa <__d2b+0x56>
 8006226:	a801      	add	r0, sp, #4
 8006228:	f7ff fd5b 	bl	8005ce2 <__lo0bits>
 800622c:	9b01      	ldr	r3, [sp, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	6163      	str	r3, [r4, #20]
 8006232:	3020      	adds	r0, #32
 8006234:	e7e7      	b.n	8006206 <__d2b+0x62>
 8006236:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800623a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800623e:	6030      	str	r0, [r6, #0]
 8006240:	6918      	ldr	r0, [r3, #16]
 8006242:	f7ff fd2f 	bl	8005ca4 <__hi0bits>
 8006246:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800624a:	e7e4      	b.n	8006216 <__d2b+0x72>
 800624c:	08007346 	.word	0x08007346
 8006250:	08007357 	.word	0x08007357

08006254 <__ssputs_r>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	461f      	mov	r7, r3
 800625a:	688e      	ldr	r6, [r1, #8]
 800625c:	4682      	mov	sl, r0
 800625e:	42be      	cmp	r6, r7
 8006260:	460c      	mov	r4, r1
 8006262:	4690      	mov	r8, r2
 8006264:	680b      	ldr	r3, [r1, #0]
 8006266:	d82d      	bhi.n	80062c4 <__ssputs_r+0x70>
 8006268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800626c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006270:	d026      	beq.n	80062c0 <__ssputs_r+0x6c>
 8006272:	6965      	ldr	r5, [r4, #20]
 8006274:	6909      	ldr	r1, [r1, #16]
 8006276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800627a:	eba3 0901 	sub.w	r9, r3, r1
 800627e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006282:	1c7b      	adds	r3, r7, #1
 8006284:	444b      	add	r3, r9
 8006286:	106d      	asrs	r5, r5, #1
 8006288:	429d      	cmp	r5, r3
 800628a:	bf38      	it	cc
 800628c:	461d      	movcc	r5, r3
 800628e:	0553      	lsls	r3, r2, #21
 8006290:	d527      	bpl.n	80062e2 <__ssputs_r+0x8e>
 8006292:	4629      	mov	r1, r5
 8006294:	f7ff fbd2 	bl	8005a3c <_malloc_r>
 8006298:	4606      	mov	r6, r0
 800629a:	b360      	cbz	r0, 80062f6 <__ssputs_r+0xa2>
 800629c:	464a      	mov	r2, r9
 800629e:	6921      	ldr	r1, [r4, #16]
 80062a0:	f000 fa02 	bl	80066a8 <memcpy>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	6126      	str	r6, [r4, #16]
 80062b2:	444e      	add	r6, r9
 80062b4:	6026      	str	r6, [r4, #0]
 80062b6:	463e      	mov	r6, r7
 80062b8:	6165      	str	r5, [r4, #20]
 80062ba:	eba5 0509 	sub.w	r5, r5, r9
 80062be:	60a5      	str	r5, [r4, #8]
 80062c0:	42be      	cmp	r6, r7
 80062c2:	d900      	bls.n	80062c6 <__ssputs_r+0x72>
 80062c4:	463e      	mov	r6, r7
 80062c6:	4632      	mov	r2, r6
 80062c8:	4641      	mov	r1, r8
 80062ca:	6820      	ldr	r0, [r4, #0]
 80062cc:	f000 f9c2 	bl	8006654 <memmove>
 80062d0:	2000      	movs	r0, #0
 80062d2:	68a3      	ldr	r3, [r4, #8]
 80062d4:	1b9b      	subs	r3, r3, r6
 80062d6:	60a3      	str	r3, [r4, #8]
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	4433      	add	r3, r6
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e2:	462a      	mov	r2, r5
 80062e4:	f000 fa32 	bl	800674c <_realloc_r>
 80062e8:	4606      	mov	r6, r0
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1e0      	bne.n	80062b0 <__ssputs_r+0x5c>
 80062ee:	4650      	mov	r0, sl
 80062f0:	6921      	ldr	r1, [r4, #16]
 80062f2:	f7ff fb31 	bl	8005958 <_free_r>
 80062f6:	230c      	movs	r3, #12
 80062f8:	f8ca 3000 	str.w	r3, [sl]
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	e7e9      	b.n	80062de <__ssputs_r+0x8a>
	...

0800630c <_svfiprintf_r>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4698      	mov	r8, r3
 8006312:	898b      	ldrh	r3, [r1, #12]
 8006314:	4607      	mov	r7, r0
 8006316:	061b      	lsls	r3, r3, #24
 8006318:	460d      	mov	r5, r1
 800631a:	4614      	mov	r4, r2
 800631c:	b09d      	sub	sp, #116	@ 0x74
 800631e:	d510      	bpl.n	8006342 <_svfiprintf_r+0x36>
 8006320:	690b      	ldr	r3, [r1, #16]
 8006322:	b973      	cbnz	r3, 8006342 <_svfiprintf_r+0x36>
 8006324:	2140      	movs	r1, #64	@ 0x40
 8006326:	f7ff fb89 	bl	8005a3c <_malloc_r>
 800632a:	6028      	str	r0, [r5, #0]
 800632c:	6128      	str	r0, [r5, #16]
 800632e:	b930      	cbnz	r0, 800633e <_svfiprintf_r+0x32>
 8006330:	230c      	movs	r3, #12
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	b01d      	add	sp, #116	@ 0x74
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633e:	2340      	movs	r3, #64	@ 0x40
 8006340:	616b      	str	r3, [r5, #20]
 8006342:	2300      	movs	r3, #0
 8006344:	9309      	str	r3, [sp, #36]	@ 0x24
 8006346:	2320      	movs	r3, #32
 8006348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800634c:	2330      	movs	r3, #48	@ 0x30
 800634e:	f04f 0901 	mov.w	r9, #1
 8006352:	f8cd 800c 	str.w	r8, [sp, #12]
 8006356:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80064f0 <_svfiprintf_r+0x1e4>
 800635a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800635e:	4623      	mov	r3, r4
 8006360:	469a      	mov	sl, r3
 8006362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006366:	b10a      	cbz	r2, 800636c <_svfiprintf_r+0x60>
 8006368:	2a25      	cmp	r2, #37	@ 0x25
 800636a:	d1f9      	bne.n	8006360 <_svfiprintf_r+0x54>
 800636c:	ebba 0b04 	subs.w	fp, sl, r4
 8006370:	d00b      	beq.n	800638a <_svfiprintf_r+0x7e>
 8006372:	465b      	mov	r3, fp
 8006374:	4622      	mov	r2, r4
 8006376:	4629      	mov	r1, r5
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff ff6b 	bl	8006254 <__ssputs_r>
 800637e:	3001      	adds	r0, #1
 8006380:	f000 80a7 	beq.w	80064d2 <_svfiprintf_r+0x1c6>
 8006384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006386:	445a      	add	r2, fp
 8006388:	9209      	str	r2, [sp, #36]	@ 0x24
 800638a:	f89a 3000 	ldrb.w	r3, [sl]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 809f 	beq.w	80064d2 <_svfiprintf_r+0x1c6>
 8006394:	2300      	movs	r3, #0
 8006396:	f04f 32ff 	mov.w	r2, #4294967295
 800639a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800639e:	f10a 0a01 	add.w	sl, sl, #1
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	9307      	str	r3, [sp, #28]
 80063a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80063ac:	4654      	mov	r4, sl
 80063ae:	2205      	movs	r2, #5
 80063b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b4:	484e      	ldr	r0, [pc, #312]	@ (80064f0 <_svfiprintf_r+0x1e4>)
 80063b6:	f7fe fc70 	bl	8004c9a <memchr>
 80063ba:	9a04      	ldr	r2, [sp, #16]
 80063bc:	b9d8      	cbnz	r0, 80063f6 <_svfiprintf_r+0xea>
 80063be:	06d0      	lsls	r0, r2, #27
 80063c0:	bf44      	itt	mi
 80063c2:	2320      	movmi	r3, #32
 80063c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063c8:	0711      	lsls	r1, r2, #28
 80063ca:	bf44      	itt	mi
 80063cc:	232b      	movmi	r3, #43	@ 0x2b
 80063ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063d2:	f89a 3000 	ldrb.w	r3, [sl]
 80063d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80063d8:	d015      	beq.n	8006406 <_svfiprintf_r+0xfa>
 80063da:	4654      	mov	r4, sl
 80063dc:	2000      	movs	r0, #0
 80063de:	f04f 0c0a 	mov.w	ip, #10
 80063e2:	9a07      	ldr	r2, [sp, #28]
 80063e4:	4621      	mov	r1, r4
 80063e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ea:	3b30      	subs	r3, #48	@ 0x30
 80063ec:	2b09      	cmp	r3, #9
 80063ee:	d94b      	bls.n	8006488 <_svfiprintf_r+0x17c>
 80063f0:	b1b0      	cbz	r0, 8006420 <_svfiprintf_r+0x114>
 80063f2:	9207      	str	r2, [sp, #28]
 80063f4:	e014      	b.n	8006420 <_svfiprintf_r+0x114>
 80063f6:	eba0 0308 	sub.w	r3, r0, r8
 80063fa:	fa09 f303 	lsl.w	r3, r9, r3
 80063fe:	4313      	orrs	r3, r2
 8006400:	46a2      	mov	sl, r4
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	e7d2      	b.n	80063ac <_svfiprintf_r+0xa0>
 8006406:	9b03      	ldr	r3, [sp, #12]
 8006408:	1d19      	adds	r1, r3, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	9103      	str	r1, [sp, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfbb      	ittet	lt
 8006412:	425b      	neglt	r3, r3
 8006414:	f042 0202 	orrlt.w	r2, r2, #2
 8006418:	9307      	strge	r3, [sp, #28]
 800641a:	9307      	strlt	r3, [sp, #28]
 800641c:	bfb8      	it	lt
 800641e:	9204      	strlt	r2, [sp, #16]
 8006420:	7823      	ldrb	r3, [r4, #0]
 8006422:	2b2e      	cmp	r3, #46	@ 0x2e
 8006424:	d10a      	bne.n	800643c <_svfiprintf_r+0x130>
 8006426:	7863      	ldrb	r3, [r4, #1]
 8006428:	2b2a      	cmp	r3, #42	@ 0x2a
 800642a:	d132      	bne.n	8006492 <_svfiprintf_r+0x186>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	3402      	adds	r4, #2
 8006430:	1d1a      	adds	r2, r3, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	9203      	str	r2, [sp, #12]
 8006436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800643a:	9305      	str	r3, [sp, #20]
 800643c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80064f4 <_svfiprintf_r+0x1e8>
 8006440:	2203      	movs	r2, #3
 8006442:	4650      	mov	r0, sl
 8006444:	7821      	ldrb	r1, [r4, #0]
 8006446:	f7fe fc28 	bl	8004c9a <memchr>
 800644a:	b138      	cbz	r0, 800645c <_svfiprintf_r+0x150>
 800644c:	2240      	movs	r2, #64	@ 0x40
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	eba0 000a 	sub.w	r0, r0, sl
 8006454:	4082      	lsls	r2, r0
 8006456:	4313      	orrs	r3, r2
 8006458:	3401      	adds	r4, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006460:	2206      	movs	r2, #6
 8006462:	4825      	ldr	r0, [pc, #148]	@ (80064f8 <_svfiprintf_r+0x1ec>)
 8006464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006468:	f7fe fc17 	bl	8004c9a <memchr>
 800646c:	2800      	cmp	r0, #0
 800646e:	d036      	beq.n	80064de <_svfiprintf_r+0x1d2>
 8006470:	4b22      	ldr	r3, [pc, #136]	@ (80064fc <_svfiprintf_r+0x1f0>)
 8006472:	bb1b      	cbnz	r3, 80064bc <_svfiprintf_r+0x1b0>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	3307      	adds	r3, #7
 8006478:	f023 0307 	bic.w	r3, r3, #7
 800647c:	3308      	adds	r3, #8
 800647e:	9303      	str	r3, [sp, #12]
 8006480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006482:	4433      	add	r3, r6
 8006484:	9309      	str	r3, [sp, #36]	@ 0x24
 8006486:	e76a      	b.n	800635e <_svfiprintf_r+0x52>
 8006488:	460c      	mov	r4, r1
 800648a:	2001      	movs	r0, #1
 800648c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006490:	e7a8      	b.n	80063e4 <_svfiprintf_r+0xd8>
 8006492:	2300      	movs	r3, #0
 8006494:	f04f 0c0a 	mov.w	ip, #10
 8006498:	4619      	mov	r1, r3
 800649a:	3401      	adds	r4, #1
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	4620      	mov	r0, r4
 80064a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a4:	3a30      	subs	r2, #48	@ 0x30
 80064a6:	2a09      	cmp	r2, #9
 80064a8:	d903      	bls.n	80064b2 <_svfiprintf_r+0x1a6>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0c6      	beq.n	800643c <_svfiprintf_r+0x130>
 80064ae:	9105      	str	r1, [sp, #20]
 80064b0:	e7c4      	b.n	800643c <_svfiprintf_r+0x130>
 80064b2:	4604      	mov	r4, r0
 80064b4:	2301      	movs	r3, #1
 80064b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ba:	e7f0      	b.n	800649e <_svfiprintf_r+0x192>
 80064bc:	ab03      	add	r3, sp, #12
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	462a      	mov	r2, r5
 80064c2:	4638      	mov	r0, r7
 80064c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006500 <_svfiprintf_r+0x1f4>)
 80064c6:	a904      	add	r1, sp, #16
 80064c8:	f7fd fe84 	bl	80041d4 <_printf_float>
 80064cc:	1c42      	adds	r2, r0, #1
 80064ce:	4606      	mov	r6, r0
 80064d0:	d1d6      	bne.n	8006480 <_svfiprintf_r+0x174>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	065b      	lsls	r3, r3, #25
 80064d6:	f53f af2d 	bmi.w	8006334 <_svfiprintf_r+0x28>
 80064da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064dc:	e72c      	b.n	8006338 <_svfiprintf_r+0x2c>
 80064de:	ab03      	add	r3, sp, #12
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	462a      	mov	r2, r5
 80064e4:	4638      	mov	r0, r7
 80064e6:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <_svfiprintf_r+0x1f4>)
 80064e8:	a904      	add	r1, sp, #16
 80064ea:	f7fe f911 	bl	8004710 <_printf_i>
 80064ee:	e7ed      	b.n	80064cc <_svfiprintf_r+0x1c0>
 80064f0:	080074b0 	.word	0x080074b0
 80064f4:	080074b6 	.word	0x080074b6
 80064f8:	080074ba 	.word	0x080074ba
 80064fc:	080041d5 	.word	0x080041d5
 8006500:	08006255 	.word	0x08006255

08006504 <__sflush_r>:
 8006504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	0716      	lsls	r6, r2, #28
 800650c:	4605      	mov	r5, r0
 800650e:	460c      	mov	r4, r1
 8006510:	d454      	bmi.n	80065bc <__sflush_r+0xb8>
 8006512:	684b      	ldr	r3, [r1, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	dc02      	bgt.n	800651e <__sflush_r+0x1a>
 8006518:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	dd48      	ble.n	80065b0 <__sflush_r+0xac>
 800651e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006520:	2e00      	cmp	r6, #0
 8006522:	d045      	beq.n	80065b0 <__sflush_r+0xac>
 8006524:	2300      	movs	r3, #0
 8006526:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800652a:	682f      	ldr	r7, [r5, #0]
 800652c:	6a21      	ldr	r1, [r4, #32]
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	d030      	beq.n	8006594 <__sflush_r+0x90>
 8006532:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	0759      	lsls	r1, r3, #29
 8006538:	d505      	bpl.n	8006546 <__sflush_r+0x42>
 800653a:	6863      	ldr	r3, [r4, #4]
 800653c:	1ad2      	subs	r2, r2, r3
 800653e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006540:	b10b      	cbz	r3, 8006546 <__sflush_r+0x42>
 8006542:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006544:	1ad2      	subs	r2, r2, r3
 8006546:	2300      	movs	r3, #0
 8006548:	4628      	mov	r0, r5
 800654a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800654c:	6a21      	ldr	r1, [r4, #32]
 800654e:	47b0      	blx	r6
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	d106      	bne.n	8006564 <__sflush_r+0x60>
 8006556:	6829      	ldr	r1, [r5, #0]
 8006558:	291d      	cmp	r1, #29
 800655a:	d82b      	bhi.n	80065b4 <__sflush_r+0xb0>
 800655c:	4a28      	ldr	r2, [pc, #160]	@ (8006600 <__sflush_r+0xfc>)
 800655e:	410a      	asrs	r2, r1
 8006560:	07d6      	lsls	r6, r2, #31
 8006562:	d427      	bmi.n	80065b4 <__sflush_r+0xb0>
 8006564:	2200      	movs	r2, #0
 8006566:	6062      	str	r2, [r4, #4]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	04d9      	lsls	r1, r3, #19
 800656c:	6022      	str	r2, [r4, #0]
 800656e:	d504      	bpl.n	800657a <__sflush_r+0x76>
 8006570:	1c42      	adds	r2, r0, #1
 8006572:	d101      	bne.n	8006578 <__sflush_r+0x74>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b903      	cbnz	r3, 800657a <__sflush_r+0x76>
 8006578:	6560      	str	r0, [r4, #84]	@ 0x54
 800657a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800657c:	602f      	str	r7, [r5, #0]
 800657e:	b1b9      	cbz	r1, 80065b0 <__sflush_r+0xac>
 8006580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006584:	4299      	cmp	r1, r3
 8006586:	d002      	beq.n	800658e <__sflush_r+0x8a>
 8006588:	4628      	mov	r0, r5
 800658a:	f7ff f9e5 	bl	8005958 <_free_r>
 800658e:	2300      	movs	r3, #0
 8006590:	6363      	str	r3, [r4, #52]	@ 0x34
 8006592:	e00d      	b.n	80065b0 <__sflush_r+0xac>
 8006594:	2301      	movs	r3, #1
 8006596:	4628      	mov	r0, r5
 8006598:	47b0      	blx	r6
 800659a:	4602      	mov	r2, r0
 800659c:	1c50      	adds	r0, r2, #1
 800659e:	d1c9      	bne.n	8006534 <__sflush_r+0x30>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0c6      	beq.n	8006534 <__sflush_r+0x30>
 80065a6:	2b1d      	cmp	r3, #29
 80065a8:	d001      	beq.n	80065ae <__sflush_r+0xaa>
 80065aa:	2b16      	cmp	r3, #22
 80065ac:	d11d      	bne.n	80065ea <__sflush_r+0xe6>
 80065ae:	602f      	str	r7, [r5, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	e021      	b.n	80065f8 <__sflush_r+0xf4>
 80065b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b8:	b21b      	sxth	r3, r3
 80065ba:	e01a      	b.n	80065f2 <__sflush_r+0xee>
 80065bc:	690f      	ldr	r7, [r1, #16]
 80065be:	2f00      	cmp	r7, #0
 80065c0:	d0f6      	beq.n	80065b0 <__sflush_r+0xac>
 80065c2:	0793      	lsls	r3, r2, #30
 80065c4:	bf18      	it	ne
 80065c6:	2300      	movne	r3, #0
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	bf08      	it	eq
 80065cc:	694b      	ldreq	r3, [r1, #20]
 80065ce:	1bf6      	subs	r6, r6, r7
 80065d0:	600f      	str	r7, [r1, #0]
 80065d2:	608b      	str	r3, [r1, #8]
 80065d4:	2e00      	cmp	r6, #0
 80065d6:	ddeb      	ble.n	80065b0 <__sflush_r+0xac>
 80065d8:	4633      	mov	r3, r6
 80065da:	463a      	mov	r2, r7
 80065dc:	4628      	mov	r0, r5
 80065de:	6a21      	ldr	r1, [r4, #32]
 80065e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80065e4:	47e0      	blx	ip
 80065e6:	2800      	cmp	r0, #0
 80065e8:	dc07      	bgt.n	80065fa <__sflush_r+0xf6>
 80065ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065f2:	f04f 30ff 	mov.w	r0, #4294967295
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fa:	4407      	add	r7, r0
 80065fc:	1a36      	subs	r6, r6, r0
 80065fe:	e7e9      	b.n	80065d4 <__sflush_r+0xd0>
 8006600:	dfbffffe 	.word	0xdfbffffe

08006604 <_fflush_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	690b      	ldr	r3, [r1, #16]
 8006608:	4605      	mov	r5, r0
 800660a:	460c      	mov	r4, r1
 800660c:	b913      	cbnz	r3, 8006614 <_fflush_r+0x10>
 800660e:	2500      	movs	r5, #0
 8006610:	4628      	mov	r0, r5
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	b118      	cbz	r0, 800661e <_fflush_r+0x1a>
 8006616:	6a03      	ldr	r3, [r0, #32]
 8006618:	b90b      	cbnz	r3, 800661e <_fflush_r+0x1a>
 800661a:	f7fe fa25 	bl	8004a68 <__sinit>
 800661e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f3      	beq.n	800660e <_fflush_r+0xa>
 8006626:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006628:	07d0      	lsls	r0, r2, #31
 800662a:	d404      	bmi.n	8006636 <_fflush_r+0x32>
 800662c:	0599      	lsls	r1, r3, #22
 800662e:	d402      	bmi.n	8006636 <_fflush_r+0x32>
 8006630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006632:	f7fe fb30 	bl	8004c96 <__retarget_lock_acquire_recursive>
 8006636:	4628      	mov	r0, r5
 8006638:	4621      	mov	r1, r4
 800663a:	f7ff ff63 	bl	8006504 <__sflush_r>
 800663e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006640:	4605      	mov	r5, r0
 8006642:	07da      	lsls	r2, r3, #31
 8006644:	d4e4      	bmi.n	8006610 <_fflush_r+0xc>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	059b      	lsls	r3, r3, #22
 800664a:	d4e1      	bmi.n	8006610 <_fflush_r+0xc>
 800664c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800664e:	f7fe fb23 	bl	8004c98 <__retarget_lock_release_recursive>
 8006652:	e7dd      	b.n	8006610 <_fflush_r+0xc>

08006654 <memmove>:
 8006654:	4288      	cmp	r0, r1
 8006656:	b510      	push	{r4, lr}
 8006658:	eb01 0402 	add.w	r4, r1, r2
 800665c:	d902      	bls.n	8006664 <memmove+0x10>
 800665e:	4284      	cmp	r4, r0
 8006660:	4623      	mov	r3, r4
 8006662:	d807      	bhi.n	8006674 <memmove+0x20>
 8006664:	1e43      	subs	r3, r0, #1
 8006666:	42a1      	cmp	r1, r4
 8006668:	d008      	beq.n	800667c <memmove+0x28>
 800666a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800666e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006672:	e7f8      	b.n	8006666 <memmove+0x12>
 8006674:	4601      	mov	r1, r0
 8006676:	4402      	add	r2, r0
 8006678:	428a      	cmp	r2, r1
 800667a:	d100      	bne.n	800667e <memmove+0x2a>
 800667c:	bd10      	pop	{r4, pc}
 800667e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006686:	e7f7      	b.n	8006678 <memmove+0x24>

08006688 <_sbrk_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	2300      	movs	r3, #0
 800668c:	4d05      	ldr	r5, [pc, #20]	@ (80066a4 <_sbrk_r+0x1c>)
 800668e:	4604      	mov	r4, r0
 8006690:	4608      	mov	r0, r1
 8006692:	602b      	str	r3, [r5, #0]
 8006694:	f7fb fac8 	bl	8001c28 <_sbrk>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_sbrk_r+0x1a>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_sbrk_r+0x1a>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	20000444 	.word	0x20000444

080066a8 <memcpy>:
 80066a8:	440a      	add	r2, r1
 80066aa:	4291      	cmp	r1, r2
 80066ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b0:	d100      	bne.n	80066b4 <memcpy+0xc>
 80066b2:	4770      	bx	lr
 80066b4:	b510      	push	{r4, lr}
 80066b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ba:	4291      	cmp	r1, r2
 80066bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c0:	d1f9      	bne.n	80066b6 <memcpy+0xe>
 80066c2:	bd10      	pop	{r4, pc}

080066c4 <__assert_func>:
 80066c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066c6:	4614      	mov	r4, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b09      	ldr	r3, [pc, #36]	@ (80066f0 <__assert_func+0x2c>)
 80066cc:	4605      	mov	r5, r0
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68d8      	ldr	r0, [r3, #12]
 80066d2:	b954      	cbnz	r4, 80066ea <__assert_func+0x26>
 80066d4:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <__assert_func+0x30>)
 80066d6:	461c      	mov	r4, r3
 80066d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066dc:	9100      	str	r1, [sp, #0]
 80066de:	462b      	mov	r3, r5
 80066e0:	4905      	ldr	r1, [pc, #20]	@ (80066f8 <__assert_func+0x34>)
 80066e2:	f000 f86f 	bl	80067c4 <fiprintf>
 80066e6:	f000 f87f 	bl	80067e8 <abort>
 80066ea:	4b04      	ldr	r3, [pc, #16]	@ (80066fc <__assert_func+0x38>)
 80066ec:	e7f4      	b.n	80066d8 <__assert_func+0x14>
 80066ee:	bf00      	nop
 80066f0:	20000018 	.word	0x20000018
 80066f4:	08007506 	.word	0x08007506
 80066f8:	080074d8 	.word	0x080074d8
 80066fc:	080074cb 	.word	0x080074cb

08006700 <_calloc_r>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	fba1 5402 	umull	r5, r4, r1, r2
 8006706:	b93c      	cbnz	r4, 8006718 <_calloc_r+0x18>
 8006708:	4629      	mov	r1, r5
 800670a:	f7ff f997 	bl	8005a3c <_malloc_r>
 800670e:	4606      	mov	r6, r0
 8006710:	b928      	cbnz	r0, 800671e <_calloc_r+0x1e>
 8006712:	2600      	movs	r6, #0
 8006714:	4630      	mov	r0, r6
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	220c      	movs	r2, #12
 800671a:	6002      	str	r2, [r0, #0]
 800671c:	e7f9      	b.n	8006712 <_calloc_r+0x12>
 800671e:	462a      	mov	r2, r5
 8006720:	4621      	mov	r1, r4
 8006722:	f7fe fa3a 	bl	8004b9a <memset>
 8006726:	e7f5      	b.n	8006714 <_calloc_r+0x14>

08006728 <__ascii_mbtowc>:
 8006728:	b082      	sub	sp, #8
 800672a:	b901      	cbnz	r1, 800672e <__ascii_mbtowc+0x6>
 800672c:	a901      	add	r1, sp, #4
 800672e:	b142      	cbz	r2, 8006742 <__ascii_mbtowc+0x1a>
 8006730:	b14b      	cbz	r3, 8006746 <__ascii_mbtowc+0x1e>
 8006732:	7813      	ldrb	r3, [r2, #0]
 8006734:	600b      	str	r3, [r1, #0]
 8006736:	7812      	ldrb	r2, [r2, #0]
 8006738:	1e10      	subs	r0, r2, #0
 800673a:	bf18      	it	ne
 800673c:	2001      	movne	r0, #1
 800673e:	b002      	add	sp, #8
 8006740:	4770      	bx	lr
 8006742:	4610      	mov	r0, r2
 8006744:	e7fb      	b.n	800673e <__ascii_mbtowc+0x16>
 8006746:	f06f 0001 	mvn.w	r0, #1
 800674a:	e7f8      	b.n	800673e <__ascii_mbtowc+0x16>

0800674c <_realloc_r>:
 800674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006750:	4680      	mov	r8, r0
 8006752:	4615      	mov	r5, r2
 8006754:	460c      	mov	r4, r1
 8006756:	b921      	cbnz	r1, 8006762 <_realloc_r+0x16>
 8006758:	4611      	mov	r1, r2
 800675a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800675e:	f7ff b96d 	b.w	8005a3c <_malloc_r>
 8006762:	b92a      	cbnz	r2, 8006770 <_realloc_r+0x24>
 8006764:	f7ff f8f8 	bl	8005958 <_free_r>
 8006768:	2400      	movs	r4, #0
 800676a:	4620      	mov	r0, r4
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	f000 f841 	bl	80067f6 <_malloc_usable_size_r>
 8006774:	4285      	cmp	r5, r0
 8006776:	4606      	mov	r6, r0
 8006778:	d802      	bhi.n	8006780 <_realloc_r+0x34>
 800677a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800677e:	d8f4      	bhi.n	800676a <_realloc_r+0x1e>
 8006780:	4629      	mov	r1, r5
 8006782:	4640      	mov	r0, r8
 8006784:	f7ff f95a 	bl	8005a3c <_malloc_r>
 8006788:	4607      	mov	r7, r0
 800678a:	2800      	cmp	r0, #0
 800678c:	d0ec      	beq.n	8006768 <_realloc_r+0x1c>
 800678e:	42b5      	cmp	r5, r6
 8006790:	462a      	mov	r2, r5
 8006792:	4621      	mov	r1, r4
 8006794:	bf28      	it	cs
 8006796:	4632      	movcs	r2, r6
 8006798:	f7ff ff86 	bl	80066a8 <memcpy>
 800679c:	4621      	mov	r1, r4
 800679e:	4640      	mov	r0, r8
 80067a0:	f7ff f8da 	bl	8005958 <_free_r>
 80067a4:	463c      	mov	r4, r7
 80067a6:	e7e0      	b.n	800676a <_realloc_r+0x1e>

080067a8 <__ascii_wctomb>:
 80067a8:	4603      	mov	r3, r0
 80067aa:	4608      	mov	r0, r1
 80067ac:	b141      	cbz	r1, 80067c0 <__ascii_wctomb+0x18>
 80067ae:	2aff      	cmp	r2, #255	@ 0xff
 80067b0:	d904      	bls.n	80067bc <__ascii_wctomb+0x14>
 80067b2:	228a      	movs	r2, #138	@ 0x8a
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	4770      	bx	lr
 80067bc:	2001      	movs	r0, #1
 80067be:	700a      	strb	r2, [r1, #0]
 80067c0:	4770      	bx	lr
	...

080067c4 <fiprintf>:
 80067c4:	b40e      	push	{r1, r2, r3}
 80067c6:	b503      	push	{r0, r1, lr}
 80067c8:	4601      	mov	r1, r0
 80067ca:	ab03      	add	r3, sp, #12
 80067cc:	4805      	ldr	r0, [pc, #20]	@ (80067e4 <fiprintf+0x20>)
 80067ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d2:	6800      	ldr	r0, [r0, #0]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	f000 f83d 	bl	8006854 <_vfiprintf_r>
 80067da:	b002      	add	sp, #8
 80067dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e0:	b003      	add	sp, #12
 80067e2:	4770      	bx	lr
 80067e4:	20000018 	.word	0x20000018

080067e8 <abort>:
 80067e8:	2006      	movs	r0, #6
 80067ea:	b508      	push	{r3, lr}
 80067ec:	f000 fa06 	bl	8006bfc <raise>
 80067f0:	2001      	movs	r0, #1
 80067f2:	f7fb f9a4 	bl	8001b3e <_exit>

080067f6 <_malloc_usable_size_r>:
 80067f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fa:	1f18      	subs	r0, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bfbc      	itt	lt
 8006800:	580b      	ldrlt	r3, [r1, r0]
 8006802:	18c0      	addlt	r0, r0, r3
 8006804:	4770      	bx	lr

08006806 <__sfputc_r>:
 8006806:	6893      	ldr	r3, [r2, #8]
 8006808:	b410      	push	{r4}
 800680a:	3b01      	subs	r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	6093      	str	r3, [r2, #8]
 8006810:	da07      	bge.n	8006822 <__sfputc_r+0x1c>
 8006812:	6994      	ldr	r4, [r2, #24]
 8006814:	42a3      	cmp	r3, r4
 8006816:	db01      	blt.n	800681c <__sfputc_r+0x16>
 8006818:	290a      	cmp	r1, #10
 800681a:	d102      	bne.n	8006822 <__sfputc_r+0x1c>
 800681c:	bc10      	pop	{r4}
 800681e:	f000 b931 	b.w	8006a84 <__swbuf_r>
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	1c58      	adds	r0, r3, #1
 8006826:	6010      	str	r0, [r2, #0]
 8006828:	7019      	strb	r1, [r3, #0]
 800682a:	4608      	mov	r0, r1
 800682c:	bc10      	pop	{r4}
 800682e:	4770      	bx	lr

08006830 <__sfputs_r>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	4606      	mov	r6, r0
 8006834:	460f      	mov	r7, r1
 8006836:	4614      	mov	r4, r2
 8006838:	18d5      	adds	r5, r2, r3
 800683a:	42ac      	cmp	r4, r5
 800683c:	d101      	bne.n	8006842 <__sfputs_r+0x12>
 800683e:	2000      	movs	r0, #0
 8006840:	e007      	b.n	8006852 <__sfputs_r+0x22>
 8006842:	463a      	mov	r2, r7
 8006844:	4630      	mov	r0, r6
 8006846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684a:	f7ff ffdc 	bl	8006806 <__sfputc_r>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	d1f3      	bne.n	800683a <__sfputs_r+0xa>
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006854 <_vfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	460d      	mov	r5, r1
 800685a:	4614      	mov	r4, r2
 800685c:	4698      	mov	r8, r3
 800685e:	4606      	mov	r6, r0
 8006860:	b09d      	sub	sp, #116	@ 0x74
 8006862:	b118      	cbz	r0, 800686c <_vfiprintf_r+0x18>
 8006864:	6a03      	ldr	r3, [r0, #32]
 8006866:	b90b      	cbnz	r3, 800686c <_vfiprintf_r+0x18>
 8006868:	f7fe f8fe 	bl	8004a68 <__sinit>
 800686c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800686e:	07d9      	lsls	r1, r3, #31
 8006870:	d405      	bmi.n	800687e <_vfiprintf_r+0x2a>
 8006872:	89ab      	ldrh	r3, [r5, #12]
 8006874:	059a      	lsls	r2, r3, #22
 8006876:	d402      	bmi.n	800687e <_vfiprintf_r+0x2a>
 8006878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800687a:	f7fe fa0c 	bl	8004c96 <__retarget_lock_acquire_recursive>
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	071b      	lsls	r3, r3, #28
 8006882:	d501      	bpl.n	8006888 <_vfiprintf_r+0x34>
 8006884:	692b      	ldr	r3, [r5, #16]
 8006886:	b99b      	cbnz	r3, 80068b0 <_vfiprintf_r+0x5c>
 8006888:	4629      	mov	r1, r5
 800688a:	4630      	mov	r0, r6
 800688c:	f000 f938 	bl	8006b00 <__swsetup_r>
 8006890:	b170      	cbz	r0, 80068b0 <_vfiprintf_r+0x5c>
 8006892:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006894:	07dc      	lsls	r4, r3, #31
 8006896:	d504      	bpl.n	80068a2 <_vfiprintf_r+0x4e>
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	b01d      	add	sp, #116	@ 0x74
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a2:	89ab      	ldrh	r3, [r5, #12]
 80068a4:	0598      	lsls	r0, r3, #22
 80068a6:	d4f7      	bmi.n	8006898 <_vfiprintf_r+0x44>
 80068a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068aa:	f7fe f9f5 	bl	8004c98 <__retarget_lock_release_recursive>
 80068ae:	e7f3      	b.n	8006898 <_vfiprintf_r+0x44>
 80068b0:	2300      	movs	r3, #0
 80068b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b4:	2320      	movs	r3, #32
 80068b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068ba:	2330      	movs	r3, #48	@ 0x30
 80068bc:	f04f 0901 	mov.w	r9, #1
 80068c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006a70 <_vfiprintf_r+0x21c>
 80068c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068cc:	4623      	mov	r3, r4
 80068ce:	469a      	mov	sl, r3
 80068d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068d4:	b10a      	cbz	r2, 80068da <_vfiprintf_r+0x86>
 80068d6:	2a25      	cmp	r2, #37	@ 0x25
 80068d8:	d1f9      	bne.n	80068ce <_vfiprintf_r+0x7a>
 80068da:	ebba 0b04 	subs.w	fp, sl, r4
 80068de:	d00b      	beq.n	80068f8 <_vfiprintf_r+0xa4>
 80068e0:	465b      	mov	r3, fp
 80068e2:	4622      	mov	r2, r4
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff ffa2 	bl	8006830 <__sfputs_r>
 80068ec:	3001      	adds	r0, #1
 80068ee:	f000 80a7 	beq.w	8006a40 <_vfiprintf_r+0x1ec>
 80068f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068f4:	445a      	add	r2, fp
 80068f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80068f8:	f89a 3000 	ldrb.w	r3, [sl]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 809f 	beq.w	8006a40 <_vfiprintf_r+0x1ec>
 8006902:	2300      	movs	r3, #0
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800690c:	f10a 0a01 	add.w	sl, sl, #1
 8006910:	9304      	str	r3, [sp, #16]
 8006912:	9307      	str	r3, [sp, #28]
 8006914:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006918:	931a      	str	r3, [sp, #104]	@ 0x68
 800691a:	4654      	mov	r4, sl
 800691c:	2205      	movs	r2, #5
 800691e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006922:	4853      	ldr	r0, [pc, #332]	@ (8006a70 <_vfiprintf_r+0x21c>)
 8006924:	f7fe f9b9 	bl	8004c9a <memchr>
 8006928:	9a04      	ldr	r2, [sp, #16]
 800692a:	b9d8      	cbnz	r0, 8006964 <_vfiprintf_r+0x110>
 800692c:	06d1      	lsls	r1, r2, #27
 800692e:	bf44      	itt	mi
 8006930:	2320      	movmi	r3, #32
 8006932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006936:	0713      	lsls	r3, r2, #28
 8006938:	bf44      	itt	mi
 800693a:	232b      	movmi	r3, #43	@ 0x2b
 800693c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006940:	f89a 3000 	ldrb.w	r3, [sl]
 8006944:	2b2a      	cmp	r3, #42	@ 0x2a
 8006946:	d015      	beq.n	8006974 <_vfiprintf_r+0x120>
 8006948:	4654      	mov	r4, sl
 800694a:	2000      	movs	r0, #0
 800694c:	f04f 0c0a 	mov.w	ip, #10
 8006950:	9a07      	ldr	r2, [sp, #28]
 8006952:	4621      	mov	r1, r4
 8006954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006958:	3b30      	subs	r3, #48	@ 0x30
 800695a:	2b09      	cmp	r3, #9
 800695c:	d94b      	bls.n	80069f6 <_vfiprintf_r+0x1a2>
 800695e:	b1b0      	cbz	r0, 800698e <_vfiprintf_r+0x13a>
 8006960:	9207      	str	r2, [sp, #28]
 8006962:	e014      	b.n	800698e <_vfiprintf_r+0x13a>
 8006964:	eba0 0308 	sub.w	r3, r0, r8
 8006968:	fa09 f303 	lsl.w	r3, r9, r3
 800696c:	4313      	orrs	r3, r2
 800696e:	46a2      	mov	sl, r4
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	e7d2      	b.n	800691a <_vfiprintf_r+0xc6>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	1d19      	adds	r1, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	9103      	str	r1, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfbb      	ittet	lt
 8006980:	425b      	neglt	r3, r3
 8006982:	f042 0202 	orrlt.w	r2, r2, #2
 8006986:	9307      	strge	r3, [sp, #28]
 8006988:	9307      	strlt	r3, [sp, #28]
 800698a:	bfb8      	it	lt
 800698c:	9204      	strlt	r2, [sp, #16]
 800698e:	7823      	ldrb	r3, [r4, #0]
 8006990:	2b2e      	cmp	r3, #46	@ 0x2e
 8006992:	d10a      	bne.n	80069aa <_vfiprintf_r+0x156>
 8006994:	7863      	ldrb	r3, [r4, #1]
 8006996:	2b2a      	cmp	r3, #42	@ 0x2a
 8006998:	d132      	bne.n	8006a00 <_vfiprintf_r+0x1ac>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	3402      	adds	r4, #2
 800699e:	1d1a      	adds	r2, r3, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	9203      	str	r2, [sp, #12]
 80069a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069a8:	9305      	str	r3, [sp, #20]
 80069aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006a74 <_vfiprintf_r+0x220>
 80069ae:	2203      	movs	r2, #3
 80069b0:	4650      	mov	r0, sl
 80069b2:	7821      	ldrb	r1, [r4, #0]
 80069b4:	f7fe f971 	bl	8004c9a <memchr>
 80069b8:	b138      	cbz	r0, 80069ca <_vfiprintf_r+0x176>
 80069ba:	2240      	movs	r2, #64	@ 0x40
 80069bc:	9b04      	ldr	r3, [sp, #16]
 80069be:	eba0 000a 	sub.w	r0, r0, sl
 80069c2:	4082      	lsls	r2, r0
 80069c4:	4313      	orrs	r3, r2
 80069c6:	3401      	adds	r4, #1
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ce:	2206      	movs	r2, #6
 80069d0:	4829      	ldr	r0, [pc, #164]	@ (8006a78 <_vfiprintf_r+0x224>)
 80069d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069d6:	f7fe f960 	bl	8004c9a <memchr>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d03f      	beq.n	8006a5e <_vfiprintf_r+0x20a>
 80069de:	4b27      	ldr	r3, [pc, #156]	@ (8006a7c <_vfiprintf_r+0x228>)
 80069e0:	bb1b      	cbnz	r3, 8006a2a <_vfiprintf_r+0x1d6>
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	3307      	adds	r3, #7
 80069e6:	f023 0307 	bic.w	r3, r3, #7
 80069ea:	3308      	adds	r3, #8
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f0:	443b      	add	r3, r7
 80069f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f4:	e76a      	b.n	80068cc <_vfiprintf_r+0x78>
 80069f6:	460c      	mov	r4, r1
 80069f8:	2001      	movs	r0, #1
 80069fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80069fe:	e7a8      	b.n	8006952 <_vfiprintf_r+0xfe>
 8006a00:	2300      	movs	r3, #0
 8006a02:	f04f 0c0a 	mov.w	ip, #10
 8006a06:	4619      	mov	r1, r3
 8006a08:	3401      	adds	r4, #1
 8006a0a:	9305      	str	r3, [sp, #20]
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a12:	3a30      	subs	r2, #48	@ 0x30
 8006a14:	2a09      	cmp	r2, #9
 8006a16:	d903      	bls.n	8006a20 <_vfiprintf_r+0x1cc>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0c6      	beq.n	80069aa <_vfiprintf_r+0x156>
 8006a1c:	9105      	str	r1, [sp, #20]
 8006a1e:	e7c4      	b.n	80069aa <_vfiprintf_r+0x156>
 8006a20:	4604      	mov	r4, r0
 8006a22:	2301      	movs	r3, #1
 8006a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a28:	e7f0      	b.n	8006a0c <_vfiprintf_r+0x1b8>
 8006a2a:	ab03      	add	r3, sp, #12
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	462a      	mov	r2, r5
 8006a30:	4630      	mov	r0, r6
 8006a32:	4b13      	ldr	r3, [pc, #76]	@ (8006a80 <_vfiprintf_r+0x22c>)
 8006a34:	a904      	add	r1, sp, #16
 8006a36:	f7fd fbcd 	bl	80041d4 <_printf_float>
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	1c78      	adds	r0, r7, #1
 8006a3e:	d1d6      	bne.n	80069ee <_vfiprintf_r+0x19a>
 8006a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a42:	07d9      	lsls	r1, r3, #31
 8006a44:	d405      	bmi.n	8006a52 <_vfiprintf_r+0x1fe>
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	059a      	lsls	r2, r3, #22
 8006a4a:	d402      	bmi.n	8006a52 <_vfiprintf_r+0x1fe>
 8006a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a4e:	f7fe f923 	bl	8004c98 <__retarget_lock_release_recursive>
 8006a52:	89ab      	ldrh	r3, [r5, #12]
 8006a54:	065b      	lsls	r3, r3, #25
 8006a56:	f53f af1f 	bmi.w	8006898 <_vfiprintf_r+0x44>
 8006a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a5c:	e71e      	b.n	800689c <_vfiprintf_r+0x48>
 8006a5e:	ab03      	add	r3, sp, #12
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	462a      	mov	r2, r5
 8006a64:	4630      	mov	r0, r6
 8006a66:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <_vfiprintf_r+0x22c>)
 8006a68:	a904      	add	r1, sp, #16
 8006a6a:	f7fd fe51 	bl	8004710 <_printf_i>
 8006a6e:	e7e4      	b.n	8006a3a <_vfiprintf_r+0x1e6>
 8006a70:	080074b0 	.word	0x080074b0
 8006a74:	080074b6 	.word	0x080074b6
 8006a78:	080074ba 	.word	0x080074ba
 8006a7c:	080041d5 	.word	0x080041d5
 8006a80:	08006831 	.word	0x08006831

08006a84 <__swbuf_r>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	460e      	mov	r6, r1
 8006a88:	4614      	mov	r4, r2
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	b118      	cbz	r0, 8006a96 <__swbuf_r+0x12>
 8006a8e:	6a03      	ldr	r3, [r0, #32]
 8006a90:	b90b      	cbnz	r3, 8006a96 <__swbuf_r+0x12>
 8006a92:	f7fd ffe9 	bl	8004a68 <__sinit>
 8006a96:	69a3      	ldr	r3, [r4, #24]
 8006a98:	60a3      	str	r3, [r4, #8]
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	071a      	lsls	r2, r3, #28
 8006a9e:	d501      	bpl.n	8006aa4 <__swbuf_r+0x20>
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	b943      	cbnz	r3, 8006ab6 <__swbuf_r+0x32>
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 f82a 	bl	8006b00 <__swsetup_r>
 8006aac:	b118      	cbz	r0, 8006ab6 <__swbuf_r+0x32>
 8006aae:	f04f 37ff 	mov.w	r7, #4294967295
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	b2f6      	uxtb	r6, r6
 8006abc:	1a98      	subs	r0, r3, r2
 8006abe:	6963      	ldr	r3, [r4, #20]
 8006ac0:	4637      	mov	r7, r6
 8006ac2:	4283      	cmp	r3, r0
 8006ac4:	dc05      	bgt.n	8006ad2 <__swbuf_r+0x4e>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f7ff fd9b 	bl	8006604 <_fflush_r>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d1ed      	bne.n	8006aae <__swbuf_r+0x2a>
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	60a3      	str	r3, [r4, #8]
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	6022      	str	r2, [r4, #0]
 8006ade:	701e      	strb	r6, [r3, #0]
 8006ae0:	6962      	ldr	r2, [r4, #20]
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d004      	beq.n	8006af2 <__swbuf_r+0x6e>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	07db      	lsls	r3, r3, #31
 8006aec:	d5e1      	bpl.n	8006ab2 <__swbuf_r+0x2e>
 8006aee:	2e0a      	cmp	r6, #10
 8006af0:	d1df      	bne.n	8006ab2 <__swbuf_r+0x2e>
 8006af2:	4621      	mov	r1, r4
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7ff fd85 	bl	8006604 <_fflush_r>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d0d9      	beq.n	8006ab2 <__swbuf_r+0x2e>
 8006afe:	e7d6      	b.n	8006aae <__swbuf_r+0x2a>

08006b00 <__swsetup_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4b29      	ldr	r3, [pc, #164]	@ (8006ba8 <__swsetup_r+0xa8>)
 8006b04:	4605      	mov	r5, r0
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	460c      	mov	r4, r1
 8006b0a:	b118      	cbz	r0, 8006b14 <__swsetup_r+0x14>
 8006b0c:	6a03      	ldr	r3, [r0, #32]
 8006b0e:	b90b      	cbnz	r3, 8006b14 <__swsetup_r+0x14>
 8006b10:	f7fd ffaa 	bl	8004a68 <__sinit>
 8006b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b18:	0719      	lsls	r1, r3, #28
 8006b1a:	d422      	bmi.n	8006b62 <__swsetup_r+0x62>
 8006b1c:	06da      	lsls	r2, r3, #27
 8006b1e:	d407      	bmi.n	8006b30 <__swsetup_r+0x30>
 8006b20:	2209      	movs	r2, #9
 8006b22:	602a      	str	r2, [r5, #0]
 8006b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	81a3      	strh	r3, [r4, #12]
 8006b2e:	e033      	b.n	8006b98 <__swsetup_r+0x98>
 8006b30:	0758      	lsls	r0, r3, #29
 8006b32:	d512      	bpl.n	8006b5a <__swsetup_r+0x5a>
 8006b34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b36:	b141      	cbz	r1, 8006b4a <__swsetup_r+0x4a>
 8006b38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b3c:	4299      	cmp	r1, r3
 8006b3e:	d002      	beq.n	8006b46 <__swsetup_r+0x46>
 8006b40:	4628      	mov	r0, r5
 8006b42:	f7fe ff09 	bl	8005958 <_free_r>
 8006b46:	2300      	movs	r3, #0
 8006b48:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	2300      	movs	r3, #0
 8006b54:	6063      	str	r3, [r4, #4]
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	f043 0308 	orr.w	r3, r3, #8
 8006b60:	81a3      	strh	r3, [r4, #12]
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	b94b      	cbnz	r3, 8006b7a <__swsetup_r+0x7a>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b70:	d003      	beq.n	8006b7a <__swsetup_r+0x7a>
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 f882 	bl	8006c7e <__smakebuf_r>
 8006b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b7e:	f013 0201 	ands.w	r2, r3, #1
 8006b82:	d00a      	beq.n	8006b9a <__swsetup_r+0x9a>
 8006b84:	2200      	movs	r2, #0
 8006b86:	60a2      	str	r2, [r4, #8]
 8006b88:	6962      	ldr	r2, [r4, #20]
 8006b8a:	4252      	negs	r2, r2
 8006b8c:	61a2      	str	r2, [r4, #24]
 8006b8e:	6922      	ldr	r2, [r4, #16]
 8006b90:	b942      	cbnz	r2, 8006ba4 <__swsetup_r+0xa4>
 8006b92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b96:	d1c5      	bne.n	8006b24 <__swsetup_r+0x24>
 8006b98:	bd38      	pop	{r3, r4, r5, pc}
 8006b9a:	0799      	lsls	r1, r3, #30
 8006b9c:	bf58      	it	pl
 8006b9e:	6962      	ldrpl	r2, [r4, #20]
 8006ba0:	60a2      	str	r2, [r4, #8]
 8006ba2:	e7f4      	b.n	8006b8e <__swsetup_r+0x8e>
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e7f7      	b.n	8006b98 <__swsetup_r+0x98>
 8006ba8:	20000018 	.word	0x20000018

08006bac <_raise_r>:
 8006bac:	291f      	cmp	r1, #31
 8006bae:	b538      	push	{r3, r4, r5, lr}
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	d904      	bls.n	8006bc0 <_raise_r+0x14>
 8006bb6:	2316      	movs	r3, #22
 8006bb8:	6003      	str	r3, [r0, #0]
 8006bba:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006bc2:	b112      	cbz	r2, 8006bca <_raise_r+0x1e>
 8006bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bc8:	b94b      	cbnz	r3, 8006bde <_raise_r+0x32>
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f000 f830 	bl	8006c30 <_getpid_r>
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bda:	f000 b817 	b.w	8006c0c <_kill_r>
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d00a      	beq.n	8006bf8 <_raise_r+0x4c>
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	d103      	bne.n	8006bee <_raise_r+0x42>
 8006be6:	2316      	movs	r3, #22
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	2001      	movs	r0, #1
 8006bec:	e7e7      	b.n	8006bbe <_raise_r+0x12>
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006bf6:	4798      	blx	r3
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e7e0      	b.n	8006bbe <_raise_r+0x12>

08006bfc <raise>:
 8006bfc:	4b02      	ldr	r3, [pc, #8]	@ (8006c08 <raise+0xc>)
 8006bfe:	4601      	mov	r1, r0
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f7ff bfd3 	b.w	8006bac <_raise_r>
 8006c06:	bf00      	nop
 8006c08:	20000018 	.word	0x20000018

08006c0c <_kill_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4d06      	ldr	r5, [pc, #24]	@ (8006c2c <_kill_r+0x20>)
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	4611      	mov	r1, r2
 8006c18:	602b      	str	r3, [r5, #0]
 8006c1a:	f7fa ff80 	bl	8001b1e <_kill>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d102      	bne.n	8006c28 <_kill_r+0x1c>
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	b103      	cbz	r3, 8006c28 <_kill_r+0x1c>
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	bd38      	pop	{r3, r4, r5, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000444 	.word	0x20000444

08006c30 <_getpid_r>:
 8006c30:	f7fa bf6e 	b.w	8001b10 <_getpid>

08006c34 <__swhatbuf_r>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	460c      	mov	r4, r1
 8006c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3c:	4615      	mov	r5, r2
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	461e      	mov	r6, r3
 8006c42:	b096      	sub	sp, #88	@ 0x58
 8006c44:	da0c      	bge.n	8006c60 <__swhatbuf_r+0x2c>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c4e:	bf14      	ite	ne
 8006c50:	2340      	movne	r3, #64	@ 0x40
 8006c52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c56:	2000      	movs	r0, #0
 8006c58:	6031      	str	r1, [r6, #0]
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	b016      	add	sp, #88	@ 0x58
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	466a      	mov	r2, sp
 8006c62:	f000 f849 	bl	8006cf8 <_fstat_r>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	dbed      	blt.n	8006c46 <__swhatbuf_r+0x12>
 8006c6a:	9901      	ldr	r1, [sp, #4]
 8006c6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c74:	4259      	negs	r1, r3
 8006c76:	4159      	adcs	r1, r3
 8006c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c7c:	e7eb      	b.n	8006c56 <__swhatbuf_r+0x22>

08006c7e <__smakebuf_r>:
 8006c7e:	898b      	ldrh	r3, [r1, #12]
 8006c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c82:	079d      	lsls	r5, r3, #30
 8006c84:	4606      	mov	r6, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	d507      	bpl.n	8006c9a <__smakebuf_r+0x1c>
 8006c8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	2301      	movs	r3, #1
 8006c94:	6163      	str	r3, [r4, #20]
 8006c96:	b003      	add	sp, #12
 8006c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c9a:	466a      	mov	r2, sp
 8006c9c:	ab01      	add	r3, sp, #4
 8006c9e:	f7ff ffc9 	bl	8006c34 <__swhatbuf_r>
 8006ca2:	9f00      	ldr	r7, [sp, #0]
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7fe fec7 	bl	8005a3c <_malloc_r>
 8006cae:	b948      	cbnz	r0, 8006cc4 <__smakebuf_r+0x46>
 8006cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb4:	059a      	lsls	r2, r3, #22
 8006cb6:	d4ee      	bmi.n	8006c96 <__smakebuf_r+0x18>
 8006cb8:	f023 0303 	bic.w	r3, r3, #3
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	e7e2      	b.n	8006c8a <__smakebuf_r+0xc>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	6020      	str	r0, [r4, #0]
 8006cd4:	b15b      	cbz	r3, 8006cee <__smakebuf_r+0x70>
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cdc:	f000 f81e 	bl	8006d1c <_isatty_r>
 8006ce0:	b128      	cbz	r0, 8006cee <__smakebuf_r+0x70>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	f023 0303 	bic.w	r3, r3, #3
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	431d      	orrs	r5, r3
 8006cf2:	81a5      	strh	r5, [r4, #12]
 8006cf4:	e7cf      	b.n	8006c96 <__smakebuf_r+0x18>
	...

08006cf8 <_fstat_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4d06      	ldr	r5, [pc, #24]	@ (8006d18 <_fstat_r+0x20>)
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	f7fa ff69 	bl	8001bdc <_fstat>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d102      	bne.n	8006d14 <_fstat_r+0x1c>
 8006d0e:	682b      	ldr	r3, [r5, #0]
 8006d10:	b103      	cbz	r3, 8006d14 <_fstat_r+0x1c>
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	bd38      	pop	{r3, r4, r5, pc}
 8006d16:	bf00      	nop
 8006d18:	20000444 	.word	0x20000444

08006d1c <_isatty_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4d05      	ldr	r5, [pc, #20]	@ (8006d38 <_isatty_r+0x1c>)
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	602b      	str	r3, [r5, #0]
 8006d28:	f7fa ff67 	bl	8001bfa <_isatty>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d102      	bne.n	8006d36 <_isatty_r+0x1a>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	b103      	cbz	r3, 8006d36 <_isatty_r+0x1a>
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	bd38      	pop	{r3, r4, r5, pc}
 8006d38:	20000444 	.word	0x20000444

08006d3c <_init>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	bf00      	nop
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr

08006d48 <_fini>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr
