
mpu6050_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004f40  08004f40  00005f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc8  08004fc8  00006100  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd0  08004fd0  00006100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd0  08004fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08004fd8  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000100  080050d8  00006100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080050d8  00006358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9c6  00000000  00000000  00006130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1f  00000000  00000000  00011af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00013518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c8  00000000  00000000  00014188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163e6  00000000  00000000  00014b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaad  00000000  00000000  0002af36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0fb  00000000  00000000  000399e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7ade  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e8  00000000  00000000  000c7b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000cb50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f24 	.word	0x08004f24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08004f24 	.word	0x08004f24

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <Set_Servo_Angle>:
uint8_t angle;
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t Channel, double angle) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	ed87 0b00 	vstr	d0, [r7]
    // Giới hạn góc từ 0 - 180 độ để phù hợp với servo
    if (angle < 0) angle = 0;
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e9a:	f7ff fdcb 	bl	8000a34 <__aeabi_dcmplt>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <Set_Servo_Angle+0x30>
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	e9c7 2300 	strd	r2, r3, [r7]
    if (angle > 180) angle = 180;
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <Set_Servo_Angle+0xc0>)
 8000eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eba:	f7ff fdd9 	bl	8000a70 <__aeabi_dcmpgt>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <Set_Servo_Angle+0x4e>
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <Set_Servo_Angle+0xc0>)
 8000eca:	e9c7 2300 	strd	r2, r3, [r7]

    // Chuyển đổi góc thành giá trị độ rộng xung
    uint16_t pulse_width = 1000 + (angle * 10); // PWM 1000-2000us (tùy chỉnh cho servo)
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <Set_Servo_Angle+0xc4>)
 8000ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ed8:	f7ff fb3a 	bl	8000550 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <Set_Servo_Angle+0xc8>)
 8000eea:	f7ff f97b 	bl	80001e4 <__adddf3>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fddb 	bl	8000ab0 <__aeabi_d2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	82fb      	strh	r3, [r7, #22]
    __HAL_TIM_SET_COMPARE(htim, Channel, pulse_width);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <Set_Servo_Angle+0x8e>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	8afa      	ldrh	r2, [r7, #22]
 8000f0a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f0c:	e013      	b.n	8000f36 <Set_Servo_Angle+0xb6>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulse_width);
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d104      	bne.n	8000f1e <Set_Servo_Angle+0x9e>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	8afb      	ldrh	r3, [r7, #22]
 8000f1a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f1c:	e00b      	b.n	8000f36 <Set_Servo_Angle+0xb6>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulse_width);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d104      	bne.n	8000f2e <Set_Servo_Angle+0xae>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f2c:	e003      	b.n	8000f36 <Set_Servo_Angle+0xb6>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulse_width);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	8afb      	ldrh	r3, [r7, #22]
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40668000 	.word	0x40668000
 8000f44:	40240000 	.word	0x40240000
 8000f48:	408f4000 	.word	0x408f4000

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fe88 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f83e 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f974 	bl	8001244 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f5c:	f000 f8a2 	bl	80010a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f60:	f000 f8ce 	bl	8001100 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f64:	2100      	movs	r1, #0
 8000f66:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <main+0x74>)
 8000f68:	f002 fe68 	bl	8003c3c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
  MPU6050_Init(&hi2c1);
 8000f6c:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <main+0x78>)
 8000f6e:	f000 f9a5 	bl	80012bc <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f72:	4915      	ldr	r1, [pc, #84]	@ (8000fc8 <main+0x7c>)
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <main+0x78>)
 8000f76:	f000 f9fb 	bl	8001370 <MPU6050_Read_All>

	  AngX = MPU6050.KalmanAngleX;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <main+0x7c>)
 8000f7c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fdb4 	bl	8000af0 <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <main+0x80>)
 8000f8c:	6013      	str	r3, [r2, #0]
	  AngY = MPU6050.KalmanAngleY;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <main+0x7c>)
 8000f90:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fdaa 	bl	8000af0 <__aeabi_d2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <main+0x84>)
 8000fa0:	6013      	str	r3, [r2, #0]
	  Set_Servo_Angle(&htim1, TIM_CHANNEL_1, AngX);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <main+0x80>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa7a 	bl	80004a0 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	ec43 2b10 	vmov	d0, r2, r3
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <main+0x74>)
 8000fb8:	f7ff ff62 	bl	8000e80 <Set_Servo_Angle>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8000fbc:	bf00      	nop
 8000fbe:	e7d8      	b.n	8000f72 <main+0x26>
 8000fc0:	20000170 	.word	0x20000170
 8000fc4:	2000011c 	.word	0x2000011c
 8000fc8:	200001b8 	.word	0x200001b8
 8000fcc:	20000210 	.word	0x20000210
 8000fd0:	20000214 	.word	0x20000214

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	@ 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	@ 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fbfc 	bl	80047e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <SystemClock_Config+0xc8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	4a26      	ldr	r2, [pc, #152]	@ (800109c <SystemClock_Config+0xc8>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	@ 0x40
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <SystemClock_Config+0xc8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <SystemClock_Config+0xcc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <SystemClock_Config+0xcc>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <SystemClock_Config+0xcc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001044:	2308      	movs	r3, #8
 8001046:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f002 f903 	bl	8003264 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001064:	f000 f924 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2103      	movs	r1, #3
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fb65 	bl	8003754 <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001090:	f000 f90e 	bl	80012b0 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	@ 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f001 f89b 	bl	800221c <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 f8e0 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000011c 	.word	0x2000011c
 80010f8:	40005400 	.word	0x40005400
 80010fc:	000186a0 	.word	0x000186a0

08001100 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b096      	sub	sp, #88	@ 0x58
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fb51 	bl	80047e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <MX_TIM1_Init+0x13c>)
 8001140:	4a3f      	ldr	r2, [pc, #252]	@ (8001240 <MX_TIM1_Init+0x140>)
 8001142:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001144:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <MX_TIM1_Init+0x13c>)
 8001146:	2254      	movs	r2, #84	@ 0x54
 8001148:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b3c      	ldr	r3, [pc, #240]	@ (800123c <MX_TIM1_Init+0x13c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001150:	4b3a      	ldr	r3, [pc, #232]	@ (800123c <MX_TIM1_Init+0x13c>)
 8001152:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001156:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <MX_TIM1_Init+0x13c>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800115e:	4b37      	ldr	r3, [pc, #220]	@ (800123c <MX_TIM1_Init+0x13c>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b35      	ldr	r3, [pc, #212]	@ (800123c <MX_TIM1_Init+0x13c>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800116a:	4834      	ldr	r0, [pc, #208]	@ (800123c <MX_TIM1_Init+0x13c>)
 800116c:	f002 fcbe 	bl	8003aec <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001176:	f000 f89b 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001180:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001184:	4619      	mov	r1, r3
 8001186:	482d      	ldr	r0, [pc, #180]	@ (800123c <MX_TIM1_Init+0x13c>)
 8001188:	f002 feca 	bl	8003f20 <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001192:	f000 f88d 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001196:	4829      	ldr	r0, [pc, #164]	@ (800123c <MX_TIM1_Init+0x13c>)
 8001198:	f002 fcf7 	bl	8003b8a <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011a2:	f000 f885 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011b2:	4619      	mov	r1, r3
 80011b4:	4821      	ldr	r0, [pc, #132]	@ (800123c <MX_TIM1_Init+0x13c>)
 80011b6:	f003 fa53 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011c0:	f000 f876 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	@ 0x60
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 80011c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	4814      	ldr	r0, [pc, #80]	@ (800123c <MX_TIM1_Init+0x13c>)
 80011ec:	f002 fdd6 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80011f6:	f000 f85b 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001212:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_TIM1_Init+0x13c>)
 800121e:	f003 fa8d 	bl	800473c <HAL_TIMEx_ConfigBreakDeadTime>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001228:	f000 f842 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <MX_TIM1_Init+0x13c>)
 800122e:	f000 fc73 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 8001232:	bf00      	nop
 8001234:	3758      	adds	r7, #88	@ 0x58
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000170 	.word	0x20000170
 8001240:	40010000 	.word	0x40010000

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_GPIO_Init+0x68>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a16      	ldr	r2, [pc, #88]	@ (80012ac <MX_GPIO_Init+0x68>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_GPIO_Init+0x68>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <MX_GPIO_Init+0x68>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <MX_GPIO_Init+0x68>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <MX_GPIO_Init+0x68>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_GPIO_Init+0x68>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <MX_GPIO_Init+0x68>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_GPIO_Init+0x68>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>

080012bc <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80012c4:	2364      	movs	r3, #100	@ 0x64
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030f 	add.w	r3, r7, #15
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2275      	movs	r2, #117	@ 0x75
 80012d6:	21d0      	movs	r1, #208	@ 0xd0
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f001 f9dd 	bl	8002698 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b68      	cmp	r3, #104	@ 0x68
 80012e2:	d13d      	bne.n	8001360 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80012e8:	2364      	movs	r3, #100	@ 0x64
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	f107 030e 	add.w	r3, r7, #14
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	226b      	movs	r2, #107	@ 0x6b
 80012fa:	21d0      	movs	r1, #208	@ 0xd0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f001 f8d1 	bl	80024a4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001302:	2307      	movs	r3, #7
 8001304:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001306:	2364      	movs	r3, #100	@ 0x64
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030e 	add.w	r3, r7, #14
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2219      	movs	r2, #25
 8001318:	21d0      	movs	r1, #208	@ 0xd0
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f001 f8c2 	bl	80024a4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001320:	2300      	movs	r3, #0
 8001322:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001324:	2364      	movs	r3, #100	@ 0x64
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	f107 030e 	add.w	r3, r7, #14
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	221c      	movs	r2, #28
 8001336:	21d0      	movs	r1, #208	@ 0xd0
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 f8b3 	bl	80024a4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001342:	2364      	movs	r3, #100	@ 0x64
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f107 030e 	add.w	r3, r7, #14
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	221b      	movs	r2, #27
 8001354:	21d0      	movs	r1, #208	@ 0xd0
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f001 f8a4 	bl	80024a4 <HAL_I2C_Mem_Write>
        return 0;
 800135c:	2300      	movs	r3, #0
 800135e:	e000      	b.n	8001362 <MPU6050_Init+0xa6>
    }
    return 1;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	0000      	movs	r0, r0
 800136c:	0000      	movs	r0, r0
	...

08001370 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001374:	b094      	sub	sp, #80	@ 0x50
 8001376:	af04      	add	r7, sp, #16
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800137c:	2364      	movs	r3, #100	@ 0x64
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	230e      	movs	r3, #14
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	223b      	movs	r2, #59	@ 0x3b
 800138e:	21d0      	movs	r1, #208	@ 0xd0
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 f981 	bl	8002698 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001396:	7a3b      	ldrb	r3, [r7, #8]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7a7b      	ldrb	r3, [r7, #9]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80013a8:	7abb      	ldrb	r3, [r7, #10]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80013ba:	7b3b      	ldrb	r3, [r7, #12]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80013da:	7c3b      	ldrb	r3, [r7, #16]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21a      	sxth	r2, r3
 80013e0:	7c7b      	ldrb	r3, [r7, #17]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80013ec:	7cbb      	ldrb	r3, [r7, #18]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80013fe:	7d3b      	ldrb	r3, [r7, #20]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	7d7b      	ldrb	r3, [r7, #21]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f830 	bl	800047c <__aeabi_i2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4bbd      	ldr	r3, [pc, #756]	@ (8001718 <MPU6050_Read_All+0x3a8>)
 8001422:	f7ff f9bf 	bl	80007a4 <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f820 	bl	800047c <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4bb5      	ldr	r3, [pc, #724]	@ (8001718 <MPU6050_Read_All+0x3a8>)
 8001442:	f7ff f9af 	bl	80007a4 <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	6839      	ldr	r1, [r7, #0]
 800144c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f810 	bl	800047c <__aeabi_i2d>
 800145c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001700 <MPU6050_Read_All+0x390>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f99f 	bl	80007a4 <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001470:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800171c <MPU6050_Read_All+0x3ac>
 8001480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001484:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001720 <MPU6050_Read_All+0x3b0>
 8001488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ffef 	bl	800047c <__aeabi_i2d>
 800149e:	a39a      	add	r3, pc, #616	@ (adr r3, 8001708 <MPU6050_Read_All+0x398>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f97e 	bl	80007a4 <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffdf 	bl	800047c <__aeabi_i2d>
 80014be:	a392      	add	r3, pc, #584	@ (adr r3, 8001708 <MPU6050_Read_All+0x398>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f96e 	bl	80007a4 <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffcf 	bl	800047c <__aeabi_i2d>
 80014de:	a38a      	add	r3, pc, #552	@ (adr r3, 8001708 <MPU6050_Read_All+0x398>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f95e 	bl	80007a4 <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80014f2:	f000 fc1d 	bl	8001d30 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001724 <MPU6050_Read_All+0x3b4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ffac 	bl	800045c <__aeabi_ui2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b87      	ldr	r3, [pc, #540]	@ (8001728 <MPU6050_Read_All+0x3b8>)
 800150a:	f7ff f94b 	bl	80007a4 <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001516:	f000 fc0b 	bl	8001d30 <HAL_GetTick>
 800151a:	4603      	mov	r3, r0
 800151c:	4a81      	ldr	r2, [pc, #516]	@ (8001724 <MPU6050_Read_All+0x3b4>)
 800151e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	461a      	mov	r2, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	fb03 f202 	mul.w	r2, r3, r2
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001538:	4619      	mov	r1, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff98 	bl	800047c <__aeabi_i2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	ec43 2b10 	vmov	d0, r2, r3
 8001554:	f003 f978 	bl	8004848 <sqrt>
 8001558:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001568:	f7ff fa5a 	bl	8000a20 <__aeabi_dcmpeq>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d11f      	bne.n	80015b2 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff7f 	bl	800047c <__aeabi_i2d>
 800157e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001582:	f7ff f90f 	bl	80007a4 <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	ec43 2b17 	vmov	d7, r2, r3
 800158e:	eeb0 0a47 	vmov.f32	s0, s14
 8001592:	eef0 0a67 	vmov.f32	s1, s15
 8001596:	f003 f983 	bl	80048a0 <atan>
 800159a:	ec51 0b10 	vmov	r0, r1, d0
 800159e:	a35c      	add	r3, pc, #368	@ (adr r3, 8001710 <MPU6050_Read_All+0x3a0>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7fe ffd4 	bl	8000550 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80015b0:	e005      	b.n	80015be <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	425b      	negs	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff58 	bl	800047c <__aeabi_i2d>
 80015cc:	4682      	mov	sl, r0
 80015ce:	468b      	mov	fp, r1
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff50 	bl	800047c <__aeabi_i2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	ec43 2b11 	vmov	d1, r2, r3
 80015e4:	ec4b ab10 	vmov	d0, sl, fp
 80015e8:	f003 f92c 	bl	8004844 <atan2>
 80015ec:	ec51 0b10 	vmov	r0, r1, d0
 80015f0:	a347      	add	r3, pc, #284	@ (adr r3, 8001710 <MPU6050_Read_All+0x3a0>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7fe ffab 	bl	8000550 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <MPU6050_Read_All+0x3bc>)
 8001608:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800160c:	f7ff fa12 	bl	8000a34 <__aeabi_dcmplt>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <MPU6050_Read_All+0x2bc>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	4b43      	ldr	r3, [pc, #268]	@ (8001730 <MPU6050_Read_All+0x3c0>)
 8001622:	f7ff fa25 	bl	8000a70 <__aeabi_dcmpgt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d114      	bne.n	8001656 <MPU6050_Read_All+0x2e6>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b3f      	ldr	r3, [pc, #252]	@ (8001730 <MPU6050_Read_All+0x3c0>)
 8001632:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001636:	f7ff fa1b 	bl	8000a70 <__aeabi_dcmpgt>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d015      	beq.n	800166c <MPU6050_Read_All+0x2fc>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <MPU6050_Read_All+0x3bc>)
 800164c:	f7ff f9f2 	bl	8000a34 <__aeabi_dcmplt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8001656:	4937      	ldr	r1, [pc, #220]	@ (8001734 <MPU6050_Read_All+0x3c4>)
 8001658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800165c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001660:	6839      	ldr	r1, [r7, #0]
 8001662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001666:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800166a:	e014      	b.n	8001696 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001672:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001676:	eeb0 1a47 	vmov.f32	s2, s14
 800167a:	eef0 1a67 	vmov.f32	s3, s15
 800167e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001682:	482c      	ldr	r0, [pc, #176]	@ (8001734 <MPU6050_Read_All+0x3c4>)
 8001684:	f000 f85a 	bl	800173c <Kalman_getAngle>
 8001688:	eeb0 7a40 	vmov.f32	s14, s0
 800168c:	eef0 7a60 	vmov.f32	s15, s1
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800169c:	4690      	mov	r8, r2
 800169e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <MPU6050_Read_All+0x3c0>)
 80016a8:	4640      	mov	r0, r8
 80016aa:	4649      	mov	r1, r9
 80016ac:	f7ff f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80016bc:	4614      	mov	r4, r2
 80016be:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80016ce:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80016d2:	eeb0 1a47 	vmov.f32	s2, s14
 80016d6:	eef0 1a67 	vmov.f32	s3, s15
 80016da:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80016de:	4816      	ldr	r0, [pc, #88]	@ (8001738 <MPU6050_Read_All+0x3c8>)
 80016e0:	f000 f82c 	bl	800173c <Kalman_getAngle>
 80016e4:	eeb0 7a40 	vmov.f32	s14, s0
 80016e8:	eef0 7a60 	vmov.f32	s15, s1
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 80016f2:	bf00      	nop
 80016f4:	3740      	adds	r7, #64	@ 0x40
 80016f6:	46bd      	mov	sp, r7
 80016f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fc:	f3af 8000 	nop.w
 8001700:	00000000 	.word	0x00000000
 8001704:	40cc2900 	.word	0x40cc2900
 8001708:	00000000 	.word	0x00000000
 800170c:	40606000 	.word	0x40606000
 8001710:	1a63c1f8 	.word	0x1a63c1f8
 8001714:	404ca5dc 	.word	0x404ca5dc
 8001718:	40d00000 	.word	0x40d00000
 800171c:	43aa0000 	.word	0x43aa0000
 8001720:	42121eb8 	.word	0x42121eb8
 8001724:	20000218 	.word	0x20000218
 8001728:	408f4000 	.word	0x408f4000
 800172c:	c0568000 	.word	0xc0568000
 8001730:	40568000 	.word	0x40568000
 8001734:	20000048 	.word	0x20000048
 8001738:	20000000 	.word	0x20000000

0800173c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b096      	sub	sp, #88	@ 0x58
 8001740:	af00      	add	r7, sp, #0
 8001742:	61f8      	str	r0, [r7, #28]
 8001744:	ed87 0b04 	vstr	d0, [r7, #16]
 8001748:	ed87 1b02 	vstr	d1, [r7, #8]
 800174c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800175a:	f7fe fd41 	bl	80001e0 <__aeabi_dsub>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800176c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001774:	f7fe feec 	bl	8000550 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fd30 	bl	80001e4 <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	69f9      	ldr	r1, [r7, #28]
 800178a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800179a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800179e:	f7fe fed7 	bl	8000550 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017b0:	f7fe fd16 	bl	80001e0 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017c2:	f7fe fd0d 	bl	80001e0 <__aeabi_dsub>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe fd06 	bl	80001e4 <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017e4:	f7fe feb4 	bl	8000550 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fcf8 	bl	80001e4 <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	69f9      	ldr	r1, [r7, #28]
 80017fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800180a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800180e:	f7fe fe9f 	bl	8000550 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fce1 	bl	80001e0 <__aeabi_dsub>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	69f9      	ldr	r1, [r7, #28]
 8001824:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001838:	f7fe fe8a 	bl	8000550 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fccc 	bl	80001e0 <__aeabi_dsub>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	69f9      	ldr	r1, [r7, #28]
 800184e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800185e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001862:	f7fe fe75 	bl	8000550 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fcb9 	bl	80001e4 <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	69f9      	ldr	r1, [r7, #28]
 8001878:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001888:	f7fe fcac 	bl	80001e4 <__adddf3>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800189a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800189e:	f7fe ff81 	bl	80007a4 <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80018b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018b4:	f7fe ff76 	bl	80007a4 <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ca:	f7fe fc89 	bl	80001e0 <__aeabi_dsub>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018e4:	f7fe fe34 	bl	8000550 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fc78 	bl	80001e4 <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	69f9      	ldr	r1, [r7, #28]
 80018fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001904:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800190c:	f7fe fe20 	bl	8000550 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fc64 	bl	80001e4 <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	69f9      	ldr	r1, [r7, #28]
 8001922:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800192c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001936:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001940:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001948:	f7fe fe02 	bl	8000550 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fc44 	bl	80001e0 <__aeabi_dsub>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	69f9      	ldr	r1, [r7, #28]
 800195e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001968:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800196c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001970:	f7fe fdee 	bl	8000550 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fc30 	bl	80001e0 <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	69f9      	ldr	r1, [r7, #28]
 8001986:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001990:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001998:	f7fe fdda 	bl	8000550 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fc1c 	bl	80001e0 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	69f9      	ldr	r1, [r7, #28]
 80019ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80019b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019c0:	f7fe fdc6 	bl	8000550 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fc08 	bl	80001e0 <__aeabi_dsub>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	69f9      	ldr	r1, [r7, #28]
 80019d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019e0:	ec43 2b17 	vmov	d7, r2, r3
};
 80019e4:	eeb0 0a47 	vmov.f32	s0, s14
 80019e8:	eef0 0a67 	vmov.f32	s1, s15
 80019ec:	3758      	adds	r7, #88	@ 0x58
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080019f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a02:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <HAL_MspInit+0x4c>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <HAL_MspInit+0x4c>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_I2C_MspInit+0x84>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d12b      	bne.n	8001abe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a82:	23c0      	movs	r3, #192	@ 0xc0
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a86:	2312      	movs	r3, #18
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a92:	2304      	movs	r3, #4
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <HAL_I2C_MspInit+0x8c>)
 8001a9e:	f000 fa39 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a08      	ldr	r2, [pc, #32]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001aac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_I2C_MspInit+0x88>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	@ 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_TIM_Base_MspInit+0x3c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10d      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_TIM_Base_MspInit+0x40>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <HAL_TIM_Base_MspInit+0x40>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <HAL_TIM_Base_MspInit+0x40>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a12      	ldr	r2, [pc, #72]	@ (8001b80 <HAL_TIM_MspPostInit+0x68>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d11e      	bne.n	8001b78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_TIM_MspPostInit+0x6c>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <HAL_TIM_MspPostInit+0x6c>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_TIM_MspPostInit+0x6c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <HAL_TIM_MspPostInit+0x70>)
 8001b74:	f000 f9ce 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40010000 	.word	0x40010000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 f891 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c14:	f7ff ffea 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	@ (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f002 fddd 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7ff f983 	bl	8000f4c <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001c54:	08004fd8 	.word	0x08004fd8
  ldr r2, =_sbss
 8001c58:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001c5c:	20000358 	.word	0x20000358

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_Init+0x40>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_Init+0x40>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f90d 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff feac 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f917 	bl	8001efa <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f8ed 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000090 	.word	0x20000090
 8001d00:	20000098 	.word	0x20000098
 8001d04:	20000094 	.word	0x20000094

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000098 	.word	0x20000098
 8001d2c:	2000021c 	.word	0x2000021c

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000021c 	.word	0x2000021c

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	@ (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	@ (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff47 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff5c 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffb0 	bl	8001e68 <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e159      	b.n	80021e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8148 	bne.w	80021de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d130      	bne.n	8001fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 0201 	and.w	r2, r3, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d017      	beq.n	8002004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d123      	bne.n	8002058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a2 	beq.w	80021de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b57      	ldr	r3, [pc, #348]	@ (80021fc <HAL_GPIO_Init+0x2e8>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a56      	ldr	r2, [pc, #344]	@ (80021fc <HAL_GPIO_Init+0x2e8>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b54      	ldr	r3, [pc, #336]	@ (80021fc <HAL_GPIO_Init+0x2e8>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a52      	ldr	r2, [pc, #328]	@ (8002200 <HAL_GPIO_Init+0x2ec>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a49      	ldr	r2, [pc, #292]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_GPIO_Init+0x202>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a48      	ldr	r2, [pc, #288]	@ (8002208 <HAL_GPIO_Init+0x2f4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x1fe>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a47      	ldr	r2, [pc, #284]	@ (800220c <HAL_GPIO_Init+0x2f8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x1fa>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a46      	ldr	r2, [pc, #280]	@ (8002210 <HAL_GPIO_Init+0x2fc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x1f6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a45      	ldr	r2, [pc, #276]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x1f2>
 8002102:	2304      	movs	r3, #4
 8002104:	e008      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002106:	2307      	movs	r3, #7
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x204>
 800210a:	2303      	movs	r3, #3
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x204>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002116:	2300      	movs	r3, #0
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002128:	4935      	ldr	r1, [pc, #212]	@ (8002200 <HAL_GPIO_Init+0x2ec>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002136:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <HAL_GPIO_Init+0x304>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002184:	4a24      	ldr	r2, [pc, #144]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800218a:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <HAL_GPIO_Init+0x304>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	f67f aea2 	bls.w	8001f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3724      	adds	r7, #36	@ 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40013c00 	.word	0x40013c00

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e12b      	b.n	8002486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fbfe 	bl	8001a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	@ 0x24
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800226e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800227e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002280:	f001 fc20 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8002284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a81      	ldr	r2, [pc, #516]	@ (8002490 <HAL_I2C_Init+0x274>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d807      	bhi.n	80022a0 <HAL_I2C_Init+0x84>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a80      	ldr	r2, [pc, #512]	@ (8002494 <HAL_I2C_Init+0x278>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e006      	b.n	80022ae <HAL_I2C_Init+0x92>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002498 <HAL_I2C_Init+0x27c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0e7      	b.n	8002486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a78      	ldr	r2, [pc, #480]	@ (800249c <HAL_I2C_Init+0x280>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9b      	lsrs	r3, r3, #18
 80022c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002490 <HAL_I2C_Init+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d802      	bhi.n	80022f0 <HAL_I2C_Init+0xd4>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3301      	adds	r3, #1
 80022ee:	e009      	b.n	8002304 <HAL_I2C_Init+0xe8>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a69      	ldr	r2, [pc, #420]	@ (80024a0 <HAL_I2C_Init+0x284>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	3301      	adds	r3, #1
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	430b      	orrs	r3, r1
 800230a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002316:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	495c      	ldr	r1, [pc, #368]	@ (8002490 <HAL_I2C_Init+0x274>)
 8002320:	428b      	cmp	r3, r1
 8002322:	d819      	bhi.n	8002358 <HAL_I2C_Init+0x13c>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e59      	subs	r1, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002338:	400b      	ands	r3, r1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_I2C_Init+0x138>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e59      	subs	r1, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fbb1 f3f3 	udiv	r3, r1, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	e051      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002354:	2304      	movs	r3, #4
 8002356:	e04f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <HAL_I2C_Init+0x168>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e012      	b.n	80023aa <HAL_I2C_Init+0x18e>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	0099      	lsls	r1, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Init+0x196>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e022      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_I2C_Init+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e58      	subs	r0, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6809      	ldr	r1, [r1, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002426:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6911      	ldr	r1, [r2, #16]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	430b      	orrs	r3, r1
 800243a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	000186a0 	.word	0x000186a0
 8002494:	001e847f 	.word	0x001e847f
 8002498:	003d08ff 	.word	0x003d08ff
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7ff fc37 	bl	8001d30 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	f040 80d9 	bne.w	8002684 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2319      	movs	r3, #25
 80024d8:	2201      	movs	r2, #1
 80024da:	496d      	ldr	r1, [pc, #436]	@ (8002690 <HAL_I2C_Mem_Write+0x1ec>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fc8b 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0cc      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Mem_Write+0x56>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0c5      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d007      	beq.n	8002520 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800252e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2221      	movs	r2, #33	@ 0x21
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2240      	movs	r2, #64	@ 0x40
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a4d      	ldr	r2, [pc, #308]	@ (8002694 <HAL_I2C_Mem_Write+0x1f0>)
 8002560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002562:	88f8      	ldrh	r0, [r7, #6]
 8002564:	893a      	ldrh	r2, [r7, #8]
 8002566:	8979      	ldrh	r1, [r7, #10]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4603      	mov	r3, r0
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fac2 	bl	8002afc <I2C_RequestMemoryWrite>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d052      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e081      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fd50 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	2b04      	cmp	r3, #4
 8002598:	d107      	bne.n	80025aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06b      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d11b      	bne.n	8002624 <HAL_I2C_Mem_Write+0x180>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1aa      	bne.n	8002582 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fd43 	bl	80030bc <I2C_WaitOnBTFFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	2b04      	cmp	r3, #4
 8002642:	d107      	bne.n	8002654 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002652:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e016      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	00100002 	.word	0x00100002
 8002694:	ffff0000 	.word	0xffff0000

08002698 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	@ 0x30
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	460b      	mov	r3, r1
 80026ac:	813b      	strh	r3, [r7, #8]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026b2:	f7ff fb3d 	bl	8001d30 <HAL_GetTick>
 80026b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	f040 8214 	bne.w	8002aee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2319      	movs	r3, #25
 80026cc:	2201      	movs	r2, #1
 80026ce:	497b      	ldr	r1, [pc, #492]	@ (80028bc <HAL_I2C_Mem_Read+0x224>)
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fb91 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
 80026de:	e207      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_I2C_Mem_Read+0x56>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e200      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d007      	beq.n	8002714 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2222      	movs	r2, #34	@ 0x22
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2240      	movs	r2, #64	@ 0x40
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002744:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <HAL_I2C_Mem_Read+0x228>)
 8002754:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002756:	88f8      	ldrh	r0, [r7, #6]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	8979      	ldrh	r1, [r7, #10]
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4603      	mov	r3, r0
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fa5e 	bl	8002c28 <I2C_RequestMemoryRead>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1bc      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d113      	bne.n	80027a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	623b      	str	r3, [r7, #32]
 8002792:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e190      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d11b      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e170      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d11b      	bne.n	8002826 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800280c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	e150      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800283c:	e144      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	2b03      	cmp	r3, #3
 8002844:	f200 80f1 	bhi.w	8002a2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	2b01      	cmp	r3, #1
 800284e:	d123      	bne.n	8002898 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002852:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fc79 	bl	800314c <I2C_WaitOnRXNEFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e145      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002896:	e117      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289c:	2b02      	cmp	r3, #2
 800289e:	d14e      	bne.n	800293e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a6:	2200      	movs	r2, #0
 80028a8:	4906      	ldr	r1, [pc, #24]	@ (80028c4 <HAL_I2C_Mem_Read+0x22c>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 faa4 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e11a      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
 80028ba:	bf00      	nop
 80028bc:	00100002 	.word	0x00100002
 80028c0:	ffff0000 	.word	0xffff0000
 80028c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800293c:	e0c4      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002944:	2200      	movs	r2, #0
 8002946:	496c      	ldr	r1, [pc, #432]	@ (8002af8 <HAL_I2C_Mem_Read+0x460>)
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fa55 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0cb      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a0:	2200      	movs	r2, #0
 80029a2:	4955      	ldr	r1, [pc, #340]	@ (8002af8 <HAL_I2C_Mem_Read+0x460>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fa27 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e09d      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a28:	e04e      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fb8c 	bl	800314c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e058      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d124      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a94:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f aeb6 	bne.w	800283e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3728      	adds	r7, #40	@ 0x28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00010004 	.word	0x00010004

08002afc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f960 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4c:	d103      	bne.n	8002b56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e05f      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	492d      	ldr	r1, [pc, #180]	@ (8002c24 <I2C_RequestMemoryWrite+0x128>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f9bb 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e04c      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa46 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e02b      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e021      	b.n	8002c18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be4:	6a39      	ldr	r1, [r7, #32]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fa20 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d107      	bne.n	8002c0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e005      	b.n	8002c1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	00010002 	.word	0x00010002

08002c28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	813b      	strh	r3, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f8c2 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c88:	d103      	bne.n	8002c92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0aa      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ca4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	4952      	ldr	r1, [pc, #328]	@ (8002df4 <I2C_RequestMemoryRead+0x1cc>)
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f91d 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e097      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f9a8 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d107      	bne.n	8002cfa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e076      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d04:	893b      	ldrh	r3, [r7, #8]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]
 8002d0e:	e021      	b.n	8002d54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f982 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d107      	bne.n	8002d46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e050      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4a:	893b      	ldrh	r3, [r7, #8]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d56:	6a39      	ldr	r1, [r7, #32]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f967 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d107      	bne.n	8002d7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e035      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f82b 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db6:	d103      	bne.n	8002dc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e013      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dc4:	897b      	ldrh	r3, [r7, #10]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	4906      	ldr	r1, [pc, #24]	@ (8002df4 <I2C_RequestMemoryRead+0x1cc>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f886 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	00010002 	.word	0x00010002

08002df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	e048      	b.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d044      	beq.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe ff8d 	bl	8001d30 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d139      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10d      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	e00c      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d116      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e023      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	0c1b      	lsrs	r3, r3, #16
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10d      	bne.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	e00c      	b.n	8002edc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d093      	beq.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002efa:	e071      	b.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f0a:	d123      	bne.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e067      	b.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d041      	beq.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7fe fee8 	bl	8001d30 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d136      	bne.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10c      	bne.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4013      	ands	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e00b      	b.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e021      	b.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10c      	bne.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e00b      	b.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4013      	ands	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	f47f af6d 	bne.w	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003038:	e034      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f8e3 	bl	8003206 <I2C_IsAcknowledgeFailed>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e034      	b.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d028      	beq.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fe6d 	bl	8001d30 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11d      	bne.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	2b80      	cmp	r3, #128	@ 0x80
 8003074:	d016      	beq.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d1c3      	bne.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c8:	e034      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f89b 	bl	8003206 <I2C_IsAcknowledgeFailed>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e034      	b.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d028      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fe fe25 	bl	8001d30 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11d      	bne.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d016      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e007      	b.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d1c3      	bne.n	80030ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003158:	e049      	b.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b10      	cmp	r3, #16
 8003166:	d119      	bne.n	800319c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0210 	mvn.w	r2, #16
 8003170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e030      	b.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7fe fdc8 	bl	8001d30 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11d      	bne.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d016      	beq.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f043 0220 	orr.w	r2, r3, #32
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e007      	b.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d1ae      	bne.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321c:	d11b      	bne.n	8003256 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003226:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e267      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d075      	beq.n	800336e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003282:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b04      	cmp	r3, #4
 800328c:	d00c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b85      	ldr	r3, [pc, #532]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003296:	2b08      	cmp	r3, #8
 8003298:	d112      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329a:	4b82      	ldr	r3, [pc, #520]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	4b7e      	ldr	r3, [pc, #504]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05b      	beq.n	800336c <HAL_RCC_OscConfig+0x108>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d157      	bne.n	800336c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e242      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x74>
 80032ca:	4b76      	ldr	r3, [pc, #472]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a75      	ldr	r2, [pc, #468]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b70      	ldr	r3, [pc, #448]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6f      	ldr	r2, [pc, #444]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b6d      	ldr	r3, [pc, #436]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6c      	ldr	r2, [pc, #432]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032fc:	4b69      	ldr	r3, [pc, #420]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a68      	ldr	r2, [pc, #416]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b66      	ldr	r3, [pc, #408]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a65      	ldr	r2, [pc, #404]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fd08 	bl	8001d30 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe fd04 	bl	8001d30 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e207      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b5b      	ldr	r3, [pc, #364]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xc0>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fcf4 	bl	8001d30 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fcf0 	bl	8001d30 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	@ 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1f3      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	4b51      	ldr	r3, [pc, #324]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0xe8>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800337a:	4b4a      	ldr	r3, [pc, #296]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11c      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003392:	4b44      	ldr	r3, [pc, #272]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	4b41      	ldr	r3, [pc, #260]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1c7      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4937      	ldr	r1, [pc, #220]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	e03a      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4b34      	ldr	r3, [pc, #208]	@ (80034a8 <HAL_RCC_OscConfig+0x244>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fca9 	bl	8001d30 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fe fca5 	bl	8001d30 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e1a8      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f4:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003400:	4b28      	ldr	r3, [pc, #160]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4925      	ldr	r1, [pc, #148]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003416:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <HAL_RCC_OscConfig+0x244>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe fc88 	bl	8001d30 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe fc84 	bl	8001d30 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e187      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	4b1b      	ldr	r3, [pc, #108]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d036      	beq.n	80034bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003456:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <HAL_RCC_OscConfig+0x248>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fe fc68 	bl	8001d30 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003464:	f7fe fc64 	bl	8001d30 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e167      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <HAL_RCC_OscConfig+0x240>)
 8003478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x200>
 8003482:	e01b      	b.n	80034bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCC_OscConfig+0x248>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fe fc51 	bl	8001d30 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	e00e      	b.n	80034b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003492:	f7fe fc4d 	bl	8001d30 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d907      	bls.n	80034b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e150      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
 80034a4:	40023800 	.word	0x40023800
 80034a8:	42470000 	.word	0x42470000
 80034ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	4b88      	ldr	r3, [pc, #544]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ea      	bne.n	8003492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8097 	beq.w	80035f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ce:	4b81      	ldr	r3, [pc, #516]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10f      	bne.n	80034fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	4b7d      	ldr	r3, [pc, #500]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	4a7c      	ldr	r2, [pc, #496]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ea:	4b7a      	ldr	r3, [pc, #488]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fa:	4b77      	ldr	r3, [pc, #476]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003506:	4b74      	ldr	r3, [pc, #464]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a73      	ldr	r2, [pc, #460]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003512:	f7fe fc0d 	bl	8001d30 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351a:	f7fe fc09 	bl	8001d30 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e10c      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCC_OscConfig+0x474>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x2ea>
 8003540:	4b64      	ldr	r3, [pc, #400]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003544:	4a63      	ldr	r2, [pc, #396]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	@ 0x70
 800354c:	e01c      	b.n	8003588 <HAL_RCC_OscConfig+0x324>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b05      	cmp	r3, #5
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x30c>
 8003556:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	4a5e      	ldr	r2, [pc, #376]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6713      	str	r3, [r2, #112]	@ 0x70
 8003562:	4b5c      	ldr	r3, [pc, #368]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	4a5b      	ldr	r2, [pc, #364]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6713      	str	r3, [r2, #112]	@ 0x70
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0x324>
 8003570:	4b58      	ldr	r3, [pc, #352]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003574:	4a57      	ldr	r2, [pc, #348]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6713      	str	r3, [r2, #112]	@ 0x70
 800357c:	4b55      	ldr	r3, [pc, #340]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003580:	4a54      	ldr	r2, [pc, #336]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003582:	f023 0304 	bic.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe fbce 	bl	8001d30 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	e00a      	b.n	80035ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	f7fe fbca 	bl	8001d30 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e0cb      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ae:	4b49      	ldr	r3, [pc, #292]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ee      	beq.n	8003598 <HAL_RCC_OscConfig+0x334>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fe fbb8 	bl	8001d30 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fe fbb4 	bl	8001d30 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0b5      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035da:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ee      	bne.n	80035c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ec:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	4a38      	ldr	r2, [pc, #224]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80035f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a1 	beq.w	8003744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003602:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b08      	cmp	r3, #8
 800360c:	d05c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d141      	bne.n	800369a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_RCC_OscConfig+0x478>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe fb88 	bl	8001d30 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fb84 	bl	8001d30 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e087      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	3b01      	subs	r3, #1
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	491b      	ldr	r1, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x478>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe fb5d 	bl	8001d30 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe fb59 	bl	8001d30 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e05c      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x416>
 8003698:	e054      	b.n	8003744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_RCC_OscConfig+0x478>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe fb46 	bl	8001d30 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fb42 	bl	8001d30 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e045      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_OscConfig+0x470>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x444>
 80036c6:	e03d      	b.n	8003744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e038      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x4ec>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d028      	beq.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d121      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d11a      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	3b01      	subs	r3, #1
 800372a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0cc      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b68      	ldr	r3, [pc, #416]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d90c      	bls.n	8003790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b65      	ldr	r3, [pc, #404]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b63      	ldr	r3, [pc, #396]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0b8      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a8:	4b59      	ldr	r3, [pc, #356]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a58      	ldr	r2, [pc, #352]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c0:	4b53      	ldr	r3, [pc, #332]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a52      	ldr	r2, [pc, #328]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037cc:	4b50      	ldr	r3, [pc, #320]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	494d      	ldr	r1, [pc, #308]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d044      	beq.n	8003874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b47      	ldr	r3, [pc, #284]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d119      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d003      	beq.n	8003812 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380e:	2b03      	cmp	r3, #3
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	4b3f      	ldr	r3, [pc, #252]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	4b3b      	ldr	r3, [pc, #236]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e067      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003832:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4934      	ldr	r1, [pc, #208]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003844:	f7fe fa74 	bl	8001d30 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7fe fa70 	bl	8001d30 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e04f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b2b      	ldr	r3, [pc, #172]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 020c 	and.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1eb      	bne.n	800384c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003874:	4b25      	ldr	r3, [pc, #148]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d20c      	bcs.n	800389c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b22      	ldr	r3, [pc, #136]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e032      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a8:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4916      	ldr	r1, [pc, #88]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	490e      	ldr	r1, [pc, #56]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038da:	f000 f821 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	490a      	ldr	r1, [pc, #40]	@ (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	4a09      	ldr	r2, [pc, #36]	@ (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038f6:	4b09      	ldr	r3, [pc, #36]	@ (800391c <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe f9d4 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023c00 	.word	0x40023c00
 8003910:	40023800 	.word	0x40023800
 8003914:	08004f40 	.word	0x08004f40
 8003918:	20000090 	.word	0x20000090
 800391c:	20000094 	.word	0x20000094

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b090      	sub	sp, #64	@ 0x40
 8003926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d00d      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x40>
 8003944:	2b08      	cmp	r3, #8
 8003946:	f200 80a1 	bhi.w	8003a8c <HAL_RCC_GetSysClockFreq+0x16c>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x34>
 800394e:	2b04      	cmp	r3, #4
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0x3a>
 8003952:	e09b      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003956:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003958:	e09b      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800395a:	4b53      	ldr	r3, [pc, #332]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800395c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800395e:	e098      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003960:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003968:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800396a:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003976:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	2200      	movs	r2, #0
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	627a      	str	r2, [r7, #36]	@ 0x24
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003988:	2100      	movs	r1, #0
 800398a:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800398c:	fb03 f201 	mul.w	r2, r3, r1
 8003990:	2300      	movs	r3, #0
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	4413      	add	r3, r2
 8003998:	4a43      	ldr	r2, [pc, #268]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800399a:	fba0 1202 	umull	r1, r2, r0, r2
 800399e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039a0:	460a      	mov	r2, r1
 80039a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039a6:	4413      	add	r3, r2
 80039a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ac:	2200      	movs	r2, #0
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	61fa      	str	r2, [r7, #28]
 80039b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039ba:	f7fd f8e9 	bl	8000b90 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4613      	mov	r3, r2
 80039c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039c6:	e053      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c8:	4b35      	ldr	r3, [pc, #212]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	2200      	movs	r2, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	617a      	str	r2, [r7, #20]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039da:	f04f 0b00 	mov.w	fp, #0
 80039de:	4652      	mov	r2, sl
 80039e0:	465b      	mov	r3, fp
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	0159      	lsls	r1, r3, #5
 80039ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f0:	0150      	lsls	r0, r2, #5
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	ebb2 080a 	subs.w	r8, r2, sl
 80039fa:	eb63 090b 	sbc.w	r9, r3, fp
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a12:	ebb2 0408 	subs.w	r4, r2, r8
 8003a16:	eb63 0509 	sbc.w	r5, r3, r9
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	00eb      	lsls	r3, r5, #3
 8003a24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a28:	00e2      	lsls	r2, r4, #3
 8003a2a:	4614      	mov	r4, r2
 8003a2c:	461d      	mov	r5, r3
 8003a2e:	eb14 030a 	adds.w	r3, r4, sl
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	eb45 030b 	adc.w	r3, r5, fp
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a46:	4629      	mov	r1, r5
 8003a48:	028b      	lsls	r3, r1, #10
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a50:	4621      	mov	r1, r4
 8003a52:	028a      	lsls	r2, r1, #10
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	60fa      	str	r2, [r7, #12]
 8003a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a64:	f7fd f894 	bl	8000b90 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3740      	adds	r7, #64	@ 0x40
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	017d7840 	.word	0x017d7840

08003aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	@ (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000090 	.word	0x20000090

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac8:	f7ff fff0 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0a9b      	lsrs	r3, r3, #10
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4903      	ldr	r1, [pc, #12]	@ (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08004f50 	.word	0x08004f50

08003aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e041      	b.n	8003b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd ffde 	bl	8001ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f000 fac0 	bl	80040b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e041      	b.n	8003c20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f839 	bl	8003c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 fa71 	bl	80040b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start+0x24>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e022      	b.n	8003ca6 <HAL_TIM_PWM_Start+0x6a>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d109      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x3e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e015      	b.n	8003ca6 <HAL_TIM_PWM_Start+0x6a>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_TIM_PWM_Start+0x58>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e008      	b.n	8003ca6 <HAL_TIM_PWM_Start+0x6a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e068      	b.n	8003d80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_PWM_Start+0x82>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cbc:	e013      	b.n	8003ce6 <HAL_TIM_PWM_Start+0xaa>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_PWM_Start+0x92>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ccc:	e00b      	b.n	8003ce6 <HAL_TIM_PWM_Start+0xaa>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_PWM_Start+0xa2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cdc:	e003      	b.n	8003ce6 <HAL_TIM_PWM_Start+0xaa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2201      	movs	r2, #1
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fc90 	bl	8004614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	@ (8003d88 <HAL_TIM_PWM_Start+0x14c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1d      	ldr	r2, [pc, #116]	@ (8003d88 <HAL_TIM_PWM_Start+0x14c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x10e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d013      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x10e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a19      	ldr	r2, [pc, #100]	@ (8003d8c <HAL_TIM_PWM_Start+0x150>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x10e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a17      	ldr	r2, [pc, #92]	@ (8003d90 <HAL_TIM_PWM_Start+0x154>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x10e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a16      	ldr	r2, [pc, #88]	@ (8003d94 <HAL_TIM_PWM_Start+0x158>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x10e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <HAL_TIM_PWM_Start+0x15c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d111      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b06      	cmp	r3, #6
 8003d5a:	d010      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	e007      	b.n	8003d7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40000c00 	.word	0x40000c00
 8003d98:	40014000 	.word	0x40014000

08003d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e0ae      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	f200 809f 	bhi.w	8003f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dca:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003f09 	.word	0x08003f09
 8003dd8:	08003f09 	.word	0x08003f09
 8003ddc:	08003f09 	.word	0x08003f09
 8003de0:	08003e45 	.word	0x08003e45
 8003de4:	08003f09 	.word	0x08003f09
 8003de8:	08003f09 	.word	0x08003f09
 8003dec:	08003f09 	.word	0x08003f09
 8003df0:	08003e87 	.word	0x08003e87
 8003df4:	08003f09 	.word	0x08003f09
 8003df8:	08003f09 	.word	0x08003f09
 8003dfc:	08003f09 	.word	0x08003f09
 8003e00:	08003ec7 	.word	0x08003ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f9dc 	bl	80041c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0208 	orr.w	r2, r2, #8
 8003e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	619a      	str	r2, [r3, #24]
      break;
 8003e42:	e064      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fa22 	bl	8004294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	619a      	str	r2, [r3, #24]
      break;
 8003e84:	e043      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fa6d 	bl	800436c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0208 	orr.w	r2, r2, #8
 8003ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0204 	bic.w	r2, r2, #4
 8003eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	61da      	str	r2, [r3, #28]
      break;
 8003ec4:	e023      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fab7 	bl	8004440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69d9      	ldr	r1, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	021a      	lsls	r2, r3, #8
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	61da      	str	r2, [r3, #28]
      break;
 8003f06:	e002      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIM_ConfigClockSource+0x1c>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e0b4      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x186>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f74:	d03e      	beq.n	8003ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f7a:	f200 8087 	bhi.w	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	f000 8086 	beq.w	8004092 <HAL_TIM_ConfigClockSource+0x172>
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8a:	d87f      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b70      	cmp	r3, #112	@ 0x70
 8003f8e:	d01a      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8003f90:	2b70      	cmp	r3, #112	@ 0x70
 8003f92:	d87b      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b60      	cmp	r3, #96	@ 0x60
 8003f96:	d050      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x11a>
 8003f98:	2b60      	cmp	r3, #96	@ 0x60
 8003f9a:	d877      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b50      	cmp	r3, #80	@ 0x50
 8003f9e:	d03c      	beq.n	800401a <HAL_TIM_ConfigClockSource+0xfa>
 8003fa0:	2b50      	cmp	r3, #80	@ 0x50
 8003fa2:	d873      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b40      	cmp	r3, #64	@ 0x40
 8003fa6:	d058      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x13a>
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d86f      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b30      	cmp	r3, #48	@ 0x30
 8003fae:	d064      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb0:	2b30      	cmp	r3, #48	@ 0x30
 8003fb2:	d86b      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d060      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d867      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d05c      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d05a      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fc4:	e062      	b.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd6:	f000 fafd 	bl	80045d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	609a      	str	r2, [r3, #8]
      break;
 8003ff2:	e04f      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004004:	f000 fae6 	bl	80045d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004016:	609a      	str	r2, [r3, #8]
      break;
 8004018:	e03c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	461a      	mov	r2, r3
 8004028:	f000 fa5a 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2150      	movs	r1, #80	@ 0x50
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fab3 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8004038:	e02c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004046:	461a      	mov	r2, r3
 8004048:	f000 fa79 	bl	800453e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2160      	movs	r1, #96	@ 0x60
 8004052:	4618      	mov	r0, r3
 8004054:	f000 faa3 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8004058:	e01c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fa3a 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2140      	movs	r1, #64	@ 0x40
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fa93 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8004078:	e00c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fa8a 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 800408a:	e003      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e000      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a3a      	ldr	r2, [pc, #232]	@ (80041ac <TIM_Base_SetConfig+0xfc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00f      	beq.n	80040e8 <TIM_Base_SetConfig+0x38>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ce:	d00b      	beq.n	80040e8 <TIM_Base_SetConfig+0x38>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <TIM_Base_SetConfig+0x100>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_Base_SetConfig+0x38>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a36      	ldr	r2, [pc, #216]	@ (80041b4 <TIM_Base_SetConfig+0x104>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0x38>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a35      	ldr	r2, [pc, #212]	@ (80041b8 <TIM_Base_SetConfig+0x108>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	@ (80041ac <TIM_Base_SetConfig+0xfc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01b      	beq.n	800413a <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004108:	d017      	beq.n	800413a <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a28      	ldr	r2, [pc, #160]	@ (80041b0 <TIM_Base_SetConfig+0x100>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a27      	ldr	r2, [pc, #156]	@ (80041b4 <TIM_Base_SetConfig+0x104>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00f      	beq.n	800413a <TIM_Base_SetConfig+0x8a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <TIM_Base_SetConfig+0x108>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00b      	beq.n	800413a <TIM_Base_SetConfig+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a25      	ldr	r2, [pc, #148]	@ (80041bc <TIM_Base_SetConfig+0x10c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d007      	beq.n	800413a <TIM_Base_SetConfig+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a24      	ldr	r2, [pc, #144]	@ (80041c0 <TIM_Base_SetConfig+0x110>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_Base_SetConfig+0x8a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a23      	ldr	r2, [pc, #140]	@ (80041c4 <TIM_Base_SetConfig+0x114>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d108      	bne.n	800414c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <TIM_Base_SetConfig+0xfc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d103      	bne.n	8004180 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	611a      	str	r2, [r3, #16]
  }
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800

080041c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f023 0201 	bic.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 0302 	bic.w	r3, r3, #2
 8004210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <TIM_OC1_SetConfig+0xc8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d10c      	bne.n	800423e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0308 	bic.w	r3, r3, #8
 800422a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <TIM_OC1_SetConfig+0xc8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	621a      	str	r2, [r3, #32]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40010000 	.word	0x40010000

08004294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 0210 	bic.w	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0320 	bic.w	r3, r3, #32
 80042de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <TIM_OC2_SetConfig+0xd4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10d      	bne.n	8004310 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a15      	ldr	r2, [pc, #84]	@ (8004368 <TIM_OC2_SetConfig+0xd4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d113      	bne.n	8004340 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800431e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000

0800436c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	@ (800443c <TIM_OC3_SetConfig+0xd0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10d      	bne.n	80043e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a14      	ldr	r2, [pc, #80]	@ (800443c <TIM_OC3_SetConfig+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d113      	bne.n	8004416 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40010000 	.word	0x40010000

08004440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800448a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <TIM_OC4_SetConfig+0x9c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d109      	bne.n	80044b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000

080044e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800450a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 030a 	bic.w	r3, r3, #10
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453e:	b480      	push	{r7}
 8004540:	b087      	sub	sp, #28
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 0210 	bic.w	r2, r3, #16
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	031b      	lsls	r3, r3, #12
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800457a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f043 0307 	orr.w	r3, r3, #7
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	021a      	lsls	r2, r3, #8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2201      	movs	r2, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 031f 	and.w	r3, r3, #31
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004674:	2302      	movs	r3, #2
 8004676:	e050      	b.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c4:	d013      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a18      	ldr	r2, [pc, #96]	@ (800472c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a13      	ldr	r2, [pc, #76]	@ (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10c      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40014000 	.word	0x40014000

0800473c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004754:	2302      	movs	r3, #2
 8004756:	e03d      	b.n	80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <memset>:
 80047e0:	4402      	add	r2, r0
 80047e2:	4603      	mov	r3, r0
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d100      	bne.n	80047ea <memset+0xa>
 80047e8:	4770      	bx	lr
 80047ea:	f803 1b01 	strb.w	r1, [r3], #1
 80047ee:	e7f9      	b.n	80047e4 <memset+0x4>

080047f0 <__errno>:
 80047f0:	4b01      	ldr	r3, [pc, #4]	@ (80047f8 <__errno+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	2000009c 	.word	0x2000009c

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	@ (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	@ (8004840 <__libc_init_array+0x44>)
 8004810:	f000 fb88 	bl	8004f24 <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	08004fd0 	.word	0x08004fd0
 8004838:	08004fd0 	.word	0x08004fd0
 800483c:	08004fd0 	.word	0x08004fd0
 8004840:	08004fd4 	.word	0x08004fd4

08004844 <atan2>:
 8004844:	f000 baa8 	b.w	8004d98 <__ieee754_atan2>

08004848 <sqrt>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	ed2d 8b02 	vpush	{d8}
 800484e:	ec55 4b10 	vmov	r4, r5, d0
 8004852:	f000 f9c5 	bl	8004be0 <__ieee754_sqrt>
 8004856:	4622      	mov	r2, r4
 8004858:	462b      	mov	r3, r5
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	eeb0 8a40 	vmov.f32	s16, s0
 8004862:	eef0 8a60 	vmov.f32	s17, s1
 8004866:	f7fc f90d 	bl	8000a84 <__aeabi_dcmpun>
 800486a:	b990      	cbnz	r0, 8004892 <sqrt+0x4a>
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	4620      	mov	r0, r4
 8004872:	4629      	mov	r1, r5
 8004874:	f7fc f8de 	bl	8000a34 <__aeabi_dcmplt>
 8004878:	b158      	cbz	r0, 8004892 <sqrt+0x4a>
 800487a:	f7ff ffb9 	bl	80047f0 <__errno>
 800487e:	2321      	movs	r3, #33	@ 0x21
 8004880:	6003      	str	r3, [r0, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	2300      	movs	r3, #0
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	f7fb ff8b 	bl	80007a4 <__aeabi_ddiv>
 800488e:	ec41 0b18 	vmov	d8, r0, r1
 8004892:	eeb0 0a48 	vmov.f32	s0, s16
 8004896:	eef0 0a68 	vmov.f32	s1, s17
 800489a:	ecbd 8b02 	vpop	{d8}
 800489e:	bd38      	pop	{r3, r4, r5, pc}

080048a0 <atan>:
 80048a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	ec55 4b10 	vmov	r4, r5, d0
 80048a8:	4bbf      	ldr	r3, [pc, #764]	@ (8004ba8 <atan+0x308>)
 80048aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80048ae:	429e      	cmp	r6, r3
 80048b0:	46ab      	mov	fp, r5
 80048b2:	d918      	bls.n	80048e6 <atan+0x46>
 80048b4:	4bbd      	ldr	r3, [pc, #756]	@ (8004bac <atan+0x30c>)
 80048b6:	429e      	cmp	r6, r3
 80048b8:	d801      	bhi.n	80048be <atan+0x1e>
 80048ba:	d109      	bne.n	80048d0 <atan+0x30>
 80048bc:	b144      	cbz	r4, 80048d0 <atan+0x30>
 80048be:	4622      	mov	r2, r4
 80048c0:	462b      	mov	r3, r5
 80048c2:	4620      	mov	r0, r4
 80048c4:	4629      	mov	r1, r5
 80048c6:	f7fb fc8d 	bl	80001e4 <__adddf3>
 80048ca:	4604      	mov	r4, r0
 80048cc:	460d      	mov	r5, r1
 80048ce:	e006      	b.n	80048de <atan+0x3e>
 80048d0:	f1bb 0f00 	cmp.w	fp, #0
 80048d4:	f340 812b 	ble.w	8004b2e <atan+0x28e>
 80048d8:	a597      	add	r5, pc, #604	@ (adr r5, 8004b38 <atan+0x298>)
 80048da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80048de:	ec45 4b10 	vmov	d0, r4, r5
 80048e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	4bb2      	ldr	r3, [pc, #712]	@ (8004bb0 <atan+0x310>)
 80048e8:	429e      	cmp	r6, r3
 80048ea:	d813      	bhi.n	8004914 <atan+0x74>
 80048ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80048f0:	429e      	cmp	r6, r3
 80048f2:	d80c      	bhi.n	800490e <atan+0x6e>
 80048f4:	a392      	add	r3, pc, #584	@ (adr r3, 8004b40 <atan+0x2a0>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	4620      	mov	r0, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7fb fc71 	bl	80001e4 <__adddf3>
 8004902:	4bac      	ldr	r3, [pc, #688]	@ (8004bb4 <atan+0x314>)
 8004904:	2200      	movs	r2, #0
 8004906:	f7fc f8b3 	bl	8000a70 <__aeabi_dcmpgt>
 800490a:	2800      	cmp	r0, #0
 800490c:	d1e7      	bne.n	80048de <atan+0x3e>
 800490e:	f04f 3aff 	mov.w	sl, #4294967295
 8004912:	e029      	b.n	8004968 <atan+0xc8>
 8004914:	f000 f95c 	bl	8004bd0 <fabs>
 8004918:	4ba7      	ldr	r3, [pc, #668]	@ (8004bb8 <atan+0x318>)
 800491a:	429e      	cmp	r6, r3
 800491c:	ec55 4b10 	vmov	r4, r5, d0
 8004920:	f200 80bc 	bhi.w	8004a9c <atan+0x1fc>
 8004924:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8004928:	429e      	cmp	r6, r3
 800492a:	f200 809e 	bhi.w	8004a6a <atan+0x1ca>
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f7fb fc55 	bl	80001e4 <__adddf3>
 800493a:	4b9e      	ldr	r3, [pc, #632]	@ (8004bb4 <atan+0x314>)
 800493c:	2200      	movs	r2, #0
 800493e:	f7fb fc4f 	bl	80001e0 <__aeabi_dsub>
 8004942:	2200      	movs	r2, #0
 8004944:	4606      	mov	r6, r0
 8004946:	460f      	mov	r7, r1
 8004948:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800494c:	4620      	mov	r0, r4
 800494e:	4629      	mov	r1, r5
 8004950:	f7fb fc48 	bl	80001e4 <__adddf3>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	f7fb ff22 	bl	80007a4 <__aeabi_ddiv>
 8004960:	f04f 0a00 	mov.w	sl, #0
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
 8004968:	4622      	mov	r2, r4
 800496a:	462b      	mov	r3, r5
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fb fdee 	bl	8000550 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4680      	mov	r8, r0
 800497a:	4689      	mov	r9, r1
 800497c:	f7fb fde8 	bl	8000550 <__aeabi_dmul>
 8004980:	a371      	add	r3, pc, #452	@ (adr r3, 8004b48 <atan+0x2a8>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	4606      	mov	r6, r0
 8004988:	460f      	mov	r7, r1
 800498a:	f7fb fde1 	bl	8000550 <__aeabi_dmul>
 800498e:	a370      	add	r3, pc, #448	@ (adr r3, 8004b50 <atan+0x2b0>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f7fb fc26 	bl	80001e4 <__adddf3>
 8004998:	4632      	mov	r2, r6
 800499a:	463b      	mov	r3, r7
 800499c:	f7fb fdd8 	bl	8000550 <__aeabi_dmul>
 80049a0:	a36d      	add	r3, pc, #436	@ (adr r3, 8004b58 <atan+0x2b8>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fc1d 	bl	80001e4 <__adddf3>
 80049aa:	4632      	mov	r2, r6
 80049ac:	463b      	mov	r3, r7
 80049ae:	f7fb fdcf 	bl	8000550 <__aeabi_dmul>
 80049b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8004b60 <atan+0x2c0>)
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f7fb fc14 	bl	80001e4 <__adddf3>
 80049bc:	4632      	mov	r2, r6
 80049be:	463b      	mov	r3, r7
 80049c0:	f7fb fdc6 	bl	8000550 <__aeabi_dmul>
 80049c4:	a368      	add	r3, pc, #416	@ (adr r3, 8004b68 <atan+0x2c8>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f7fb fc0b 	bl	80001e4 <__adddf3>
 80049ce:	4632      	mov	r2, r6
 80049d0:	463b      	mov	r3, r7
 80049d2:	f7fb fdbd 	bl	8000550 <__aeabi_dmul>
 80049d6:	a366      	add	r3, pc, #408	@ (adr r3, 8004b70 <atan+0x2d0>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb fc02 	bl	80001e4 <__adddf3>
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	f7fb fdb4 	bl	8000550 <__aeabi_dmul>
 80049e8:	a363      	add	r3, pc, #396	@ (adr r3, 8004b78 <atan+0x2d8>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	4680      	mov	r8, r0
 80049f0:	4689      	mov	r9, r1
 80049f2:	4630      	mov	r0, r6
 80049f4:	4639      	mov	r1, r7
 80049f6:	f7fb fdab 	bl	8000550 <__aeabi_dmul>
 80049fa:	a361      	add	r3, pc, #388	@ (adr r3, 8004b80 <atan+0x2e0>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f7fb fbee 	bl	80001e0 <__aeabi_dsub>
 8004a04:	4632      	mov	r2, r6
 8004a06:	463b      	mov	r3, r7
 8004a08:	f7fb fda2 	bl	8000550 <__aeabi_dmul>
 8004a0c:	a35e      	add	r3, pc, #376	@ (adr r3, 8004b88 <atan+0x2e8>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fb fbe5 	bl	80001e0 <__aeabi_dsub>
 8004a16:	4632      	mov	r2, r6
 8004a18:	463b      	mov	r3, r7
 8004a1a:	f7fb fd99 	bl	8000550 <__aeabi_dmul>
 8004a1e:	a35c      	add	r3, pc, #368	@ (adr r3, 8004b90 <atan+0x2f0>)
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f7fb fbdc 	bl	80001e0 <__aeabi_dsub>
 8004a28:	4632      	mov	r2, r6
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	f7fb fd90 	bl	8000550 <__aeabi_dmul>
 8004a30:	a359      	add	r3, pc, #356	@ (adr r3, 8004b98 <atan+0x2f8>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f7fb fbd3 	bl	80001e0 <__aeabi_dsub>
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	463b      	mov	r3, r7
 8004a3e:	f7fb fd87 	bl	8000550 <__aeabi_dmul>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4640      	mov	r0, r8
 8004a48:	4649      	mov	r1, r9
 8004a4a:	f7fb fbcb 	bl	80001e4 <__adddf3>
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	f7fb fd7d 	bl	8000550 <__aeabi_dmul>
 8004a56:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	d148      	bne.n	8004af2 <atan+0x252>
 8004a60:	4620      	mov	r0, r4
 8004a62:	4629      	mov	r1, r5
 8004a64:	f7fb fbbc 	bl	80001e0 <__aeabi_dsub>
 8004a68:	e72f      	b.n	80048ca <atan+0x2a>
 8004a6a:	4b52      	ldr	r3, [pc, #328]	@ (8004bb4 <atan+0x314>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fb fbb5 	bl	80001e0 <__aeabi_dsub>
 8004a76:	4b4f      	ldr	r3, [pc, #316]	@ (8004bb4 <atan+0x314>)
 8004a78:	4606      	mov	r6, r0
 8004a7a:	460f      	mov	r7, r1
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4620      	mov	r0, r4
 8004a80:	4629      	mov	r1, r5
 8004a82:	f7fb fbaf 	bl	80001e4 <__adddf3>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	4639      	mov	r1, r7
 8004a8e:	f7fb fe89 	bl	80007a4 <__aeabi_ddiv>
 8004a92:	f04f 0a01 	mov.w	sl, #1
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
 8004a9a:	e765      	b.n	8004968 <atan+0xc8>
 8004a9c:	4b47      	ldr	r3, [pc, #284]	@ (8004bbc <atan+0x31c>)
 8004a9e:	429e      	cmp	r6, r3
 8004aa0:	d21c      	bcs.n	8004adc <atan+0x23c>
 8004aa2:	4b47      	ldr	r3, [pc, #284]	@ (8004bc0 <atan+0x320>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fb fb99 	bl	80001e0 <__aeabi_dsub>
 8004aae:	4b44      	ldr	r3, [pc, #272]	@ (8004bc0 <atan+0x320>)
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	460f      	mov	r7, r1
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f7fb fd49 	bl	8000550 <__aeabi_dmul>
 8004abe:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb4 <atan+0x314>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f7fb fb8f 	bl	80001e4 <__adddf3>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4630      	mov	r0, r6
 8004acc:	4639      	mov	r1, r7
 8004ace:	f7fb fe69 	bl	80007a4 <__aeabi_ddiv>
 8004ad2:	f04f 0a02 	mov.w	sl, #2
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	460d      	mov	r5, r1
 8004ada:	e745      	b.n	8004968 <atan+0xc8>
 8004adc:	4622      	mov	r2, r4
 8004ade:	462b      	mov	r3, r5
 8004ae0:	4938      	ldr	r1, [pc, #224]	@ (8004bc4 <atan+0x324>)
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7fb fe5e 	bl	80007a4 <__aeabi_ddiv>
 8004ae8:	f04f 0a03 	mov.w	sl, #3
 8004aec:	4604      	mov	r4, r0
 8004aee:	460d      	mov	r5, r1
 8004af0:	e73a      	b.n	8004968 <atan+0xc8>
 8004af2:	4b35      	ldr	r3, [pc, #212]	@ (8004bc8 <atan+0x328>)
 8004af4:	4e35      	ldr	r6, [pc, #212]	@ (8004bcc <atan+0x32c>)
 8004af6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f7fb fb6f 	bl	80001e0 <__aeabi_dsub>
 8004b02:	4622      	mov	r2, r4
 8004b04:	462b      	mov	r3, r5
 8004b06:	f7fb fb6b 	bl	80001e0 <__aeabi_dsub>
 8004b0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004b16:	f7fb fb63 	bl	80001e0 <__aeabi_dsub>
 8004b1a:	f1bb 0f00 	cmp.w	fp, #0
 8004b1e:	4604      	mov	r4, r0
 8004b20:	460d      	mov	r5, r1
 8004b22:	f6bf aedc 	bge.w	80048de <atan+0x3e>
 8004b26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	e6d7      	b.n	80048de <atan+0x3e>
 8004b2e:	a51c      	add	r5, pc, #112	@ (adr r5, 8004ba0 <atan+0x300>)
 8004b30:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b34:	e6d3      	b.n	80048de <atan+0x3e>
 8004b36:	bf00      	nop
 8004b38:	54442d18 	.word	0x54442d18
 8004b3c:	3ff921fb 	.word	0x3ff921fb
 8004b40:	8800759c 	.word	0x8800759c
 8004b44:	7e37e43c 	.word	0x7e37e43c
 8004b48:	e322da11 	.word	0xe322da11
 8004b4c:	3f90ad3a 	.word	0x3f90ad3a
 8004b50:	24760deb 	.word	0x24760deb
 8004b54:	3fa97b4b 	.word	0x3fa97b4b
 8004b58:	a0d03d51 	.word	0xa0d03d51
 8004b5c:	3fb10d66 	.word	0x3fb10d66
 8004b60:	c54c206e 	.word	0xc54c206e
 8004b64:	3fb745cd 	.word	0x3fb745cd
 8004b68:	920083ff 	.word	0x920083ff
 8004b6c:	3fc24924 	.word	0x3fc24924
 8004b70:	5555550d 	.word	0x5555550d
 8004b74:	3fd55555 	.word	0x3fd55555
 8004b78:	2c6a6c2f 	.word	0x2c6a6c2f
 8004b7c:	bfa2b444 	.word	0xbfa2b444
 8004b80:	52defd9a 	.word	0x52defd9a
 8004b84:	3fadde2d 	.word	0x3fadde2d
 8004b88:	af749a6d 	.word	0xaf749a6d
 8004b8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004b90:	fe231671 	.word	0xfe231671
 8004b94:	3fbc71c6 	.word	0x3fbc71c6
 8004b98:	9998ebc4 	.word	0x9998ebc4
 8004b9c:	3fc99999 	.word	0x3fc99999
 8004ba0:	54442d18 	.word	0x54442d18
 8004ba4:	bff921fb 	.word	0xbff921fb
 8004ba8:	440fffff 	.word	0x440fffff
 8004bac:	7ff00000 	.word	0x7ff00000
 8004bb0:	3fdbffff 	.word	0x3fdbffff
 8004bb4:	3ff00000 	.word	0x3ff00000
 8004bb8:	3ff2ffff 	.word	0x3ff2ffff
 8004bbc:	40038000 	.word	0x40038000
 8004bc0:	3ff80000 	.word	0x3ff80000
 8004bc4:	bff00000 	.word	0xbff00000
 8004bc8:	08004f58 	.word	0x08004f58
 8004bcc:	08004f78 	.word	0x08004f78

08004bd0 <fabs>:
 8004bd0:	ec51 0b10 	vmov	r0, r1, d0
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004bda:	ec43 2b10 	vmov	d0, r2, r3
 8004bde:	4770      	bx	lr

08004be0 <__ieee754_sqrt>:
 8004be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	4a68      	ldr	r2, [pc, #416]	@ (8004d88 <__ieee754_sqrt+0x1a8>)
 8004be6:	ec55 4b10 	vmov	r4, r5, d0
 8004bea:	43aa      	bics	r2, r5
 8004bec:	462b      	mov	r3, r5
 8004bee:	4621      	mov	r1, r4
 8004bf0:	d110      	bne.n	8004c14 <__ieee754_sqrt+0x34>
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7fb fcaa 	bl	8000550 <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb faee 	bl	80001e4 <__adddf3>
 8004c08:	4604      	mov	r4, r0
 8004c0a:	460d      	mov	r5, r1
 8004c0c:	ec45 4b10 	vmov	d0, r4, r5
 8004c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	dc0e      	bgt.n	8004c36 <__ieee754_sqrt+0x56>
 8004c18:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004c1c:	4322      	orrs	r2, r4
 8004c1e:	d0f5      	beq.n	8004c0c <__ieee754_sqrt+0x2c>
 8004c20:	b19d      	cbz	r5, 8004c4a <__ieee754_sqrt+0x6a>
 8004c22:	4622      	mov	r2, r4
 8004c24:	4620      	mov	r0, r4
 8004c26:	4629      	mov	r1, r5
 8004c28:	f7fb fada 	bl	80001e0 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	f7fb fdb8 	bl	80007a4 <__aeabi_ddiv>
 8004c34:	e7e8      	b.n	8004c08 <__ieee754_sqrt+0x28>
 8004c36:	152a      	asrs	r2, r5, #20
 8004c38:	d115      	bne.n	8004c66 <__ieee754_sqrt+0x86>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e009      	b.n	8004c52 <__ieee754_sqrt+0x72>
 8004c3e:	0acb      	lsrs	r3, r1, #11
 8004c40:	3a15      	subs	r2, #21
 8004c42:	0549      	lsls	r1, r1, #21
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0fa      	beq.n	8004c3e <__ieee754_sqrt+0x5e>
 8004c48:	e7f7      	b.n	8004c3a <__ieee754_sqrt+0x5a>
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	e7fa      	b.n	8004c44 <__ieee754_sqrt+0x64>
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	3001      	adds	r0, #1
 8004c52:	02dc      	lsls	r4, r3, #11
 8004c54:	d5fb      	bpl.n	8004c4e <__ieee754_sqrt+0x6e>
 8004c56:	1e44      	subs	r4, r0, #1
 8004c58:	1b12      	subs	r2, r2, r4
 8004c5a:	f1c0 0420 	rsb	r4, r0, #32
 8004c5e:	fa21 f404 	lsr.w	r4, r1, r4
 8004c62:	4323      	orrs	r3, r4
 8004c64:	4081      	lsls	r1, r0
 8004c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c6a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c72:	07d2      	lsls	r2, r2, #31
 8004c74:	bf5c      	itt	pl
 8004c76:	005b      	lslpl	r3, r3, #1
 8004c78:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c80:	bf58      	it	pl
 8004c82:	0049      	lslpl	r1, r1, #1
 8004c84:	2600      	movs	r6, #0
 8004c86:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004c8a:	106d      	asrs	r5, r5, #1
 8004c8c:	0049      	lsls	r1, r1, #1
 8004c8e:	2016      	movs	r0, #22
 8004c90:	4632      	mov	r2, r6
 8004c92:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004c96:	1917      	adds	r7, r2, r4
 8004c98:	429f      	cmp	r7, r3
 8004c9a:	bfde      	ittt	le
 8004c9c:	193a      	addle	r2, r7, r4
 8004c9e:	1bdb      	suble	r3, r3, r7
 8004ca0:	1936      	addle	r6, r6, r4
 8004ca2:	0fcf      	lsrs	r7, r1, #31
 8004ca4:	3801      	subs	r0, #1
 8004ca6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004caa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004cae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004cb2:	d1f0      	bne.n	8004c96 <__ieee754_sqrt+0xb6>
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	2720      	movs	r7, #32
 8004cb8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	eb00 0e0c 	add.w	lr, r0, ip
 8004cc2:	db02      	blt.n	8004cca <__ieee754_sqrt+0xea>
 8004cc4:	d113      	bne.n	8004cee <__ieee754_sqrt+0x10e>
 8004cc6:	458e      	cmp	lr, r1
 8004cc8:	d811      	bhi.n	8004cee <__ieee754_sqrt+0x10e>
 8004cca:	f1be 0f00 	cmp.w	lr, #0
 8004cce:	eb0e 000c 	add.w	r0, lr, ip
 8004cd2:	da42      	bge.n	8004d5a <__ieee754_sqrt+0x17a>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	db40      	blt.n	8004d5a <__ieee754_sqrt+0x17a>
 8004cd8:	f102 0801 	add.w	r8, r2, #1
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	458e      	cmp	lr, r1
 8004ce0:	bf88      	it	hi
 8004ce2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004ce6:	eba1 010e 	sub.w	r1, r1, lr
 8004cea:	4464      	add	r4, ip
 8004cec:	4642      	mov	r2, r8
 8004cee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004cf2:	3f01      	subs	r7, #1
 8004cf4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004cf8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004cfc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004d00:	d1dc      	bne.n	8004cbc <__ieee754_sqrt+0xdc>
 8004d02:	4319      	orrs	r1, r3
 8004d04:	d01b      	beq.n	8004d3e <__ieee754_sqrt+0x15e>
 8004d06:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004d8c <__ieee754_sqrt+0x1ac>
 8004d0a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004d90 <__ieee754_sqrt+0x1b0>
 8004d0e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004d12:	e9db 2300 	ldrd	r2, r3, [fp]
 8004d16:	f7fb fa63 	bl	80001e0 <__aeabi_dsub>
 8004d1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4640      	mov	r0, r8
 8004d24:	4649      	mov	r1, r9
 8004d26:	f7fb fe8f 	bl	8000a48 <__aeabi_dcmple>
 8004d2a:	b140      	cbz	r0, 8004d3e <__ieee754_sqrt+0x15e>
 8004d2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004d30:	e9da 0100 	ldrd	r0, r1, [sl]
 8004d34:	e9db 2300 	ldrd	r2, r3, [fp]
 8004d38:	d111      	bne.n	8004d5e <__ieee754_sqrt+0x17e>
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	463c      	mov	r4, r7
 8004d3e:	1072      	asrs	r2, r6, #1
 8004d40:	0863      	lsrs	r3, r4, #1
 8004d42:	07f1      	lsls	r1, r6, #31
 8004d44:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004d48:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004d4c:	bf48      	it	mi
 8004d4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004d52:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004d56:	4618      	mov	r0, r3
 8004d58:	e756      	b.n	8004c08 <__ieee754_sqrt+0x28>
 8004d5a:	4690      	mov	r8, r2
 8004d5c:	e7be      	b.n	8004cdc <__ieee754_sqrt+0xfc>
 8004d5e:	f7fb fa41 	bl	80001e4 <__adddf3>
 8004d62:	e9da 8900 	ldrd	r8, r9, [sl]
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	f7fb fe61 	bl	8000a34 <__aeabi_dcmplt>
 8004d72:	b120      	cbz	r0, 8004d7e <__ieee754_sqrt+0x19e>
 8004d74:	1ca0      	adds	r0, r4, #2
 8004d76:	bf08      	it	eq
 8004d78:	3601      	addeq	r6, #1
 8004d7a:	3402      	adds	r4, #2
 8004d7c:	e7df      	b.n	8004d3e <__ieee754_sqrt+0x15e>
 8004d7e:	1c63      	adds	r3, r4, #1
 8004d80:	f023 0401 	bic.w	r4, r3, #1
 8004d84:	e7db      	b.n	8004d3e <__ieee754_sqrt+0x15e>
 8004d86:	bf00      	nop
 8004d88:	7ff00000 	.word	0x7ff00000
 8004d8c:	200000f8 	.word	0x200000f8
 8004d90:	200000f0 	.word	0x200000f0
 8004d94:	00000000 	.word	0x00000000

08004d98 <__ieee754_atan2>:
 8004d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d9c:	ec57 6b11 	vmov	r6, r7, d1
 8004da0:	4273      	negs	r3, r6
 8004da2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004f20 <__ieee754_atan2+0x188>
 8004da6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8004daa:	4333      	orrs	r3, r6
 8004dac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004db0:	4543      	cmp	r3, r8
 8004db2:	ec51 0b10 	vmov	r0, r1, d0
 8004db6:	4635      	mov	r5, r6
 8004db8:	d809      	bhi.n	8004dce <__ieee754_atan2+0x36>
 8004dba:	4244      	negs	r4, r0
 8004dbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004dc0:	4304      	orrs	r4, r0
 8004dc2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004dc6:	4544      	cmp	r4, r8
 8004dc8:	468e      	mov	lr, r1
 8004dca:	4681      	mov	r9, r0
 8004dcc:	d907      	bls.n	8004dde <__ieee754_atan2+0x46>
 8004dce:	4632      	mov	r2, r6
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	f7fb fa07 	bl	80001e4 <__adddf3>
 8004dd6:	ec41 0b10 	vmov	d0, r0, r1
 8004dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dde:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8004de2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8004de6:	4334      	orrs	r4, r6
 8004de8:	d103      	bne.n	8004df2 <__ieee754_atan2+0x5a>
 8004dea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dee:	f7ff bd57 	b.w	80048a0 <atan>
 8004df2:	17bc      	asrs	r4, r7, #30
 8004df4:	f004 0402 	and.w	r4, r4, #2
 8004df8:	ea53 0909 	orrs.w	r9, r3, r9
 8004dfc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004e00:	d107      	bne.n	8004e12 <__ieee754_atan2+0x7a>
 8004e02:	2c02      	cmp	r4, #2
 8004e04:	d05f      	beq.n	8004ec6 <__ieee754_atan2+0x12e>
 8004e06:	2c03      	cmp	r4, #3
 8004e08:	d1e5      	bne.n	8004dd6 <__ieee754_atan2+0x3e>
 8004e0a:	a141      	add	r1, pc, #260	@ (adr r1, 8004f10 <__ieee754_atan2+0x178>)
 8004e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e10:	e7e1      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004e12:	4315      	orrs	r5, r2
 8004e14:	d106      	bne.n	8004e24 <__ieee754_atan2+0x8c>
 8004e16:	f1be 0f00 	cmp.w	lr, #0
 8004e1a:	da5f      	bge.n	8004edc <__ieee754_atan2+0x144>
 8004e1c:	a13e      	add	r1, pc, #248	@ (adr r1, 8004f18 <__ieee754_atan2+0x180>)
 8004e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e22:	e7d8      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004e24:	4542      	cmp	r2, r8
 8004e26:	d10f      	bne.n	8004e48 <__ieee754_atan2+0xb0>
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e2e:	d107      	bne.n	8004e40 <__ieee754_atan2+0xa8>
 8004e30:	2c02      	cmp	r4, #2
 8004e32:	d84c      	bhi.n	8004ece <__ieee754_atan2+0x136>
 8004e34:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <__ieee754_atan2+0x170>)
 8004e36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e3e:	e7ca      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004e40:	2c02      	cmp	r4, #2
 8004e42:	d848      	bhi.n	8004ed6 <__ieee754_atan2+0x13e>
 8004e44:	4b31      	ldr	r3, [pc, #196]	@ (8004f0c <__ieee754_atan2+0x174>)
 8004e46:	e7f6      	b.n	8004e36 <__ieee754_atan2+0x9e>
 8004e48:	4543      	cmp	r3, r8
 8004e4a:	d0e4      	beq.n	8004e16 <__ieee754_atan2+0x7e>
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004e52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004e56:	da1e      	bge.n	8004e96 <__ieee754_atan2+0xfe>
 8004e58:	2f00      	cmp	r7, #0
 8004e5a:	da01      	bge.n	8004e60 <__ieee754_atan2+0xc8>
 8004e5c:	323c      	adds	r2, #60	@ 0x3c
 8004e5e:	db1e      	blt.n	8004e9e <__ieee754_atan2+0x106>
 8004e60:	4632      	mov	r2, r6
 8004e62:	463b      	mov	r3, r7
 8004e64:	f7fb fc9e 	bl	80007a4 <__aeabi_ddiv>
 8004e68:	ec41 0b10 	vmov	d0, r0, r1
 8004e6c:	f7ff feb0 	bl	8004bd0 <fabs>
 8004e70:	f7ff fd16 	bl	80048a0 <atan>
 8004e74:	ec51 0b10 	vmov	r0, r1, d0
 8004e78:	2c01      	cmp	r4, #1
 8004e7a:	d013      	beq.n	8004ea4 <__ieee754_atan2+0x10c>
 8004e7c:	2c02      	cmp	r4, #2
 8004e7e:	d015      	beq.n	8004eac <__ieee754_atan2+0x114>
 8004e80:	2c00      	cmp	r4, #0
 8004e82:	d0a8      	beq.n	8004dd6 <__ieee754_atan2+0x3e>
 8004e84:	a318      	add	r3, pc, #96	@ (adr r3, 8004ee8 <__ieee754_atan2+0x150>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb f9a9 	bl	80001e0 <__aeabi_dsub>
 8004e8e:	a318      	add	r3, pc, #96	@ (adr r3, 8004ef0 <__ieee754_atan2+0x158>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	e014      	b.n	8004ec0 <__ieee754_atan2+0x128>
 8004e96:	a118      	add	r1, pc, #96	@ (adr r1, 8004ef8 <__ieee754_atan2+0x160>)
 8004e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e9c:	e7ec      	b.n	8004e78 <__ieee754_atan2+0xe0>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	e7e9      	b.n	8004e78 <__ieee754_atan2+0xe0>
 8004ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	e794      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004eac:	a30e      	add	r3, pc, #56	@ (adr r3, 8004ee8 <__ieee754_atan2+0x150>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f7fb f995 	bl	80001e0 <__aeabi_dsub>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	a10d      	add	r1, pc, #52	@ (adr r1, 8004ef0 <__ieee754_atan2+0x158>)
 8004ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec0:	f7fb f98e 	bl	80001e0 <__aeabi_dsub>
 8004ec4:	e787      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004ec6:	a10a      	add	r1, pc, #40	@ (adr r1, 8004ef0 <__ieee754_atan2+0x158>)
 8004ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ecc:	e783      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004ece:	a10c      	add	r1, pc, #48	@ (adr r1, 8004f00 <__ieee754_atan2+0x168>)
 8004ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ed4:	e77f      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	2100      	movs	r1, #0
 8004eda:	e77c      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004edc:	a106      	add	r1, pc, #24	@ (adr r1, 8004ef8 <__ieee754_atan2+0x160>)
 8004ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee2:	e778      	b.n	8004dd6 <__ieee754_atan2+0x3e>
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	33145c07 	.word	0x33145c07
 8004eec:	3ca1a626 	.word	0x3ca1a626
 8004ef0:	54442d18 	.word	0x54442d18
 8004ef4:	400921fb 	.word	0x400921fb
 8004ef8:	54442d18 	.word	0x54442d18
 8004efc:	3ff921fb 	.word	0x3ff921fb
 8004f00:	54442d18 	.word	0x54442d18
 8004f04:	3fe921fb 	.word	0x3fe921fb
 8004f08:	08004fb0 	.word	0x08004fb0
 8004f0c:	08004f98 	.word	0x08004f98
 8004f10:	54442d18 	.word	0x54442d18
 8004f14:	c00921fb 	.word	0xc00921fb
 8004f18:	54442d18 	.word	0x54442d18
 8004f1c:	bff921fb 	.word	0xbff921fb
 8004f20:	7ff00000 	.word	0x7ff00000

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
