
TFT_ili9225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08003b80  08003b80  00004b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004250  08004250  0000601c  2**0
                  CONTENTS
  4 .ARM          00000000  08004250  08004250  0000601c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004250  08004250  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004258  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000001c  08004274  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08004274  00006094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c66  00000000  00000000  00006045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e2  00000000  00000000  0000bcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ed  00000000  00000000  0000d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018de2  00000000  00000000  0000dd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000789c  00000000  00000000  00026aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906d4  00000000  00000000  0002e39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bea6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d48  00000000  00000000  000beab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000c07fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000001c 	.word	0x2000001c
 8000204:	00000000 	.word	0x00000000
 8000208:	08003b68 	.word	0x08003b68

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000020 	.word	0x20000020
 8000224:	08003b68 	.word	0x08003b68

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__gedf2>:
 80007f4:	f04f 3cff 	mov.w	ip, #4294967295
 80007f8:	e006      	b.n	8000808 <__cmpdf2+0x4>
 80007fa:	bf00      	nop

080007fc <__ledf2>:
 80007fc:	f04f 0c01 	mov.w	ip, #1
 8000800:	e002      	b.n	8000808 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__cmpdf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	f84d cd04 	str.w	ip, [sp, #-4]!
 800080c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800081e:	d01b      	beq.n	8000858 <__cmpdf2+0x54>
 8000820:	b001      	add	sp, #4
 8000822:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000826:	bf0c      	ite	eq
 8000828:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800082c:	ea91 0f03 	teqne	r1, r3
 8000830:	bf02      	ittt	eq
 8000832:	ea90 0f02 	teqeq	r0, r2
 8000836:	2000      	moveq	r0, #0
 8000838:	4770      	bxeq	lr
 800083a:	f110 0f00 	cmn.w	r0, #0
 800083e:	ea91 0f03 	teq	r1, r3
 8000842:	bf58      	it	pl
 8000844:	4299      	cmppl	r1, r3
 8000846:	bf08      	it	eq
 8000848:	4290      	cmpeq	r0, r2
 800084a:	bf2c      	ite	cs
 800084c:	17d8      	asrcs	r0, r3, #31
 800084e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000852:	f040 0001 	orr.w	r0, r0, #1
 8000856:	4770      	bx	lr
 8000858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d102      	bne.n	8000868 <__cmpdf2+0x64>
 8000862:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000866:	d107      	bne.n	8000878 <__cmpdf2+0x74>
 8000868:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800086c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000870:	d1d6      	bne.n	8000820 <__cmpdf2+0x1c>
 8000872:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000876:	d0d3      	beq.n	8000820 <__cmpdf2+0x1c>
 8000878:	f85d 0b04 	ldr.w	r0, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <__aeabi_cdrcmple>:
 8000880:	4684      	mov	ip, r0
 8000882:	4610      	mov	r0, r2
 8000884:	4662      	mov	r2, ip
 8000886:	468c      	mov	ip, r1
 8000888:	4619      	mov	r1, r3
 800088a:	4663      	mov	r3, ip
 800088c:	e000      	b.n	8000890 <__aeabi_cdcmpeq>
 800088e:	bf00      	nop

08000890 <__aeabi_cdcmpeq>:
 8000890:	b501      	push	{r0, lr}
 8000892:	f7ff ffb7 	bl	8000804 <__cmpdf2>
 8000896:	2800      	cmp	r0, #0
 8000898:	bf48      	it	mi
 800089a:	f110 0f00 	cmnmi.w	r0, #0
 800089e:	bd01      	pop	{r0, pc}

080008a0 <__aeabi_dcmpeq>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff fff4 	bl	8000890 <__aeabi_cdcmpeq>
 80008a8:	bf0c      	ite	eq
 80008aa:	2001      	moveq	r0, #1
 80008ac:	2000      	movne	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmplt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffea 	bl	8000890 <__aeabi_cdcmpeq>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_dcmple>:
 80008c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008cc:	f7ff ffe0 	bl	8000890 <__aeabi_cdcmpeq>
 80008d0:	bf94      	ite	ls
 80008d2:	2001      	movls	r0, #1
 80008d4:	2000      	movhi	r0, #0
 80008d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008da:	bf00      	nop

080008dc <__aeabi_dcmpge>:
 80008dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e0:	f7ff ffce 	bl	8000880 <__aeabi_cdrcmple>
 80008e4:	bf94      	ite	ls
 80008e6:	2001      	movls	r0, #1
 80008e8:	2000      	movhi	r0, #0
 80008ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ee:	bf00      	nop

080008f0 <__aeabi_dcmpgt>:
 80008f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008f4:	f7ff ffc4 	bl	8000880 <__aeabi_cdrcmple>
 80008f8:	bf34      	ite	cc
 80008fa:	2001      	movcc	r0, #1
 80008fc:	2000      	movcs	r0, #0
 80008fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000902:	bf00      	nop

08000904 <__aeabi_d2iz>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800090c:	d215      	bcs.n	800093a <__aeabi_d2iz+0x36>
 800090e:	d511      	bpl.n	8000934 <__aeabi_d2iz+0x30>
 8000910:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000914:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000918:	d912      	bls.n	8000940 <__aeabi_d2iz+0x3c>
 800091a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000922:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000926:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800092a:	fa23 f002 	lsr.w	r0, r3, r2
 800092e:	bf18      	it	ne
 8000930:	4240      	negne	r0, r0
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d105      	bne.n	800094c <__aeabi_d2iz+0x48>
 8000940:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000944:	bf08      	it	eq
 8000946:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800094a:	4770      	bx	lr
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800095e:	1df9      	adds	r1, r7, #7
 8000960:	2364      	movs	r3, #100	@ 0x64
 8000962:	2201      	movs	r2, #1
 8000964:	4803      	ldr	r0, [pc, #12]	@ (8000974 <spi_write+0x20>)
 8000966:	f001 feb7 	bl	80026d8 <HAL_SPI_Transmit>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000038 	.word	0x20000038

08000978 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	480a      	ldr	r0, [pc, #40]	@ (80009b0 <lcd_write_data+0x38>)
 8000988:	f001 fa2c 	bl	8001de4 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2102      	movs	r1, #2
 8000990:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <lcd_write_data+0x38>)
 8000992:	f001 fa27 	bl	8001de4 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ffdb 	bl	8000954 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2104      	movs	r1, #4
 80009a2:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <lcd_write_data+0x38>)
 80009a4:	f001 fa1e 	bl	8001de4 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40010800 	.word	0x40010800

080009b4 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2102      	movs	r1, #2
 80009c2:	480a      	ldr	r0, [pc, #40]	@ (80009ec <lcd_write_command+0x38>)
 80009c4:	f001 fa0e 	bl	8001de4 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2104      	movs	r1, #4
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <lcd_write_command+0x38>)
 80009ce:	f001 fa09 	bl	8001de4 <HAL_GPIO_WritePin>
    spi_write(data);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ffbd 	bl	8000954 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2104      	movs	r1, #4
 80009de:	4803      	ldr	r0, [pc, #12]	@ (80009ec <lcd_write_command+0x38>)
 80009e0:	f001 fa00 	bl	8001de4 <HAL_GPIO_WritePin>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40010800 	.word	0x40010800

080009f0 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffd7 	bl	80009b4 <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ffd2 	bl	80009b4 <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ffae 	bl	8000978 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffa9 	bl	8000978 <lcd_write_data>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7bfa      	ldrb	r2, [r7, #15]
 8000a4a:	701a      	strb	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
	...

08000a58 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8000a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000a6e:	e01c      	b.n	8000aaa <delay_ms+0x52>
        while(counter--);
 8000a70:	bf00      	nop
 8000a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <delay_ms+0x68>)
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	4629      	mov	r1, r5
 8000a80:	f7ff fd00 	bl	8000484 <__aeabi_dsub>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	4620      	mov	r0, r4
 8000a96:	4629      	mov	r1, r5
 8000a98:	f7ff ff02 	bl	80008a0 <__aeabi_dcmpeq>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0e7      	beq.n	8000a72 <delay_ms+0x1a>
        counter = millis;
 8000aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aa6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	1e5a      	subs	r2, r3, #1
 8000aae:	617a      	str	r2, [r7, #20]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1dd      	bne.n	8000a70 <delay_ms+0x18>
    }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bdb0      	pop	{r4, r5, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	3ff00000 	.word	0x3ff00000

08000ac4 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2104      	movs	r1, #4
 8000acc:	4812      	ldr	r0, [pc, #72]	@ (8000b18 <lcd_init+0x54>)
 8000ace:	f001 f989 	bl	8001de4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4810      	ldr	r0, [pc, #64]	@ (8000b18 <lcd_init+0x54>)
 8000ad8:	f001 f984 	bl	8001de4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <lcd_init+0x54>)
 8000ae2:	f001 f97f 	bl	8001de4 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2108      	movs	r1, #8
 8000aea:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <lcd_init+0x54>)
 8000aec:	f001 f97a 	bl	8001de4 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4909      	ldr	r1, [pc, #36]	@ (8000b1c <lcd_init+0x58>)
 8000af6:	f7ff ffaf 	bl	8000a58 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2108      	movs	r1, #8
 8000afe:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <lcd_init+0x54>)
 8000b00:	f001 f970 	bl	8001de4 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4904      	ldr	r1, [pc, #16]	@ (8000b1c <lcd_init+0x58>)
 8000b0a:	f7ff ffa5 	bl	8000a58 <delay_ms>

    lcd_init_command_list();
 8000b0e:	f000 f807 	bl	8000b20 <lcd_init_command_list>
    
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	407f4000 	.word	0x407f4000

08000b20 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8000b24:	2100      	movs	r1, #0
 8000b26:	2010      	movs	r0, #16
 8000b28:	f7ff ff62 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2011      	movs	r0, #17
 8000b30:	f7ff ff5e 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8000b34:	2100      	movs	r1, #0
 8000b36:	2012      	movs	r0, #18
 8000b38:	f7ff ff5a 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2013      	movs	r0, #19
 8000b40:	f7ff ff56 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8000b44:	2100      	movs	r1, #0
 8000b46:	2014      	movs	r0, #20
 8000b48:	f7ff ff52 	bl	80009f0 <lcd_write_register>
    
    delay_ms(10);
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4960      	ldr	r1, [pc, #384]	@ (8000cd4 <lcd_init_command_list+0x1b4>)
 8000b52:	f7ff ff81 	bl	8000a58 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 8000b56:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b5a:	2011      	movs	r0, #17
 8000b5c:	f7ff ff48 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 8000b60:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000b64:	2012      	movs	r0, #18
 8000b66:	f7ff ff43 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8000b6a:	216f      	movs	r1, #111	@ 0x6f
 8000b6c:	2013      	movs	r0, #19
 8000b6e:	f7ff ff3f 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8000b72:	f644 115f 	movw	r1, #18783	@ 0x495f
 8000b76:	2014      	movs	r0, #20
 8000b78:	f7ff ff3a 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000b7c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000b80:	2010      	movs	r0, #16
 8000b82:	f7ff ff35 	bl	80009f0 <lcd_write_register>
    
    delay_ms(10);
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4952      	ldr	r1, [pc, #328]	@ (8000cd4 <lcd_init_command_list+0x1b4>)
 8000b8c:	f7ff ff64 	bl	8000a58 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000b90:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b94:	2011      	movs	r0, #17
 8000b96:	f7ff ff2b 	bl	80009f0 <lcd_write_register>

    delay_ms(50);
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	494e      	ldr	r1, [pc, #312]	@ (8000cd8 <lcd_init_command_list+0x1b8>)
 8000ba0:	f7ff ff5a 	bl	8000a58 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000ba4:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff ff21 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff ff1c 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8000bb8:	f241 0130 	movw	r1, #4144	@ 0x1030
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f7ff ff17 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f7ff ff13 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8000bca:	f240 2102 	movw	r1, #514	@ 0x202
 8000bce:	2008      	movs	r0, #8
 8000bd0:	f7ff ff0e 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200b      	movs	r0, #11
 8000bd8:	f7ff ff0a 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200c      	movs	r0, #12
 8000be0:	f7ff ff06 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000be4:	f640 7101 	movw	r1, #3841	@ 0xf01
 8000be8:	200f      	movs	r0, #15
 8000bea:	f7ff ff01 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2015      	movs	r0, #21
 8000bf2:	f7ff fefd 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2020      	movs	r0, #32
 8000bfa:	f7ff fef9 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2021      	movs	r0, #33	@ 0x21
 8000c02:	f7ff fef5 	bl	80009f0 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8000c06:	2100      	movs	r1, #0
 8000c08:	2030      	movs	r0, #48	@ 0x30
 8000c0a:	f7ff fef1 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8000c0e:	21db      	movs	r1, #219	@ 0xdb
 8000c10:	2031      	movs	r0, #49	@ 0x31
 8000c12:	f7ff feed 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8000c16:	2100      	movs	r1, #0
 8000c18:	2032      	movs	r0, #50	@ 0x32
 8000c1a:	f7ff fee9 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2033      	movs	r0, #51	@ 0x33
 8000c22:	f7ff fee5 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 8000c26:	21db      	movs	r1, #219	@ 0xdb
 8000c28:	2034      	movs	r0, #52	@ 0x34
 8000c2a:	f7ff fee1 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2035      	movs	r0, #53	@ 0x35
 8000c32:	f7ff fedd 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 8000c36:	21af      	movs	r1, #175	@ 0xaf
 8000c38:	2036      	movs	r0, #54	@ 0x36
 8000c3a:	f7ff fed9 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2037      	movs	r0, #55	@ 0x37
 8000c42:	f7ff fed5 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 8000c46:	21db      	movs	r1, #219	@ 0xdb
 8000c48:	2038      	movs	r0, #56	@ 0x38
 8000c4a:	f7ff fed1 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2039      	movs	r0, #57	@ 0x39
 8000c52:	f7ff fecd 	bl	80009f0 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 8000c56:	2100      	movs	r1, #0
 8000c58:	2050      	movs	r0, #80	@ 0x50
 8000c5a:	f7ff fec9 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8000c5e:	f640 0108 	movw	r1, #2056	@ 0x808
 8000c62:	2051      	movs	r0, #81	@ 0x51
 8000c64:	f7ff fec4 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 8000c68:	f640 010a 	movw	r1, #2058	@ 0x80a
 8000c6c:	2052      	movs	r0, #82	@ 0x52
 8000c6e:	f7ff febf 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000c72:	210a      	movs	r1, #10
 8000c74:	2053      	movs	r0, #83	@ 0x53
 8000c76:	f7ff febb 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8000c7a:	f640 2108 	movw	r1, #2568	@ 0xa08
 8000c7e:	2054      	movs	r0, #84	@ 0x54
 8000c80:	f7ff feb6 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8000c84:	f640 0108 	movw	r1, #2056	@ 0x808
 8000c88:	2055      	movs	r0, #85	@ 0x55
 8000c8a:	f7ff feb1 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2056      	movs	r0, #86	@ 0x56
 8000c92:	f7ff fead 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8000c96:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8000c9a:	2057      	movs	r0, #87	@ 0x57
 8000c9c:	f7ff fea8 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000ca0:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000ca4:	2058      	movs	r0, #88	@ 0x58
 8000ca6:	f7ff fea3 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8000caa:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8000cae:	2059      	movs	r0, #89	@ 0x59
 8000cb0:	f7ff fe9e 	bl	80009f0 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8000cb4:	2112      	movs	r1, #18
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f7ff fe9a 	bl	80009f0 <lcd_write_register>

    delay_ms(50); 
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	4905      	ldr	r1, [pc, #20]	@ (8000cd8 <lcd_init_command_list+0x1b8>)
 8000cc2:	f7ff fec9 	bl	8000a58 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8000cc6:	f241 0117 	movw	r1, #4119	@ 0x1017
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f7ff fe90 	bl	80009f0 <lcd_write_register>

    
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40240000 	.word	0x40240000
 8000cd8:	40490000 	.word	0x40490000

08000cdc <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	603a      	str	r2, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8000cec:	1dba      	adds	r2, r7, #6
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fe9b 	bl	8000a2e <swap_char>
        y = WIDTH - y;
 8000cf8:	79ba      	ldrb	r2, [r7, #6]
 8000cfa:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8000d04:	79f8      	ldrb	r0, [r7, #7]
 8000d06:	79b9      	ldrb	r1, [r7, #6]
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f000 f87a 	bl	8000e0c <set_draw_window>
    lcd_write_data(colour >> 8);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe2a 	bl	8000978 <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fe25 	bl	8000978 <lcd_write_data>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4623      	mov	r3, r4
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71bb      	strb	r3, [r7, #6]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	717b      	strb	r3, [r7, #5]
 8000d52:	4613      	mov	r3, r2
 8000d54:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 8000d56:	1dba      	adds	r2, r7, #6
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe66 	bl	8000a2e <swap_char>
        swap_char(&x2, &y2);
 8000d62:	1d3a      	adds	r2, r7, #4
 8000d64:	1d7b      	adds	r3, r7, #5
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe60 	bl	8000a2e <swap_char>
        y1 = WIDTH - y1;
 8000d6e:	79ba      	ldrb	r2, [r7, #6]
 8000d70:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 8000d7a:	793a      	ldrb	r2, [r7, #4]
 8000d7c:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 8000d86:	1dba      	adds	r2, r7, #6
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fe4e 	bl	8000a2e <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8000d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 8000d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d9a:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8000d9c:	79f8      	ldrb	r0, [r7, #7]
 8000d9e:	79b9      	ldrb	r1, [r7, #6]
 8000da0:	797a      	ldrb	r2, [r7, #5]
 8000da2:	793b      	ldrb	r3, [r7, #4]
 8000da4:	f000 f832 	bl	8000e0c <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2104      	movs	r1, #4
 8000dac:	4816      	ldr	r0, [pc, #88]	@ (8000e08 <fill_rectangle+0xd0>)
 8000dae:	f001 f819 	bl	8001de4 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e017      	b.n	8000de8 <fill_rectangle+0xb0>
        for(int x = 0; x < x2-x1+1; x++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	e00a      	b.n	8000dd4 <fill_rectangle+0x9c>
            lcd_write_data(colour_high);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fdd9 	bl	8000978 <lcd_write_data>
            lcd_write_data(colour_low);
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fdd5 	bl	8000978 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dded      	ble.n	8000dbe <fill_rectangle+0x86>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	793b      	ldrb	r3, [r7, #4]
 8000dea:	461a      	mov	r2, r3
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dde0      	ble.n	8000db8 <fill_rectangle+0x80>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4803      	ldr	r0, [pc, #12]	@ (8000e08 <fill_rectangle+0xd0>)
 8000dfc:	f000 fff2 	bl	8001de4 <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	40010800 	.word	0x40010800

08000e0c <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4604      	mov	r4, r0
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71bb      	strb	r3, [r7, #6]
 8000e22:	460b      	mov	r3, r1
 8000e24:	717b      	strb	r3, [r7, #5]
 8000e26:	4613      	mov	r3, r2
 8000e28:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 8000e2a:	797a      	ldrb	r2, [r7, #5]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d205      	bcs.n	8000e3e <set_draw_window+0x32>
        swap_char(&x2, &x1);
 8000e32:	1dfa      	adds	r2, r7, #7
 8000e34:	1d7b      	adds	r3, r7, #5
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fdf8 	bl	8000a2e <swap_char>
    if(y2 < y1)
 8000e3e:	793a      	ldrb	r2, [r7, #4]
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d205      	bcs.n	8000e52 <set_draw_window+0x46>
        swap_char(&y2, &y1);
 8000e46:	1dba      	adds	r2, r7, #6
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fdee 	bl	8000a2e <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	4619      	mov	r1, r3
 8000e56:	2036      	movs	r0, #54	@ 0x36
 8000e58:	f7ff fdca 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2037      	movs	r0, #55	@ 0x37
 8000e62:	f7ff fdc5 	bl	80009f0 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 8000e66:	793b      	ldrb	r3, [r7, #4]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2038      	movs	r0, #56	@ 0x38
 8000e6c:	f7ff fdc0 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	4619      	mov	r1, r3
 8000e74:	2039      	movs	r0, #57	@ 0x39
 8000e76:	f7ff fdbb 	bl	80009f0 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2020      	movs	r0, #32
 8000e80:	f7ff fdb6 	bl	80009f0 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	4619      	mov	r1, r3
 8000e88:	2021      	movs	r0, #33	@ 0x21
 8000e8a:	f7ff fdb1 	bl	80009f0 <lcd_write_register>

    lcd_write_command(0x00);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fd90 	bl	80009b4 <lcd_write_command>
    lcd_write_command(0x22);
 8000e94:	2022      	movs	r0, #34	@ 0x22
 8000e96:	f7ff fd8d 	bl	80009b4 <lcd_write_command>
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd90      	pop	{r4, r7, pc}
	...

08000ea4 <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	71bb      	strb	r3, [r7, #6]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8000eb8:	797b      	ldrb	r3, [r7, #5]
 8000eba:	3b20      	subs	r3, #32
 8000ebc:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e070      	b.n	8000fa6 <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f1c3 010c 	rsb	r1, r3, #12
 8000eca:	483b      	ldr	r0, [pc, #236]	@ (8000fb8 <draw_char+0x114>)
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4403      	add	r3, r0
 8000eda:	440b      	add	r3, r1
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	e059      	b.n	8000f9a <draw_char+0xf6>
            if(line & (0x01 << j)) {
 8000ee6:	7afa      	ldrb	r2, [r7, #11]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	fa42 f303 	asr.w	r3, r2, r3
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d04e      	beq.n	8000f94 <draw_char+0xf0>
                if(size == 1) {
 8000ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d110      	bne.n	8000f20 <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3308      	adds	r3, #8
 8000f0a:	b2d8      	uxtb	r0, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	4413      	add	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fedf 	bl	8000cdc <draw_pixel>
 8000f1e:	e039      	b.n	8000f94 <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	f1c3 0308 	rsb	r3, r3, #8
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4413      	add	r3, r2
 8000f36:	b2d8      	uxtb	r0, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b2d9      	uxtb	r1, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	f1c3 0308 	rsb	r3, r3, #8
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4413      	add	r3, r2
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f68:	4413      	add	r3, r2
 8000f6a:	b2dc      	uxtb	r4, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f84:	4413      	add	r3, r2
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	4622      	mov	r2, r4
 8000f90:	f7ff fed2 	bl	8000d38 <fill_rectangle>
        for(j=0; j<8; j++) {
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	3301      	adds	r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	dda2      	ble.n	8000ee6 <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b0c      	cmp	r3, #12
 8000faa:	dd8b      	ble.n	8000ec4 <draw_char+0x20>
                }
            }
        }
    }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08003b80 	.word	0x08003b80

08000fbc <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	603a      	str	r2, [r7, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	71bb      	strb	r3, [r7, #6]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 8000fd2:	797a      	ldrb	r2, [r7, #5]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8000fe0:	e015      	b.n	800100e <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	6939      	ldr	r1, [r7, #16]
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	b2d8      	uxtb	r0, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	6a3a      	ldr	r2, [r7, #32]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	79b9      	ldrb	r1, [r7, #6]
 8000ffe:	797b      	ldrb	r3, [r7, #5]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f7ff ff4e 	bl	8000ea4 <draw_char>
        //Next character
        counter++;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	6a3a      	ldr	r2, [r7, #32]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1e3      	bne.n	8000fe2 <draw_string+0x26>
    }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <drawCircle>:
	            // bottom edge
	            draw_pixel(i, y + height - 1 - t, color);
	        }
	    }
}
void drawCircle(int centerX, int centerY, int radius, uint16_t color, int thickness) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	807b      	strh	r3, [r7, #2]
    for (int r = radius; r > radius - thickness; r--) {
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e0a9      	b.n	800118c <drawCircle+0x168>
        int x = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
        int y = r;
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	617b      	str	r3, [r7, #20]
        int d = 3 - 2 * r;  // Tính giá trị ban đầu của tham số quyết định
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	f1c3 0303 	rsb	r3, r3, #3
 8001048:	613b      	str	r3, [r7, #16]

        while (x <= y) {
 800104a:	e097      	b.n	800117c <drawCircle+0x158>
            // Vẽ các điểm đối xứng quanh tâm
        	draw_pixel(centerX + x, centerY + y, color);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b2d8      	uxtb	r0, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4413      	add	r3, r2
 8001062:	b2db      	uxtb	r3, r3
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fe38 	bl	8000cdc <draw_pixel>
        	draw_pixel(centerX - x, centerY + y, color);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	b2d8      	uxtb	r0, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	887a      	ldrh	r2, [r7, #2]
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fe28 	bl	8000cdc <draw_pixel>
        	draw_pixel(centerX + x, centerY - y, color);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b2d8      	uxtb	r0, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fe18 	bl	8000cdc <draw_pixel>
        	draw_pixel(centerX - x, centerY - y, color);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b2d8      	uxtb	r0, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fe08 	bl	8000cdc <draw_pixel>
        	draw_pixel(centerX + y, centerY + x, color);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b2d8      	uxtb	r0, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fdf8 	bl	8000cdc <draw_pixel>
        	draw_pixel(centerX - y, centerY + x, color);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b2d8      	uxtb	r0, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	887a      	ldrh	r2, [r7, #2]
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fde8 	bl	8000cdc <draw_pixel>
        	draw_pixel(centerX + y, centerY - x, color);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b2d8      	uxtb	r0, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fdd8 	bl	8000cdc <draw_pixel>
        	draw_pixel(centerX - y, centerY - x, color);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b2d8      	uxtb	r0, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fdc8 	bl	8000cdc <draw_pixel>

            // Cập nhật giá trị của d và di chuyển (x, y)
            if (d < 0) {
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da06      	bge.n	8001160 <drawCircle+0x13c>
                d = d + 4 * x + 6;
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	009a      	lsls	r2, r3, #2
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4413      	add	r3, r2
 800115a:	3306      	adds	r3, #6
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	e00a      	b.n	8001176 <drawCircle+0x152>
            } else {
                d = d + 4 * (x - y) + 10;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	009a      	lsls	r2, r3, #2
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	330a      	adds	r3, #10
 800116e:	613b      	str	r3, [r7, #16]
                y--;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3b01      	subs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
            }
            x++;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	3301      	adds	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
        while (x <= y) {
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f77f af63 	ble.w	800104c <drawCircle+0x28>
    for (int r = radius; r > radius - thickness; r--) {
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b01      	subs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	f73f af4f 	bgt.w	8001038 <drawCircle+0x14>
        }
    }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <drawLine>:
void drawThickLine(int x0, int y0, int x1, int y1, uint16_t color, int thickness) {
    for (int i = -thickness/2; i <= thickness/2; i++) {
        drawLine(x0 + i, y0, x1 + i, y1, color);
    }
}
void drawLine(int x0, int y0, int x1, int y1, uint16_t color) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
    // Thuật toán vẽ đường thẳng Bresenham
    int dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bfb8      	it	lt
 80011bc:	425b      	neglt	r3, r3
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	da01      	bge.n	80011cc <drawLine+0x28>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e001      	b.n	80011d0 <drawLine+0x2c>
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	61fb      	str	r3, [r7, #28]
    int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bfb8      	it	lt
 80011dc:	425b      	neglt	r3, r3
 80011de:	425b      	negs	r3, r3
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	da01      	bge.n	80011ee <drawLine+0x4a>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e001      	b.n	80011f2 <drawLine+0x4e>
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	617b      	str	r3, [r7, #20]
    int err = dx + dy, e2;
 80011f4:	6a3a      	ldr	r2, [r7, #32]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4413      	add	r3, r2
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24

    while (1) {
    	draw_pixel(x0, y0, color);  // Vẽ điểm ảnh tại (x0, y0)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	b2d1      	uxtb	r1, r2
 8001204:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fd68 	bl	8000cdc <draw_pixel>
        if (x0 == x1 && y0 == y1) break;
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	d103      	bne.n	800121c <drawLine+0x78>
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d01b      	beq.n	8001254 <drawLine+0xb0>
        e2 = 2 * err;
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	613b      	str	r3, [r7, #16]
        if (e2 >= dy) { err += dy; x0 += sx; }
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	429a      	cmp	r2, r3
 8001228:	db07      	blt.n	800123a <drawLine+0x96>
 800122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	4413      	add	r3, r2
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
        if (e2 <= dx) { err += dx; y0 += sy; }
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	429a      	cmp	r2, r3
 8001240:	dcdc      	bgt.n	80011fc <drawLine+0x58>
 8001242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	4413      	add	r3, r2
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4413      	add	r3, r2
 8001250:	60bb      	str	r3, [r7, #8]
    	draw_pixel(x0, y0, color);  // Vẽ điểm ảnh tại (x0, y0)
 8001252:	e7d3      	b.n	80011fc <drawLine+0x58>
        if (x0 == x1 && y0 == y1) break;
 8001254:	bf00      	nop
    }
}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	@ 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <draw_star>:
void drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color,int thickness) {
    drawThickLine(x0, y0, x1, y1, color, thickness);
    drawThickLine(x1, y1, x2, y2, color, thickness);
    drawThickLine(x2, y2, x0, y0, color, thickness);
}
void draw_star(int centerX, int centerY, int radius, int color) {
 8001260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001264:	b096      	sub	sp, #88	@ 0x58
 8001266:	af02      	add	r7, sp, #8
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	603b      	str	r3, [r7, #0]
	double angle = M_PI / 2; // Bắt đầu từ góc 90 độ (đỉnh trên cùng)
 8001270:	a351      	add	r3, pc, #324	@ (adr r3, 80013b8 <draw_star+0x158>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	    double angleStep = 2 * M_PI / 5; // Góc giữa các đỉnh (72 độ)
 800127a:	a351      	add	r3, pc, #324	@ (adr r3, 80013c0 <draw_star+0x160>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	    int x[5], y[5];
	    for (int i = 0; i < 5; i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
 8001288:	e05a      	b.n	8001340 <draw_star+0xe0>
	        x[i] = centerX + radius * cos(angle);
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff fa48 	bl	8000720 <__aeabi_i2d>
 8001290:	4604      	mov	r4, r0
 8001292:	460d      	mov	r5, r1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fa43 	bl	8000720 <__aeabi_i2d>
 800129a:	4680      	mov	r8, r0
 800129c:	4689      	mov	r9, r1
 800129e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012a2:	f001 fc43 	bl	8002b2c <cos>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4640      	mov	r0, r8
 80012ac:	4649      	mov	r1, r9
 80012ae:	f7fe ffbb 	bl	8000228 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7ff f8e5 	bl	8000488 <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fb1d 	bl	8000904 <__aeabi_d2iz>
 80012ca:	4602      	mov	r2, r0
 80012cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	3350      	adds	r3, #80	@ 0x50
 80012d2:	443b      	add	r3, r7
 80012d4:	f843 2c2c 	str.w	r2, [r3, #-44]
	        y[i] = centerY - radius * sin(angle);
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff fa21 	bl	8000720 <__aeabi_i2d>
 80012de:	4604      	mov	r4, r0
 80012e0:	460d      	mov	r5, r1
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fa1c 	bl	8000720 <__aeabi_i2d>
 80012e8:	4680      	mov	r8, r0
 80012ea:	4689      	mov	r9, r1
 80012ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012f0:	f001 fc62 	bl	8002bb8 <sin>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4640      	mov	r0, r8
 80012fa:	4649      	mov	r1, r9
 80012fc:	f7fe ff94 	bl	8000228 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4620      	mov	r0, r4
 8001306:	4629      	mov	r1, r5
 8001308:	f7ff f8bc 	bl	8000484 <__aeabi_dsub>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff faf6 	bl	8000904 <__aeabi_d2iz>
 8001318:	4602      	mov	r2, r0
 800131a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	3350      	adds	r3, #80	@ 0x50
 8001320:	443b      	add	r3, r7
 8001322:	f843 2c40 	str.w	r2, [r3, #-64]
	        angle += angleStep;
 8001326:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800132a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800132e:	f7ff f8ab 	bl	8000488 <__adddf3>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	    for (int i = 0; i < 5; i++) {
 800133a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800133c:	3301      	adds	r3, #1
 800133e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001342:	2b04      	cmp	r3, #4
 8001344:	dda1      	ble.n	800128a <draw_star+0x2a>
	    }

	    // Kết nối các đỉnh để tạo hình ngôi sao
	    drawLine(x[0], y[0], x[2], y[2], color);
 8001346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800134c:	69bc      	ldr	r4, [r7, #24]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4623      	mov	r3, r4
 8001356:	f7ff ff25 	bl	80011a4 <drawLine>
	    drawLine(x[2], y[2], x[4], y[4], color);
 800135a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001360:	6a3c      	ldr	r4, [r7, #32]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4623      	mov	r3, r4
 800136a:	f7ff ff1b 	bl	80011a4 <drawLine>
	    drawLine(x[4], y[4], x[1], y[1], color);
 800136e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001370:	6a39      	ldr	r1, [r7, #32]
 8001372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001374:	697c      	ldr	r4, [r7, #20]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4623      	mov	r3, r4
 800137e:	f7ff ff11 	bl	80011a4 <drawLine>
	    drawLine(x[1], y[1], x[3], y[3], color);
 8001382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001384:	6979      	ldr	r1, [r7, #20]
 8001386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001388:	69fc      	ldr	r4, [r7, #28]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4623      	mov	r3, r4
 8001392:	f7ff ff07 	bl	80011a4 <drawLine>
	    drawLine(x[3], y[3], x[0], y[0], color);
 8001396:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001398:	69f9      	ldr	r1, [r7, #28]
 800139a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800139c:	693c      	ldr	r4, [r7, #16]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4623      	mov	r3, r4
 80013a6:	f7ff fefd 	bl	80011a4 <drawLine>
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	@ 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013b4:	f3af 8000 	nop.w
 80013b8:	54442d18 	.word	0x54442d18
 80013bc:	3ff921fb 	.word	0x3ff921fb
 80013c0:	769cf0e0 	.word	0x769cf0e0
 80013c4:	3ff41b2f 	.word	0x3ff41b2f

080013c8 <erase_star>:
void erase_star(int centerX, int centerY, int radius, int bgColor) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
    draw_star(centerX, centerY, radius, bgColor);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff ff3f 	bl	8001260 <draw_star>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <blink_star_edges>:

// Hàm tạo hiệu ứng nhấp nháy
void blink_star_edges(int centerX, int centerY, int radius, int starColor, int bgColor, int delay_ms) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 10; i++) { // Lặp lại 10 lần hiệu ứng nhấp nháy
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e016      	b.n	800142c <blink_star_edges+0x42>
        // Hiển thị ngôi sao
        draw_star(centerX, centerY, radius, starColor);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff ff2b 	bl	8001260 <draw_star>
        HAL_Delay(delay_ms); // Tạo độ trễ với usleep (đơn vị là microsecond)
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fa4d 	bl	80018ac <HAL_Delay>

        // Xóa ngôi sao
        erase_star(centerX, centerY, radius, bgColor);
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff ffd5 	bl	80013c8 <erase_star>
        HAL_Delay(delay_ms); // Tạo độ trễ với usleep (đơn vị là microsecond)
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fa43 	bl	80018ac <HAL_Delay>
    for (int i = 0; i < 10; i++) { // Lặp lại 10 lần hiệu ứng nhấp nháy
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b09      	cmp	r3, #9
 8001430:	dde5      	ble.n	80013fe <blink_star_edges+0x14>
    }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <main>:
char Arr[] = "Ha Huy Hoang";
extern const unsigned char gImage_img[];


int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001442:	f000 f9d1 	bl	80017e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001446:	f000 f837 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144a:	f000 f8b3 	bl	80015b4 <MX_GPIO_Init>
  MX_SPI2_Init();
 800144e:	f000 f879 	bl	8001544 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
 // lcd_init();
  /* USER CODE END 2 */
  lcd_init();
 8001452:	f7ff fb37 	bl	8000ac4 <lcd_init>
  fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	23b0      	movs	r3, #176	@ 0xb0
 800145c:	22dc      	movs	r2, #220	@ 0xdc
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fc69 	bl	8000d38 <fill_rectangle>
 // draw_bitmap(0, 0, 1, gImage_img);
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  blink_star_edges(110,88,70,COLOR_DARKCYAN,COLOR_OLIVE ,100);
 8001466:	2364      	movs	r3, #100	@ 0x64
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	f647 33e0 	movw	r3, #31712	@ 0x7be0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8001474:	2246      	movs	r2, #70	@ 0x46
 8001476:	2158      	movs	r1, #88	@ 0x58
 8001478:	206e      	movs	r0, #110	@ 0x6e
 800147a:	f7ff ffb6 	bl	80013ea <blink_star_edges>

	  draw_star(110,88,70,COLOR_YELLOW);
 800147e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001482:	2246      	movs	r2, #70	@ 0x46
 8001484:	2158      	movs	r1, #88	@ 0x58
 8001486:	206e      	movs	r0, #110	@ 0x6e
 8001488:	f7ff feea 	bl	8001260 <draw_star>


//	 fill_rectangle(50, 60, 100, 110, COLOR_GREEN);
	// drawEmptyRectangle(0,0,WIDTH,HEIGHT,COLOR_YELLOW,5);

	 drawCircle(110,88,20,COLOR_MAGENTA,5);
 800148c:	2305      	movs	r3, #5
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001494:	2214      	movs	r2, #20
 8001496:	2158      	movs	r1, #88	@ 0x58
 8001498:	206e      	movs	r0, #110	@ 0x6e
 800149a:	f7ff fdc3 	bl	8001024 <drawCircle>
    /* USER CODE BEGIN 3 */
	 draw_string(10,15,COLOR_RED,1,Arr);
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <main+0x78>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80014a8:	210f      	movs	r1, #15
 80014aa:	200a      	movs	r0, #10
 80014ac:	f7ff fd86 	bl	8000fbc <draw_string>
	  blink_star_edges(110,88,70,COLOR_DARKCYAN,COLOR_OLIVE ,100);
 80014b0:	bf00      	nop
 80014b2:	e7d8      	b.n	8001466 <main+0x2a>
 80014b4:	20000000 	.word	0x20000000

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b090      	sub	sp, #64	@ 0x40
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	2228      	movs	r2, #40	@ 0x28
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fb03 	bl	8002ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fc87 	bl	8001e14 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800150c:	f000 f89c 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2302      	movs	r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2102      	movs	r1, #2
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fef4 	bl	8002318 <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001536:	f000 f887 	bl	8001648 <Error_Handler>
  }
}
 800153a:	bf00      	nop
 800153c:	3740      	adds	r7, #64	@ 0x40
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_SPI2_Init+0x68>)
 800154a:	4a19      	ldr	r2, [pc, #100]	@ (80015b0 <MX_SPI2_Init+0x6c>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001550:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001554:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001558:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800155c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_SPI2_Init+0x68>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001576:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_SPI2_Init+0x68>)
 800157a:	2218      	movs	r2, #24
 800157c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_SPI2_Init+0x68>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001592:	220a      	movs	r2, #10
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_SPI2_Init+0x68>)
 8001598:	f001 f81a 	bl	80025d0 <HAL_SPI_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80015a2:	f000 f851 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000038 	.word	0x20000038
 80015b0:	40003800 	.word	0x40003800

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a16      	ldr	r2, [pc, #88]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a10      	ldr	r2, [pc, #64]	@ (8001640 <MX_GPIO_Init+0x8c>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <MX_GPIO_Init+0x8c>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RS_Pin|TFT_CS_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	210e      	movs	r1, #14
 8001614:	480b      	ldr	r0, [pc, #44]	@ (8001644 <MX_GPIO_Init+0x90>)
 8001616:	f000 fbe5 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_RS_Pin TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RS_Pin|TFT_CS_Pin|TFT_RST_Pin;
 800161a:	230e      	movs	r3, #14
 800161c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2302      	movs	r3, #2
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	4804      	ldr	r0, [pc, #16]	@ (8001644 <MX_GPIO_Init+0x90>)
 8001632:	f000 fa43 	bl	8001abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <Error_Handler+0x8>

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_MspInit+0x5c>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <HAL_MspInit+0x5c>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_MspInit+0x5c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <HAL_MspInit+0x5c>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a0e      	ldr	r2, [pc, #56]	@ (80016b0 <HAL_MspInit+0x5c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <HAL_MspInit+0x5c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_MspInit+0x60>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <HAL_MspInit+0x60>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000

080016b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a16      	ldr	r2, [pc, #88]	@ (800172c <HAL_SPI_MspInit+0x74>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d124      	bne.n	8001722 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_SPI_MspInit+0x78>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <HAL_SPI_MspInit+0x78>)
 80016de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e2:	61d3      	str	r3, [r2, #28]
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_SPI_MspInit+0x78>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_SPI_MspInit+0x78>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_SPI_MspInit+0x78>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_SPI_MspInit+0x78>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001708:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800170c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <HAL_SPI_MspInit+0x7c>)
 800171e:	f000 f9cd 	bl	8001abc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40003800 	.word	0x40003800
 8001730:	40021000 	.word	0x40021000
 8001734:	40010c00 	.word	0x40010c00

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f874 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800179c:	f7ff fff8 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480b      	ldr	r0, [pc, #44]	@ (80017d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017a2:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a4:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b8:	4c09      	ldr	r4, [pc, #36]	@ (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f001 f98d 	bl	8002ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ca:	f7ff fe37 	bl	800143c <main>
  bx lr
 80017ce:	4770      	bx	lr
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017d8:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 80017dc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80017e0:	20000094 	.word	0x20000094

080017e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC1_2_IRQHandler>
	...

080017e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_Init+0x28>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_Init+0x28>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f92b 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	200f      	movs	r0, #15
 8001800:	f000 f808 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff ff26 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f935 	bl	8001aa2 <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 f90b 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000010 	.word	0x20000010
 800186c:	20000018 	.word	0x20000018
 8001870:	20000014 	.word	0x20000014

08001874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <HAL_IncTick+0x1c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_IncTick+0x20>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a03      	ldr	r2, [pc, #12]	@ (8001894 <HAL_IncTick+0x20>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	20000018 	.word	0x20000018
 8001894:	20000090 	.word	0x20000090

08001898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b02      	ldr	r3, [pc, #8]	@ (80018a8 <HAL_GetTick+0x10>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000090 	.word	0x20000090

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff fff0 	bl	8001898 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffe0 	bl	8001898 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000018 	.word	0x20000018

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff90 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff49 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff5e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff90 	bl	80019ac <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffb0 	bl	8001a10 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b08b      	sub	sp, #44	@ 0x2c
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e179      	b.n	8001dc4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	f040 8168 	bne.w	8001dbe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a96      	ldr	r2, [pc, #600]	@ (8001d4c <HAL_GPIO_Init+0x290>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d05e      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001af8:	4a94      	ldr	r2, [pc, #592]	@ (8001d4c <HAL_GPIO_Init+0x290>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d875      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001afe:	4a94      	ldr	r2, [pc, #592]	@ (8001d50 <HAL_GPIO_Init+0x294>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d058      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b04:	4a92      	ldr	r2, [pc, #584]	@ (8001d50 <HAL_GPIO_Init+0x294>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d86f      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b0a:	4a92      	ldr	r2, [pc, #584]	@ (8001d54 <HAL_GPIO_Init+0x298>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d052      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b10:	4a90      	ldr	r2, [pc, #576]	@ (8001d54 <HAL_GPIO_Init+0x298>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d869      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b16:	4a90      	ldr	r2, [pc, #576]	@ (8001d58 <HAL_GPIO_Init+0x29c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04c      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b1c:	4a8e      	ldr	r2, [pc, #568]	@ (8001d58 <HAL_GPIO_Init+0x29c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d863      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b22:	4a8e      	ldr	r2, [pc, #568]	@ (8001d5c <HAL_GPIO_Init+0x2a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d046      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a8c      	ldr	r2, [pc, #560]	@ (8001d5c <HAL_GPIO_Init+0x2a0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d85d      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b2e:	2b12      	cmp	r3, #18
 8001b30:	d82a      	bhi.n	8001b88 <HAL_GPIO_Init+0xcc>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d859      	bhi.n	8001bea <HAL_GPIO_Init+0x12e>
 8001b36:	a201      	add	r2, pc, #4	@ (adr r2, 8001b3c <HAL_GPIO_Init+0x80>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001bb7 	.word	0x08001bb7
 8001b40:	08001b91 	.word	0x08001b91
 8001b44:	08001ba3 	.word	0x08001ba3
 8001b48:	08001be5 	.word	0x08001be5
 8001b4c:	08001beb 	.word	0x08001beb
 8001b50:	08001beb 	.word	0x08001beb
 8001b54:	08001beb 	.word	0x08001beb
 8001b58:	08001beb 	.word	0x08001beb
 8001b5c:	08001beb 	.word	0x08001beb
 8001b60:	08001beb 	.word	0x08001beb
 8001b64:	08001beb 	.word	0x08001beb
 8001b68:	08001beb 	.word	0x08001beb
 8001b6c:	08001beb 	.word	0x08001beb
 8001b70:	08001beb 	.word	0x08001beb
 8001b74:	08001beb 	.word	0x08001beb
 8001b78:	08001beb 	.word	0x08001beb
 8001b7c:	08001beb 	.word	0x08001beb
 8001b80:	08001b99 	.word	0x08001b99
 8001b84:	08001bad 	.word	0x08001bad
 8001b88:	4a75      	ldr	r2, [pc, #468]	@ (8001d60 <HAL_GPIO_Init+0x2a4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b8e:	e02c      	b.n	8001bea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	623b      	str	r3, [r7, #32]
          break;
 8001b96:	e029      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	623b      	str	r3, [r7, #32]
          break;
 8001ba0:	e024      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	623b      	str	r3, [r7, #32]
          break;
 8001baa:	e01f      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	623b      	str	r3, [r7, #32]
          break;
 8001bb4:	e01a      	b.n	8001bec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e013      	b.n	8001bec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	611a      	str	r2, [r3, #16]
          break;
 8001bd6:	e009      	b.n	8001bec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	615a      	str	r2, [r3, #20]
          break;
 8001be2:	e003      	b.n	8001bec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x130>
          break;
 8001bea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2bff      	cmp	r3, #255	@ 0xff
 8001bf0:	d801      	bhi.n	8001bf6 <HAL_GPIO_Init+0x13a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	e001      	b.n	8001bfa <HAL_GPIO_Init+0x13e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	@ 0xff
 8001c00:	d802      	bhi.n	8001c08 <HAL_GPIO_Init+0x14c>
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x152>
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	3b08      	subs	r3, #8
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	210f      	movs	r1, #15
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	6a39      	ldr	r1, [r7, #32]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80c1 	beq.w	8001dbe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c3c:	4b49      	ldr	r3, [pc, #292]	@ (8001d64 <HAL_GPIO_Init+0x2a8>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a48      	ldr	r2, [pc, #288]	@ (8001d64 <HAL_GPIO_Init+0x2a8>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b46      	ldr	r3, [pc, #280]	@ (8001d64 <HAL_GPIO_Init+0x2a8>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c54:	4a44      	ldr	r2, [pc, #272]	@ (8001d68 <HAL_GPIO_Init+0x2ac>)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d6c <HAL_GPIO_Init+0x2b0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d01f      	beq.n	8001cc0 <HAL_GPIO_Init+0x204>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a3b      	ldr	r2, [pc, #236]	@ (8001d70 <HAL_GPIO_Init+0x2b4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d019      	beq.n	8001cbc <HAL_GPIO_Init+0x200>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d74 <HAL_GPIO_Init+0x2b8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_GPIO_Init+0x1fc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a39      	ldr	r2, [pc, #228]	@ (8001d78 <HAL_GPIO_Init+0x2bc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00d      	beq.n	8001cb4 <HAL_GPIO_Init+0x1f8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a38      	ldr	r2, [pc, #224]	@ (8001d7c <HAL_GPIO_Init+0x2c0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d007      	beq.n	8001cb0 <HAL_GPIO_Init+0x1f4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a37      	ldr	r2, [pc, #220]	@ (8001d80 <HAL_GPIO_Init+0x2c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d101      	bne.n	8001cac <HAL_GPIO_Init+0x1f0>
 8001ca8:	2305      	movs	r3, #5
 8001caa:	e00a      	b.n	8001cc2 <HAL_GPIO_Init+0x206>
 8001cac:	2306      	movs	r3, #6
 8001cae:	e008      	b.n	8001cc2 <HAL_GPIO_Init+0x206>
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x206>
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e004      	b.n	8001cc2 <HAL_GPIO_Init+0x206>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x206>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_GPIO_Init+0x206>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc4:	f002 0203 	and.w	r2, r2, #3
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd2:	4925      	ldr	r1, [pc, #148]	@ (8001d68 <HAL_GPIO_Init+0x2ac>)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cec:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4924      	ldr	r1, [pc, #144]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4920      	ldr	r1, [pc, #128]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	491a      	ldr	r1, [pc, #104]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4916      	ldr	r1, [pc, #88]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d025      	beq.n	8001d88 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4910      	ldr	r1, [pc, #64]	@ (8001d84 <HAL_GPIO_Init+0x2c8>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
 8001d48:	e025      	b.n	8001d96 <HAL_GPIO_Init+0x2da>
 8001d4a:	bf00      	nop
 8001d4c:	10320000 	.word	0x10320000
 8001d50:	10310000 	.word	0x10310000
 8001d54:	10220000 	.word	0x10220000
 8001d58:	10210000 	.word	0x10210000
 8001d5c:	10120000 	.word	0x10120000
 8001d60:	10110000 	.word	0x10110000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40011000 	.word	0x40011000
 8001d78:	40011400 	.word	0x40011400
 8001d7c:	40011800 	.word	0x40011800
 8001d80:	40011c00 	.word	0x40011c00
 8001d84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d88:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_GPIO_Init+0x324>)
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4913      	ldr	r1, [pc, #76]	@ (8001de0 <HAL_GPIO_Init+0x324>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_GPIO_Init+0x324>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	490e      	ldr	r1, [pc, #56]	@ (8001de0 <HAL_GPIO_Init+0x324>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
 8001dae:	e006      	b.n	8001dbe <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_GPIO_Init+0x324>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4909      	ldr	r1, [pc, #36]	@ (8001de0 <HAL_GPIO_Init+0x324>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f47f ae7e 	bne.w	8001ad0 <HAL_GPIO_Init+0x14>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	372c      	adds	r7, #44	@ 0x2c
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e272      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8087 	beq.w	8001f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e34:	4b92      	ldr	r3, [pc, #584]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d00c      	beq.n	8001e5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e40:	4b8f      	ldr	r3, [pc, #572]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d112      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
 8001e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e58:	d10b      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	4b89      	ldr	r3, [pc, #548]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d06c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x12c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d168      	bne.n	8001f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e24c      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x76>
 8001e7c:	4b80      	ldr	r3, [pc, #512]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a7f      	ldr	r2, [pc, #508]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e02e      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x98>
 8001e92:	4b7b      	ldr	r3, [pc, #492]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a7a      	ldr	r2, [pc, #488]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b78      	ldr	r3, [pc, #480]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a77      	ldr	r2, [pc, #476]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e01d      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xbc>
 8001eb6:	4b72      	ldr	r3, [pc, #456]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a71      	ldr	r2, [pc, #452]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a67      	ldr	r2, [pc, #412]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fcd2 	bl	8001898 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fcce 	bl	8001898 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e200      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xe4>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fcbe 	bl	8001898 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff fcba 	bl	8001898 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1ec      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x10c>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d063      	beq.n	8002016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f5a:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
 8001f66:	4b46      	ldr	r3, [pc, #280]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e1c0      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4939      	ldr	r1, [pc, #228]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	e03a      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	4b36      	ldr	r3, [pc, #216]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fc73 	bl	8001898 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7ff fc6f 	bl	8001898 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1a1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4927      	ldr	r1, [pc, #156]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fc52 	bl	8001898 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fc4e 	bl	8001898 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e180      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d03a      	beq.n	8002098 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <HAL_RCC_OscConfig+0x274>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fc32 	bl	8001898 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff fc2e 	bl	8001898 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e160      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 fa9c 	bl	8002594 <RCC_Delay>
 800205c:	e01c      	b.n	8002098 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_RCC_OscConfig+0x274>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7ff fc18 	bl	8001898 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206a:	e00f      	b.n	800208c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff fc14 	bl	8001898 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d908      	bls.n	800208c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e146      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	42420000 	.word	0x42420000
 8002088:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b92      	ldr	r3, [pc, #584]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e9      	bne.n	800206c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a6 	beq.w	80021f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b8b      	ldr	r3, [pc, #556]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a87      	ldr	r2, [pc, #540]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b85      	ldr	r3, [pc, #532]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7e      	ldr	r2, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7ff fbd5 	bl	8001898 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7ff fbd1 	bl	8001898 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	@ 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e103      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b75      	ldr	r3, [pc, #468]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x312>
 8002118:	4b6f      	ldr	r3, [pc, #444]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a6e      	ldr	r2, [pc, #440]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e02d      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x334>
 800212e:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a69      	ldr	r2, [pc, #420]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	4b67      	ldr	r3, [pc, #412]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a66      	ldr	r2, [pc, #408]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	e01c      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x356>
 8002150:	4b61      	ldr	r3, [pc, #388]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a60      	ldr	r2, [pc, #384]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	4b5e      	ldr	r3, [pc, #376]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a5d      	ldr	r2, [pc, #372]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e00b      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 800216a:	4b5b      	ldr	r3, [pc, #364]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a5a      	ldr	r2, [pc, #360]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a57      	ldr	r2, [pc, #348]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff fb85 	bl	8001898 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff fb81 	bl	8001898 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0b1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	4b4b      	ldr	r3, [pc, #300]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ee      	beq.n	8002192 <HAL_RCC_OscConfig+0x37e>
 80021b4:	e014      	b.n	80021e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fb6f 	bl	8001898 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff fb6b 	bl	8001898 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e09b      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8087 	beq.w	800230a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fc:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d061      	beq.n	80022cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d146      	bne.n	800229e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff fb3f 	bl	8001898 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff fb3b 	bl	8001898 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e06d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002244:	d108      	bne.n	8002258 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002246:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4921      	ldr	r1, [pc, #132]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a19      	ldr	r1, [r3, #32]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	430b      	orrs	r3, r1
 800226a:	491b      	ldr	r1, [pc, #108]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fb0f 	bl	8001898 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fb0b 	bl	8001898 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e03d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x46a>
 800229c:	e035      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff faf8 	bl	8001898 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff faf4 	bl	8001898 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e026      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x498>
 80022ca:	e01e      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e019      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_OscConfig+0x500>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d0      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b67      	ldr	r3, [pc, #412]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4965      	ldr	r1, [pc, #404]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a58      	ldr	r2, [pc, #352]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800237e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002396:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b50      	ldr	r3, [pc, #320]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d040      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b47      	ldr	r3, [pc, #284]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e073      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3d      	ldr	r3, [pc, #244]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06b      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4936      	ldr	r1, [pc, #216]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7ff fa46 	bl	8001898 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7ff fa42 	bl	8001898 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e053      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d210      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4922      	ldr	r1, [pc, #136]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024a6:	f000 f821 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_RCC_ClockConfig+0x1cc>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_ClockConfig+0x1d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f9a4 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08004054 	.word	0x08004054
 80024e4:	20000010 	.word	0x20000010
 80024e8:	20000014 	.word	0x20000014

080024ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002506:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b04      	cmp	r3, #4
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x36>
 800251a:	e027      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800251e:	613b      	str	r3, [r7, #16]
      break;
 8002520:	e027      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x9c>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0c5b      	lsrs	r3, r3, #17
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	4a11      	ldr	r2, [pc, #68]	@ (800258c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800254e:	fb03 f202 	mul.w	r2, r3, r2
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e004      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0c      	ldr	r2, [pc, #48]	@ (8002590 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	613b      	str	r3, [r7, #16]
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800256e:	613b      	str	r3, [r7, #16]
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	693b      	ldr	r3, [r7, #16]
}
 8002574:	4618      	mov	r0, r3
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	007a1200 	.word	0x007a1200
 8002588:	08004064 	.word	0x08004064
 800258c:	08004074 	.word	0x08004074
 8002590:	003d0900 	.word	0x003d0900

08002594 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <RCC_Delay+0x34>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <RCC_Delay+0x38>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0a5b      	lsrs	r3, r3, #9
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b0:	bf00      	nop
  }
  while (Delay --);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1e5a      	subs	r2, r3, #1
 80025b6:	60fa      	str	r2, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <RCC_Delay+0x1c>
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000010 	.word	0x20000010
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e076      	b.n	80026d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025f2:	d009      	beq.n	8002608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	e005      	b.n	8002608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff f848 	bl	80016b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800263e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268c:	ea42 0103 	orr.w	r1, r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	0c1a      	lsrs	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f002 0204 	and.w	r2, r2, #4
 80026ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026e8:	f7ff f8d6 	bl	8001898 <HAL_GetTick>
 80026ec:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	e12a      	b.n	8002958 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_SPI_Transmit+0x36>
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e122      	b.n	8002958 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_SPI_Transmit+0x48>
 800271c:	2302      	movs	r3, #2
 800271e:	e11b      	b.n	8002958 <HAL_SPI_Transmit+0x280>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2203      	movs	r2, #3
 800272c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800276e:	d10f      	bne.n	8002790 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800277e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800278e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279a:	2b40      	cmp	r3, #64	@ 0x40
 800279c:	d007      	beq.n	80027ae <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027b6:	d152      	bne.n	800285e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Transmit+0xee>
 80027c0:	8b7b      	ldrh	r3, [r7, #26]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d145      	bne.n	8002852 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	881a      	ldrh	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	1c9a      	adds	r2, r3, #2
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027ea:	e032      	b.n	8002852 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d112      	bne.n	8002820 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	881a      	ldrh	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	1c9a      	adds	r2, r3, #2
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800281e:	e018      	b.n	8002852 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002820:	f7ff f83a 	bl	8001898 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d803      	bhi.n	8002838 <HAL_SPI_Transmit+0x160>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d102      	bne.n	800283e <HAL_SPI_Transmit+0x166>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e082      	b.n	8002958 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1c7      	bne.n	80027ec <HAL_SPI_Transmit+0x114>
 800285c:	e053      	b.n	8002906 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_SPI_Transmit+0x194>
 8002866:	8b7b      	ldrh	r3, [r7, #26]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d147      	bne.n	80028fc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002892:	e033      	b.n	80028fc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d113      	bne.n	80028ca <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	330c      	adds	r3, #12
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80028c8:	e018      	b.n	80028fc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ca:	f7fe ffe5 	bl	8001898 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d803      	bhi.n	80028e2 <HAL_SPI_Transmit+0x20a>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d102      	bne.n	80028e8 <HAL_SPI_Transmit+0x210>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e02d      	b.n	8002958 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1c6      	bne.n	8002894 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8b0 	bl	8002a70 <SPI_EndRxTxTransaction>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002956:	2300      	movs	r3, #0
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002970:	f7fe ff92 	bl	8001898 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4413      	add	r3, r2
 800297e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002980:	f7fe ff8a 	bl	8001898 <HAL_GetTick>
 8002984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	015b      	lsls	r3, r3, #5
 800298c:	0d1b      	lsrs	r3, r3, #20
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002996:	e054      	b.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299e:	d050      	beq.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a0:	f7fe ff7a 	bl	8001898 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d902      	bls.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d13d      	bne.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029ce:	d111      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029d8:	d004      	beq.n	80029e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e2:	d107      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029fc:	d10f      	bne.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e017      	b.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d19b      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000010 	.word	0x20000010

08002a70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2201      	movs	r2, #1
 8002a84:	2102      	movs	r1, #2
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff ff6a 	bl	8002960 <SPI_WaitFlagStateUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e013      	b.n	8002aca <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff57 	bl	8002960 <SPI_WaitFlagStateUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e000      	b.n	8002aca <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <memset>:
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4402      	add	r2, r0
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d100      	bne.n	8002adc <memset+0xa>
 8002ada:	4770      	bx	lr
 8002adc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae0:	e7f9      	b.n	8002ad6 <memset+0x4>
	...

08002ae4 <__libc_init_array>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	2600      	movs	r6, #0
 8002ae8:	4d0c      	ldr	r5, [pc, #48]	@ (8002b1c <__libc_init_array+0x38>)
 8002aea:	4c0d      	ldr	r4, [pc, #52]	@ (8002b20 <__libc_init_array+0x3c>)
 8002aec:	1b64      	subs	r4, r4, r5
 8002aee:	10a4      	asrs	r4, r4, #2
 8002af0:	42a6      	cmp	r6, r4
 8002af2:	d109      	bne.n	8002b08 <__libc_init_array+0x24>
 8002af4:	f001 f838 	bl	8003b68 <_init>
 8002af8:	2600      	movs	r6, #0
 8002afa:	4d0a      	ldr	r5, [pc, #40]	@ (8002b24 <__libc_init_array+0x40>)
 8002afc:	4c0a      	ldr	r4, [pc, #40]	@ (8002b28 <__libc_init_array+0x44>)
 8002afe:	1b64      	subs	r4, r4, r5
 8002b00:	10a4      	asrs	r4, r4, #2
 8002b02:	42a6      	cmp	r6, r4
 8002b04:	d105      	bne.n	8002b12 <__libc_init_array+0x2e>
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0c:	4798      	blx	r3
 8002b0e:	3601      	adds	r6, #1
 8002b10:	e7ee      	b.n	8002af0 <__libc_init_array+0xc>
 8002b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b16:	4798      	blx	r3
 8002b18:	3601      	adds	r6, #1
 8002b1a:	e7f2      	b.n	8002b02 <__libc_init_array+0x1e>
 8002b1c:	08004250 	.word	0x08004250
 8002b20:	08004250 	.word	0x08004250
 8002b24:	08004250 	.word	0x08004250
 8002b28:	08004254 	.word	0x08004254

08002b2c <cos>:
 8002b2c:	b530      	push	{r4, r5, lr}
 8002b2e:	4d20      	ldr	r5, [pc, #128]	@ (8002bb0 <cos+0x84>)
 8002b30:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002b34:	42ac      	cmp	r4, r5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	d806      	bhi.n	8002b4c <cos+0x20>
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2300      	movs	r3, #0
 8002b42:	b007      	add	sp, #28
 8002b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b48:	f000 b87e 	b.w	8002c48 <__kernel_cos>
 8002b4c:	4d19      	ldr	r5, [pc, #100]	@ (8002bb4 <cos+0x88>)
 8002b4e:	42ac      	cmp	r4, r5
 8002b50:	d903      	bls.n	8002b5a <cos+0x2e>
 8002b52:	f7fd fc97 	bl	8000484 <__aeabi_dsub>
 8002b56:	b007      	add	sp, #28
 8002b58:	bd30      	pop	{r4, r5, pc}
 8002b5a:	aa02      	add	r2, sp, #8
 8002b5c:	f000 f9ec 	bl	8002f38 <__ieee754_rem_pio2>
 8002b60:	f000 0003 	and.w	r0, r0, #3
 8002b64:	2801      	cmp	r0, #1
 8002b66:	d009      	beq.n	8002b7c <cos+0x50>
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d011      	beq.n	8002b90 <cos+0x64>
 8002b6c:	b9b8      	cbnz	r0, 8002b9e <cos+0x72>
 8002b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b76:	f000 f867 	bl	8002c48 <__kernel_cos>
 8002b7a:	e7ec      	b.n	8002b56 <cos+0x2a>
 8002b7c:	9000      	str	r0, [sp, #0]
 8002b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b86:	f000 f91f 	bl	8002dc8 <__kernel_sin>
 8002b8a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002b8e:	e7e2      	b.n	8002b56 <cos+0x2a>
 8002b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b98:	f000 f856 	bl	8002c48 <__kernel_cos>
 8002b9c:	e7f5      	b.n	8002b8a <cos+0x5e>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002baa:	f000 f90d 	bl	8002dc8 <__kernel_sin>
 8002bae:	e7d2      	b.n	8002b56 <cos+0x2a>
 8002bb0:	3fe921fb 	.word	0x3fe921fb
 8002bb4:	7fefffff 	.word	0x7fefffff

08002bb8 <sin>:
 8002bb8:	b530      	push	{r4, r5, lr}
 8002bba:	4d20      	ldr	r5, [pc, #128]	@ (8002c3c <sin+0x84>)
 8002bbc:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002bc0:	42ac      	cmp	r4, r5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	d806      	bhi.n	8002bd8 <sin+0x20>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f000 f8f9 	bl	8002dc8 <__kernel_sin>
 8002bd6:	e004      	b.n	8002be2 <sin+0x2a>
 8002bd8:	4d19      	ldr	r5, [pc, #100]	@ (8002c40 <sin+0x88>)
 8002bda:	42ac      	cmp	r4, r5
 8002bdc:	d903      	bls.n	8002be6 <sin+0x2e>
 8002bde:	f7fd fc51 	bl	8000484 <__aeabi_dsub>
 8002be2:	b007      	add	sp, #28
 8002be4:	bd30      	pop	{r4, r5, pc}
 8002be6:	aa02      	add	r2, sp, #8
 8002be8:	f000 f9a6 	bl	8002f38 <__ieee754_rem_pio2>
 8002bec:	f000 0003 	and.w	r0, r0, #3
 8002bf0:	2801      	cmp	r0, #1
 8002bf2:	d009      	beq.n	8002c08 <sin+0x50>
 8002bf4:	2802      	cmp	r0, #2
 8002bf6:	d00e      	beq.n	8002c16 <sin+0x5e>
 8002bf8:	b9c0      	cbnz	r0, 8002c2c <sin+0x74>
 8002bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c06:	e7e4      	b.n	8002bd2 <sin+0x1a>
 8002c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c10:	f000 f81a 	bl	8002c48 <__kernel_cos>
 8002c14:	e7e5      	b.n	8002be2 <sin+0x2a>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c22:	f000 f8d1 	bl	8002dc8 <__kernel_sin>
 8002c26:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002c2a:	e7da      	b.n	8002be2 <sin+0x2a>
 8002c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c34:	f000 f808 	bl	8002c48 <__kernel_cos>
 8002c38:	e7f5      	b.n	8002c26 <sin+0x6e>
 8002c3a:	bf00      	nop
 8002c3c:	3fe921fb 	.word	0x3fe921fb
 8002c40:	7fefffff 	.word	0x7fefffff
 8002c44:	00000000 	.word	0x00000000

08002c48 <__kernel_cos>:
 8002c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8002c50:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8002c54:	4680      	mov	r8, r0
 8002c56:	4689      	mov	r9, r1
 8002c58:	e9cd 2300 	strd	r2, r3, [sp]
 8002c5c:	d204      	bcs.n	8002c68 <__kernel_cos+0x20>
 8002c5e:	f7fd fe51 	bl	8000904 <__aeabi_d2iz>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	f000 8086 	beq.w	8002d74 <__kernel_cos+0x12c>
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4649      	mov	r1, r9
 8002c70:	f7fd fada 	bl	8000228 <__aeabi_dmul>
 8002c74:	2200      	movs	r2, #0
 8002c76:	4b4e      	ldr	r3, [pc, #312]	@ (8002db0 <__kernel_cos+0x168>)
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460d      	mov	r5, r1
 8002c7c:	f7fd fad4 	bl	8000228 <__aeabi_dmul>
 8002c80:	a33f      	add	r3, pc, #252	@ (adr r3, 8002d80 <__kernel_cos+0x138>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	4682      	mov	sl, r0
 8002c88:	468b      	mov	fp, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7fd facb 	bl	8000228 <__aeabi_dmul>
 8002c92:	a33d      	add	r3, pc, #244	@ (adr r3, 8002d88 <__kernel_cos+0x140>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fbf6 	bl	8000488 <__adddf3>
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	f7fd fac2 	bl	8000228 <__aeabi_dmul>
 8002ca4:	a33a      	add	r3, pc, #232	@ (adr r3, 8002d90 <__kernel_cos+0x148>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fbeb 	bl	8000484 <__aeabi_dsub>
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	f7fd fab9 	bl	8000228 <__aeabi_dmul>
 8002cb6:	a338      	add	r3, pc, #224	@ (adr r3, 8002d98 <__kernel_cos+0x150>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fbe4 	bl	8000488 <__adddf3>
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	f7fd fab0 	bl	8000228 <__aeabi_dmul>
 8002cc8:	a335      	add	r3, pc, #212	@ (adr r3, 8002da0 <__kernel_cos+0x158>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fbd9 	bl	8000484 <__aeabi_dsub>
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	f7fd faa7 	bl	8000228 <__aeabi_dmul>
 8002cda:	a333      	add	r3, pc, #204	@ (adr r3, 8002da8 <__kernel_cos+0x160>)
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f7fd fbd2 	bl	8000488 <__adddf3>
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	f7fd fa9e 	bl	8000228 <__aeabi_dmul>
 8002cec:	4622      	mov	r2, r4
 8002cee:	462b      	mov	r3, r5
 8002cf0:	f7fd fa9a 	bl	8000228 <__aeabi_dmul>
 8002cf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	4649      	mov	r1, r9
 8002d00:	f7fd fa92 	bl	8000228 <__aeabi_dmul>
 8002d04:	460b      	mov	r3, r1
 8002d06:	4602      	mov	r2, r0
 8002d08:	4629      	mov	r1, r5
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7fd fbba 	bl	8000484 <__aeabi_dsub>
 8002d10:	4b28      	ldr	r3, [pc, #160]	@ (8002db4 <__kernel_cos+0x16c>)
 8002d12:	4680      	mov	r8, r0
 8002d14:	429e      	cmp	r6, r3
 8002d16:	4689      	mov	r9, r1
 8002d18:	d80e      	bhi.n	8002d38 <__kernel_cos+0xf0>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4650      	mov	r0, sl
 8002d20:	4659      	mov	r1, fp
 8002d22:	f7fd fbaf 	bl	8000484 <__aeabi_dsub>
 8002d26:	4602      	mov	r2, r0
 8002d28:	2000      	movs	r0, #0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4922      	ldr	r1, [pc, #136]	@ (8002db8 <__kernel_cos+0x170>)
 8002d2e:	f7fd fba9 	bl	8000484 <__aeabi_dsub>
 8002d32:	b003      	add	sp, #12
 8002d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d38:	2400      	movs	r4, #0
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <__kernel_cos+0x174>)
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	429e      	cmp	r6, r3
 8002d40:	bf8c      	ite	hi
 8002d42:	4d1f      	ldrhi	r5, [pc, #124]	@ (8002dc0 <__kernel_cos+0x178>)
 8002d44:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8002d48:	462b      	mov	r3, r5
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	491a      	ldr	r1, [pc, #104]	@ (8002db8 <__kernel_cos+0x170>)
 8002d4e:	f7fd fb99 	bl	8000484 <__aeabi_dsub>
 8002d52:	4622      	mov	r2, r4
 8002d54:	4606      	mov	r6, r0
 8002d56:	460f      	mov	r7, r1
 8002d58:	462b      	mov	r3, r5
 8002d5a:	4650      	mov	r0, sl
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	f7fd fb91 	bl	8000484 <__aeabi_dsub>
 8002d62:	4642      	mov	r2, r8
 8002d64:	464b      	mov	r3, r9
 8002d66:	f7fd fb8d 	bl	8000484 <__aeabi_dsub>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4630      	mov	r0, r6
 8002d70:	4639      	mov	r1, r7
 8002d72:	e7dc      	b.n	8002d2e <__kernel_cos+0xe6>
 8002d74:	2000      	movs	r0, #0
 8002d76:	4910      	ldr	r1, [pc, #64]	@ (8002db8 <__kernel_cos+0x170>)
 8002d78:	e7db      	b.n	8002d32 <__kernel_cos+0xea>
 8002d7a:	bf00      	nop
 8002d7c:	f3af 8000 	nop.w
 8002d80:	be8838d4 	.word	0xbe8838d4
 8002d84:	bda8fae9 	.word	0xbda8fae9
 8002d88:	bdb4b1c4 	.word	0xbdb4b1c4
 8002d8c:	3e21ee9e 	.word	0x3e21ee9e
 8002d90:	809c52ad 	.word	0x809c52ad
 8002d94:	3e927e4f 	.word	0x3e927e4f
 8002d98:	19cb1590 	.word	0x19cb1590
 8002d9c:	3efa01a0 	.word	0x3efa01a0
 8002da0:	16c15177 	.word	0x16c15177
 8002da4:	3f56c16c 	.word	0x3f56c16c
 8002da8:	5555554c 	.word	0x5555554c
 8002dac:	3fa55555 	.word	0x3fa55555
 8002db0:	3fe00000 	.word	0x3fe00000
 8002db4:	3fd33332 	.word	0x3fd33332
 8002db8:	3ff00000 	.word	0x3ff00000
 8002dbc:	3fe90000 	.word	0x3fe90000
 8002dc0:	3fd20000 	.word	0x3fd20000
 8002dc4:	00000000 	.word	0x00000000

08002dc8 <__kernel_sin>:
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	461f      	mov	r7, r3
 8002dce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002dd2:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4616      	mov	r6, r2
 8002ddc:	b085      	sub	sp, #20
 8002dde:	d203      	bcs.n	8002de8 <__kernel_sin+0x20>
 8002de0:	f7fd fd90 	bl	8000904 <__aeabi_d2iz>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d051      	beq.n	8002e8c <__kernel_sin+0xc4>
 8002de8:	4622      	mov	r2, r4
 8002dea:	462b      	mov	r3, r5
 8002dec:	4620      	mov	r0, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fd fa1a 	bl	8000228 <__aeabi_dmul>
 8002df4:	4682      	mov	sl, r0
 8002df6:	468b      	mov	fp, r1
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7fd fa12 	bl	8000228 <__aeabi_dmul>
 8002e04:	a33e      	add	r3, pc, #248	@ (adr r3, 8002f00 <__kernel_sin+0x138>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	4680      	mov	r8, r0
 8002e0c:	4689      	mov	r9, r1
 8002e0e:	4650      	mov	r0, sl
 8002e10:	4659      	mov	r1, fp
 8002e12:	f7fd fa09 	bl	8000228 <__aeabi_dmul>
 8002e16:	a33c      	add	r3, pc, #240	@ (adr r3, 8002f08 <__kernel_sin+0x140>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fb32 	bl	8000484 <__aeabi_dsub>
 8002e20:	4652      	mov	r2, sl
 8002e22:	465b      	mov	r3, fp
 8002e24:	f7fd fa00 	bl	8000228 <__aeabi_dmul>
 8002e28:	a339      	add	r3, pc, #228	@ (adr r3, 8002f10 <__kernel_sin+0x148>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd fb2b 	bl	8000488 <__adddf3>
 8002e32:	4652      	mov	r2, sl
 8002e34:	465b      	mov	r3, fp
 8002e36:	f7fd f9f7 	bl	8000228 <__aeabi_dmul>
 8002e3a:	a337      	add	r3, pc, #220	@ (adr r3, 8002f18 <__kernel_sin+0x150>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f7fd fb20 	bl	8000484 <__aeabi_dsub>
 8002e44:	4652      	mov	r2, sl
 8002e46:	465b      	mov	r3, fp
 8002e48:	f7fd f9ee 	bl	8000228 <__aeabi_dmul>
 8002e4c:	a334      	add	r3, pc, #208	@ (adr r3, 8002f20 <__kernel_sin+0x158>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fb19 	bl	8000488 <__adddf3>
 8002e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e58:	e9cd 0100 	strd	r0, r1, [sp]
 8002e5c:	b9db      	cbnz	r3, 8002e96 <__kernel_sin+0xce>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4650      	mov	r0, sl
 8002e64:	4659      	mov	r1, fp
 8002e66:	f7fd f9df 	bl	8000228 <__aeabi_dmul>
 8002e6a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002f28 <__kernel_sin+0x160>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	f7fd fb08 	bl	8000484 <__aeabi_dsub>
 8002e74:	4642      	mov	r2, r8
 8002e76:	464b      	mov	r3, r9
 8002e78:	f7fd f9d6 	bl	8000228 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4620      	mov	r0, r4
 8002e82:	4629      	mov	r1, r5
 8002e84:	f7fd fb00 	bl	8000488 <__adddf3>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	460d      	mov	r5, r1
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	b005      	add	sp, #20
 8002e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e96:	2200      	movs	r2, #0
 8002e98:	4630      	mov	r0, r6
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	4b24      	ldr	r3, [pc, #144]	@ (8002f30 <__kernel_sin+0x168>)
 8002e9e:	f7fd f9c3 	bl	8000228 <__aeabi_dmul>
 8002ea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eaa:	4640      	mov	r0, r8
 8002eac:	4649      	mov	r1, r9
 8002eae:	f7fd f9bb 	bl	8000228 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002eba:	f7fd fae3 	bl	8000484 <__aeabi_dsub>
 8002ebe:	4652      	mov	r2, sl
 8002ec0:	465b      	mov	r3, fp
 8002ec2:	f7fd f9b1 	bl	8000228 <__aeabi_dmul>
 8002ec6:	4632      	mov	r2, r6
 8002ec8:	463b      	mov	r3, r7
 8002eca:	f7fd fadb 	bl	8000484 <__aeabi_dsub>
 8002ece:	a316      	add	r3, pc, #88	@ (adr r3, 8002f28 <__kernel_sin+0x160>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	460f      	mov	r7, r1
 8002ed8:	4640      	mov	r0, r8
 8002eda:	4649      	mov	r1, r9
 8002edc:	f7fd f9a4 	bl	8000228 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	4639      	mov	r1, r7
 8002ee8:	f7fd face 	bl	8000488 <__adddf3>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd fac6 	bl	8000484 <__aeabi_dsub>
 8002ef8:	e7c6      	b.n	8002e88 <__kernel_sin+0xc0>
 8002efa:	bf00      	nop
 8002efc:	f3af 8000 	nop.w
 8002f00:	5acfd57c 	.word	0x5acfd57c
 8002f04:	3de5d93a 	.word	0x3de5d93a
 8002f08:	8a2b9ceb 	.word	0x8a2b9ceb
 8002f0c:	3e5ae5e6 	.word	0x3e5ae5e6
 8002f10:	57b1fe7d 	.word	0x57b1fe7d
 8002f14:	3ec71de3 	.word	0x3ec71de3
 8002f18:	19c161d5 	.word	0x19c161d5
 8002f1c:	3f2a01a0 	.word	0x3f2a01a0
 8002f20:	1110f8a6 	.word	0x1110f8a6
 8002f24:	3f811111 	.word	0x3f811111
 8002f28:	55555549 	.word	0x55555549
 8002f2c:	3fc55555 	.word	0x3fc55555
 8002f30:	3fe00000 	.word	0x3fe00000
 8002f34:	00000000 	.word	0x00000000

08002f38 <__ieee754_rem_pio2>:
 8002f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3c:	4bc4      	ldr	r3, [pc, #784]	@ (8003250 <__ieee754_rem_pio2+0x318>)
 8002f3e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8002f42:	b08d      	sub	sp, #52	@ 0x34
 8002f44:	4598      	cmp	r8, r3
 8002f46:	4606      	mov	r6, r0
 8002f48:	460f      	mov	r7, r1
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	9104      	str	r1, [sp, #16]
 8002f4e:	d807      	bhi.n	8002f60 <__ieee754_rem_pio2+0x28>
 8002f50:	e9c2 6700 	strd	r6, r7, [r2]
 8002f54:	2300      	movs	r3, #0
 8002f56:	2200      	movs	r2, #0
 8002f58:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002f5c:	2500      	movs	r5, #0
 8002f5e:	e026      	b.n	8002fae <__ieee754_rem_pio2+0x76>
 8002f60:	4bbc      	ldr	r3, [pc, #752]	@ (8003254 <__ieee754_rem_pio2+0x31c>)
 8002f62:	4598      	cmp	r8, r3
 8002f64:	d876      	bhi.n	8003054 <__ieee754_rem_pio2+0x11c>
 8002f66:	9b04      	ldr	r3, [sp, #16]
 8002f68:	4dbb      	ldr	r5, [pc, #748]	@ (8003258 <__ieee754_rem_pio2+0x320>)
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8003218 <__ieee754_rem_pio2+0x2e0>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	dd38      	ble.n	8002fe6 <__ieee754_rem_pio2+0xae>
 8002f74:	f7fd fa86 	bl	8000484 <__aeabi_dsub>
 8002f78:	45a8      	cmp	r8, r5
 8002f7a:	4606      	mov	r6, r0
 8002f7c:	460f      	mov	r7, r1
 8002f7e:	d01a      	beq.n	8002fb6 <__ieee754_rem_pio2+0x7e>
 8002f80:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003220 <__ieee754_rem_pio2+0x2e8>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f7fd fa7d 	bl	8000484 <__aeabi_dsub>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4680      	mov	r8, r0
 8002f90:	4689      	mov	r9, r1
 8002f92:	4630      	mov	r0, r6
 8002f94:	4639      	mov	r1, r7
 8002f96:	f7fd fa75 	bl	8000484 <__aeabi_dsub>
 8002f9a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003220 <__ieee754_rem_pio2+0x2e8>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f7fd fa70 	bl	8000484 <__aeabi_dsub>
 8002fa4:	2501      	movs	r5, #1
 8002fa6:	e9c4 8900 	strd	r8, r9, [r4]
 8002faa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002fae:	4628      	mov	r0, r5
 8002fb0:	b00d      	add	sp, #52	@ 0x34
 8002fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb6:	a39c      	add	r3, pc, #624	@ (adr r3, 8003228 <__ieee754_rem_pio2+0x2f0>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd fa62 	bl	8000484 <__aeabi_dsub>
 8002fc0:	a39b      	add	r3, pc, #620	@ (adr r3, 8003230 <__ieee754_rem_pio2+0x2f8>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	460f      	mov	r7, r1
 8002fca:	f7fd fa5b 	bl	8000484 <__aeabi_dsub>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4680      	mov	r8, r0
 8002fd4:	4689      	mov	r9, r1
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	4639      	mov	r1, r7
 8002fda:	f7fd fa53 	bl	8000484 <__aeabi_dsub>
 8002fde:	a394      	add	r3, pc, #592	@ (adr r3, 8003230 <__ieee754_rem_pio2+0x2f8>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	e7dc      	b.n	8002fa0 <__ieee754_rem_pio2+0x68>
 8002fe6:	f7fd fa4f 	bl	8000488 <__adddf3>
 8002fea:	45a8      	cmp	r8, r5
 8002fec:	4606      	mov	r6, r0
 8002fee:	460f      	mov	r7, r1
 8002ff0:	d018      	beq.n	8003024 <__ieee754_rem_pio2+0xec>
 8002ff2:	a38b      	add	r3, pc, #556	@ (adr r3, 8003220 <__ieee754_rem_pio2+0x2e8>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fa46 	bl	8000488 <__adddf3>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4680      	mov	r8, r0
 8003002:	4689      	mov	r9, r1
 8003004:	4630      	mov	r0, r6
 8003006:	4639      	mov	r1, r7
 8003008:	f7fd fa3c 	bl	8000484 <__aeabi_dsub>
 800300c:	a384      	add	r3, pc, #528	@ (adr r3, 8003220 <__ieee754_rem_pio2+0x2e8>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd fa39 	bl	8000488 <__adddf3>
 8003016:	f04f 35ff 	mov.w	r5, #4294967295
 800301a:	e9c4 8900 	strd	r8, r9, [r4]
 800301e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003022:	e7c4      	b.n	8002fae <__ieee754_rem_pio2+0x76>
 8003024:	a380      	add	r3, pc, #512	@ (adr r3, 8003228 <__ieee754_rem_pio2+0x2f0>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd fa2d 	bl	8000488 <__adddf3>
 800302e:	a380      	add	r3, pc, #512	@ (adr r3, 8003230 <__ieee754_rem_pio2+0x2f8>)
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	4606      	mov	r6, r0
 8003036:	460f      	mov	r7, r1
 8003038:	f7fd fa26 	bl	8000488 <__adddf3>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4680      	mov	r8, r0
 8003042:	4689      	mov	r9, r1
 8003044:	4630      	mov	r0, r6
 8003046:	4639      	mov	r1, r7
 8003048:	f7fd fa1c 	bl	8000484 <__aeabi_dsub>
 800304c:	a378      	add	r3, pc, #480	@ (adr r3, 8003230 <__ieee754_rem_pio2+0x2f8>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	e7de      	b.n	8003012 <__ieee754_rem_pio2+0xda>
 8003054:	4b81      	ldr	r3, [pc, #516]	@ (800325c <__ieee754_rem_pio2+0x324>)
 8003056:	4598      	cmp	r8, r3
 8003058:	f200 80cf 	bhi.w	80031fa <__ieee754_rem_pio2+0x2c2>
 800305c:	f000 f962 	bl	8003324 <fabs>
 8003060:	a375      	add	r3, pc, #468	@ (adr r3, 8003238 <__ieee754_rem_pio2+0x300>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	4606      	mov	r6, r0
 8003068:	460f      	mov	r7, r1
 800306a:	f7fd f8dd 	bl	8000228 <__aeabi_dmul>
 800306e:	2200      	movs	r2, #0
 8003070:	4b7b      	ldr	r3, [pc, #492]	@ (8003260 <__ieee754_rem_pio2+0x328>)
 8003072:	f7fd fa09 	bl	8000488 <__adddf3>
 8003076:	f7fd fc45 	bl	8000904 <__aeabi_d2iz>
 800307a:	4605      	mov	r5, r0
 800307c:	f7fd fb50 	bl	8000720 <__aeabi_i2d>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003088:	a363      	add	r3, pc, #396	@ (adr r3, 8003218 <__ieee754_rem_pio2+0x2e0>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f7fd f8cb 	bl	8000228 <__aeabi_dmul>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4630      	mov	r0, r6
 8003098:	4639      	mov	r1, r7
 800309a:	f7fd f9f3 	bl	8000484 <__aeabi_dsub>
 800309e:	a360      	add	r3, pc, #384	@ (adr r3, 8003220 <__ieee754_rem_pio2+0x2e8>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	4682      	mov	sl, r0
 80030a6:	468b      	mov	fp, r1
 80030a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030ac:	f7fd f8bc 	bl	8000228 <__aeabi_dmul>
 80030b0:	2d1f      	cmp	r5, #31
 80030b2:	4606      	mov	r6, r0
 80030b4:	460f      	mov	r7, r1
 80030b6:	dc0c      	bgt.n	80030d2 <__ieee754_rem_pio2+0x19a>
 80030b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003264 <__ieee754_rem_pio2+0x32c>)
 80030ba:	1e6a      	subs	r2, r5, #1
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	4543      	cmp	r3, r8
 80030c2:	d006      	beq.n	80030d2 <__ieee754_rem_pio2+0x19a>
 80030c4:	4632      	mov	r2, r6
 80030c6:	463b      	mov	r3, r7
 80030c8:	4650      	mov	r0, sl
 80030ca:	4659      	mov	r1, fp
 80030cc:	f7fd f9da 	bl	8000484 <__aeabi_dsub>
 80030d0:	e00e      	b.n	80030f0 <__ieee754_rem_pio2+0x1b8>
 80030d2:	463b      	mov	r3, r7
 80030d4:	4632      	mov	r2, r6
 80030d6:	4650      	mov	r0, sl
 80030d8:	4659      	mov	r1, fp
 80030da:	f7fd f9d3 	bl	8000484 <__aeabi_dsub>
 80030de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80030e2:	9305      	str	r3, [sp, #20]
 80030e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80030e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	dc02      	bgt.n	80030f6 <__ieee754_rem_pio2+0x1be>
 80030f0:	e9c4 0100 	strd	r0, r1, [r4]
 80030f4:	e039      	b.n	800316a <__ieee754_rem_pio2+0x232>
 80030f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8003228 <__ieee754_rem_pio2+0x2f0>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003100:	f7fd f892 	bl	8000228 <__aeabi_dmul>
 8003104:	4606      	mov	r6, r0
 8003106:	460f      	mov	r7, r1
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4650      	mov	r0, sl
 800310e:	4659      	mov	r1, fp
 8003110:	f7fd f9b8 	bl	8000484 <__aeabi_dsub>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4680      	mov	r8, r0
 800311a:	4689      	mov	r9, r1
 800311c:	4650      	mov	r0, sl
 800311e:	4659      	mov	r1, fp
 8003120:	f7fd f9b0 	bl	8000484 <__aeabi_dsub>
 8003124:	4632      	mov	r2, r6
 8003126:	463b      	mov	r3, r7
 8003128:	f7fd f9ac 	bl	8000484 <__aeabi_dsub>
 800312c:	a340      	add	r3, pc, #256	@ (adr r3, 8003230 <__ieee754_rem_pio2+0x2f8>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	4606      	mov	r6, r0
 8003134:	460f      	mov	r7, r1
 8003136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800313a:	f7fd f875 	bl	8000228 <__aeabi_dmul>
 800313e:	4632      	mov	r2, r6
 8003140:	463b      	mov	r3, r7
 8003142:	f7fd f99f 	bl	8000484 <__aeabi_dsub>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4606      	mov	r6, r0
 800314c:	460f      	mov	r7, r1
 800314e:	4640      	mov	r0, r8
 8003150:	4649      	mov	r1, r9
 8003152:	f7fd f997 	bl	8000484 <__aeabi_dsub>
 8003156:	9a05      	ldr	r2, [sp, #20]
 8003158:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b31      	cmp	r3, #49	@ 0x31
 8003160:	dc20      	bgt.n	80031a4 <__ieee754_rem_pio2+0x26c>
 8003162:	46c2      	mov	sl, r8
 8003164:	46cb      	mov	fp, r9
 8003166:	e9c4 0100 	strd	r0, r1, [r4]
 800316a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800316e:	4650      	mov	r0, sl
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	4659      	mov	r1, fp
 8003176:	f7fd f985 	bl	8000484 <__aeabi_dsub>
 800317a:	463b      	mov	r3, r7
 800317c:	4632      	mov	r2, r6
 800317e:	f7fd f981 	bl	8000484 <__aeabi_dsub>
 8003182:	9b04      	ldr	r3, [sp, #16]
 8003184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	f6bf af10 	bge.w	8002fae <__ieee754_rem_pio2+0x76>
 800318e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003192:	6063      	str	r3, [r4, #4]
 8003194:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003198:	f8c4 8000 	str.w	r8, [r4]
 800319c:	60a0      	str	r0, [r4, #8]
 800319e:	60e3      	str	r3, [r4, #12]
 80031a0:	426d      	negs	r5, r5
 80031a2:	e704      	b.n	8002fae <__ieee754_rem_pio2+0x76>
 80031a4:	a326      	add	r3, pc, #152	@ (adr r3, 8003240 <__ieee754_rem_pio2+0x308>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031ae:	f7fd f83b 	bl	8000228 <__aeabi_dmul>
 80031b2:	4606      	mov	r6, r0
 80031b4:	460f      	mov	r7, r1
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4640      	mov	r0, r8
 80031bc:	4649      	mov	r1, r9
 80031be:	f7fd f961 	bl	8000484 <__aeabi_dsub>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4682      	mov	sl, r0
 80031c8:	468b      	mov	fp, r1
 80031ca:	4640      	mov	r0, r8
 80031cc:	4649      	mov	r1, r9
 80031ce:	f7fd f959 	bl	8000484 <__aeabi_dsub>
 80031d2:	4632      	mov	r2, r6
 80031d4:	463b      	mov	r3, r7
 80031d6:	f7fd f955 	bl	8000484 <__aeabi_dsub>
 80031da:	a31b      	add	r3, pc, #108	@ (adr r3, 8003248 <__ieee754_rem_pio2+0x310>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	4606      	mov	r6, r0
 80031e2:	460f      	mov	r7, r1
 80031e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031e8:	f7fd f81e 	bl	8000228 <__aeabi_dmul>
 80031ec:	4632      	mov	r2, r6
 80031ee:	463b      	mov	r3, r7
 80031f0:	f7fd f948 	bl	8000484 <__aeabi_dsub>
 80031f4:	4606      	mov	r6, r0
 80031f6:	460f      	mov	r7, r1
 80031f8:	e764      	b.n	80030c4 <__ieee754_rem_pio2+0x18c>
 80031fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <__ieee754_rem_pio2+0x330>)
 80031fc:	4598      	cmp	r8, r3
 80031fe:	d935      	bls.n	800326c <__ieee754_rem_pio2+0x334>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	f7fd f93e 	bl	8000484 <__aeabi_dsub>
 8003208:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800320c:	e9c4 0100 	strd	r0, r1, [r4]
 8003210:	e6a4      	b.n	8002f5c <__ieee754_rem_pio2+0x24>
 8003212:	bf00      	nop
 8003214:	f3af 8000 	nop.w
 8003218:	54400000 	.word	0x54400000
 800321c:	3ff921fb 	.word	0x3ff921fb
 8003220:	1a626331 	.word	0x1a626331
 8003224:	3dd0b461 	.word	0x3dd0b461
 8003228:	1a600000 	.word	0x1a600000
 800322c:	3dd0b461 	.word	0x3dd0b461
 8003230:	2e037073 	.word	0x2e037073
 8003234:	3ba3198a 	.word	0x3ba3198a
 8003238:	6dc9c883 	.word	0x6dc9c883
 800323c:	3fe45f30 	.word	0x3fe45f30
 8003240:	2e000000 	.word	0x2e000000
 8003244:	3ba3198a 	.word	0x3ba3198a
 8003248:	252049c1 	.word	0x252049c1
 800324c:	397b839a 	.word	0x397b839a
 8003250:	3fe921fb 	.word	0x3fe921fb
 8003254:	4002d97b 	.word	0x4002d97b
 8003258:	3ff921fb 	.word	0x3ff921fb
 800325c:	413921fb 	.word	0x413921fb
 8003260:	3fe00000 	.word	0x3fe00000
 8003264:	08004078 	.word	0x08004078
 8003268:	7fefffff 	.word	0x7fefffff
 800326c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003270:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003274:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003278:	460f      	mov	r7, r1
 800327a:	f7fd fb43 	bl	8000904 <__aeabi_d2iz>
 800327e:	f7fd fa4f 	bl	8000720 <__aeabi_i2d>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4630      	mov	r0, r6
 8003288:	4639      	mov	r1, r7
 800328a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800328e:	f7fd f8f9 	bl	8000484 <__aeabi_dsub>
 8003292:	2200      	movs	r2, #0
 8003294:	4b21      	ldr	r3, [pc, #132]	@ (800331c <__ieee754_rem_pio2+0x3e4>)
 8003296:	f7fc ffc7 	bl	8000228 <__aeabi_dmul>
 800329a:	460f      	mov	r7, r1
 800329c:	4606      	mov	r6, r0
 800329e:	f7fd fb31 	bl	8000904 <__aeabi_d2iz>
 80032a2:	f7fd fa3d 	bl	8000720 <__aeabi_i2d>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4630      	mov	r0, r6
 80032ac:	4639      	mov	r1, r7
 80032ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80032b2:	f7fd f8e7 	bl	8000484 <__aeabi_dsub>
 80032b6:	2200      	movs	r2, #0
 80032b8:	4b18      	ldr	r3, [pc, #96]	@ (800331c <__ieee754_rem_pio2+0x3e4>)
 80032ba:	f7fc ffb5 	bl	8000228 <__aeabi_dmul>
 80032be:	f04f 0803 	mov.w	r8, #3
 80032c2:	2600      	movs	r6, #0
 80032c4:	2700      	movs	r7, #0
 80032c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80032ca:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80032ce:	4632      	mov	r2, r6
 80032d0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80032d4:	463b      	mov	r3, r7
 80032d6:	46c2      	mov	sl, r8
 80032d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80032dc:	f7fd fae0 	bl	80008a0 <__aeabi_dcmpeq>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d1f4      	bne.n	80032ce <__ieee754_rem_pio2+0x396>
 80032e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <__ieee754_rem_pio2+0x3e8>)
 80032e6:	462a      	mov	r2, r5
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	2302      	movs	r3, #2
 80032ec:	4621      	mov	r1, r4
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	a806      	add	r0, sp, #24
 80032f2:	4653      	mov	r3, sl
 80032f4:	f000 f81a 	bl	800332c <__kernel_rem_pio2>
 80032f8:	9b04      	ldr	r3, [sp, #16]
 80032fa:	4605      	mov	r5, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f6bf ae56 	bge.w	8002fae <__ieee754_rem_pio2+0x76>
 8003302:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003306:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800330a:	e9c4 2300 	strd	r2, r3, [r4]
 800330e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003312:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003316:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800331a:	e741      	b.n	80031a0 <__ieee754_rem_pio2+0x268>
 800331c:	41700000 	.word	0x41700000
 8003320:	080040f8 	.word	0x080040f8

08003324 <fabs>:
 8003324:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003328:	4619      	mov	r1, r3
 800332a:	4770      	bx	lr

0800332c <__kernel_rem_pio2>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003334:	9308      	str	r3, [sp, #32]
 8003336:	9104      	str	r1, [sp, #16]
 8003338:	4bb6      	ldr	r3, [pc, #728]	@ (8003614 <__kernel_rem_pio2+0x2e8>)
 800333a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800333c:	f112 0f14 	cmn.w	r2, #20
 8003340:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003344:	bfa8      	it	ge
 8003346:	1ed4      	subge	r4, r2, #3
 8003348:	9302      	str	r3, [sp, #8]
 800334a:	9b08      	ldr	r3, [sp, #32]
 800334c:	bfb8      	it	lt
 800334e:	2400      	movlt	r4, #0
 8003350:	f103 33ff 	add.w	r3, r3, #4294967295
 8003354:	9306      	str	r3, [sp, #24]
 8003356:	bfa4      	itt	ge
 8003358:	2318      	movge	r3, #24
 800335a:	fb94 f4f3 	sdivge	r4, r4, r3
 800335e:	f06f 0317 	mvn.w	r3, #23
 8003362:	fb04 3303 	mla	r3, r4, r3, r3
 8003366:	eb03 0a02 	add.w	sl, r3, r2
 800336a:	9a06      	ldr	r2, [sp, #24]
 800336c:	9b02      	ldr	r3, [sp, #8]
 800336e:	1aa7      	subs	r7, r4, r2
 8003370:	eb03 0802 	add.w	r8, r3, r2
 8003374:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8003376:	2500      	movs	r5, #0
 8003378:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800337c:	2200      	movs	r2, #0
 800337e:	2300      	movs	r3, #0
 8003380:	9009      	str	r0, [sp, #36]	@ 0x24
 8003382:	ae20      	add	r6, sp, #128	@ 0x80
 8003384:	4545      	cmp	r5, r8
 8003386:	dd14      	ble.n	80033b2 <__kernel_rem_pio2+0x86>
 8003388:	f04f 0800 	mov.w	r8, #0
 800338c:	9a08      	ldr	r2, [sp, #32]
 800338e:	ab20      	add	r3, sp, #128	@ 0x80
 8003390:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003394:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8003398:	9b02      	ldr	r3, [sp, #8]
 800339a:	4598      	cmp	r8, r3
 800339c:	dc35      	bgt.n	800340a <__kernel_rem_pio2+0xde>
 800339e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033a0:	2200      	movs	r2, #0
 80033a2:	f1a3 0908 	sub.w	r9, r3, #8
 80033a6:	2300      	movs	r3, #0
 80033a8:	462f      	mov	r7, r5
 80033aa:	2600      	movs	r6, #0
 80033ac:	e9cd 2300 	strd	r2, r3, [sp]
 80033b0:	e01f      	b.n	80033f2 <__kernel_rem_pio2+0xc6>
 80033b2:	42ef      	cmn	r7, r5
 80033b4:	d40b      	bmi.n	80033ce <__kernel_rem_pio2+0xa2>
 80033b6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80033ba:	e9cd 2300 	strd	r2, r3, [sp]
 80033be:	f7fd f9af 	bl	8000720 <__aeabi_i2d>
 80033c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033c6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80033ca:	3501      	adds	r5, #1
 80033cc:	e7da      	b.n	8003384 <__kernel_rem_pio2+0x58>
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	e7f8      	b.n	80033c6 <__kernel_rem_pio2+0x9a>
 80033d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80033dc:	f7fc ff24 	bl	8000228 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033e8:	f7fd f84e 	bl	8000488 <__adddf3>
 80033ec:	e9cd 0100 	strd	r0, r1, [sp]
 80033f0:	3601      	adds	r6, #1
 80033f2:	9b06      	ldr	r3, [sp, #24]
 80033f4:	3f08      	subs	r7, #8
 80033f6:	429e      	cmp	r6, r3
 80033f8:	ddec      	ble.n	80033d4 <__kernel_rem_pio2+0xa8>
 80033fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033fe:	f108 0801 	add.w	r8, r8, #1
 8003402:	e8eb 2302 	strd	r2, r3, [fp], #8
 8003406:	3508      	adds	r5, #8
 8003408:	e7c6      	b.n	8003398 <__kernel_rem_pio2+0x6c>
 800340a:	9b02      	ldr	r3, [sp, #8]
 800340c:	aa0c      	add	r2, sp, #48	@ 0x30
 800340e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003414:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8003416:	f8dd b008 	ldr.w	fp, [sp, #8]
 800341a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800341e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003420:	ab98      	add	r3, sp, #608	@ 0x260
 8003422:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003426:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800342a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800342c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003430:	ae0c      	add	r6, sp, #48	@ 0x30
 8003432:	4698      	mov	r8, r3
 8003434:	46b1      	mov	r9, r6
 8003436:	465f      	mov	r7, fp
 8003438:	9307      	str	r3, [sp, #28]
 800343a:	2f00      	cmp	r7, #0
 800343c:	f1a8 0808 	sub.w	r8, r8, #8
 8003440:	dc71      	bgt.n	8003526 <__kernel_rem_pio2+0x1fa>
 8003442:	4652      	mov	r2, sl
 8003444:	4620      	mov	r0, r4
 8003446:	4629      	mov	r1, r5
 8003448:	f000 fa96 	bl	8003978 <scalbn>
 800344c:	2200      	movs	r2, #0
 800344e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003452:	4604      	mov	r4, r0
 8003454:	460d      	mov	r5, r1
 8003456:	f7fc fee7 	bl	8000228 <__aeabi_dmul>
 800345a:	f000 fb05 	bl	8003a68 <floor>
 800345e:	2200      	movs	r2, #0
 8003460:	4b6d      	ldr	r3, [pc, #436]	@ (8003618 <__kernel_rem_pio2+0x2ec>)
 8003462:	f7fc fee1 	bl	8000228 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fd f809 	bl	8000484 <__aeabi_dsub>
 8003472:	460d      	mov	r5, r1
 8003474:	4604      	mov	r4, r0
 8003476:	f7fd fa45 	bl	8000904 <__aeabi_d2iz>
 800347a:	9005      	str	r0, [sp, #20]
 800347c:	f7fd f950 	bl	8000720 <__aeabi_i2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	f7fc fffc 	bl	8000484 <__aeabi_dsub>
 800348c:	f1ba 0f00 	cmp.w	sl, #0
 8003490:	4680      	mov	r8, r0
 8003492:	4689      	mov	r9, r1
 8003494:	dd6d      	ble.n	8003572 <__kernel_rem_pio2+0x246>
 8003496:	f10b 31ff 	add.w	r1, fp, #4294967295
 800349a:	ab0c      	add	r3, sp, #48	@ 0x30
 800349c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034a0:	9c05      	ldr	r4, [sp, #20]
 80034a2:	f1ca 0018 	rsb	r0, sl, #24
 80034a6:	fa43 f200 	asr.w	r2, r3, r0
 80034aa:	4414      	add	r4, r2
 80034ac:	4082      	lsls	r2, r0
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80034b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80034b6:	f1ca 0217 	rsb	r2, sl, #23
 80034ba:	9405      	str	r4, [sp, #20]
 80034bc:	4113      	asrs	r3, r2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	9b00      	ldr	r3, [sp, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	dd64      	ble.n	8003590 <__kernel_rem_pio2+0x264>
 80034c6:	2200      	movs	r2, #0
 80034c8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80034cc:	4614      	mov	r4, r2
 80034ce:	9b05      	ldr	r3, [sp, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	9305      	str	r3, [sp, #20]
 80034d4:	4593      	cmp	fp, r2
 80034d6:	f300 80ab 	bgt.w	8003630 <__kernel_rem_pio2+0x304>
 80034da:	f1ba 0f00 	cmp.w	sl, #0
 80034de:	dd07      	ble.n	80034f0 <__kernel_rem_pio2+0x1c4>
 80034e0:	f1ba 0f01 	cmp.w	sl, #1
 80034e4:	f000 80b2 	beq.w	800364c <__kernel_rem_pio2+0x320>
 80034e8:	f1ba 0f02 	cmp.w	sl, #2
 80034ec:	f000 80b9 	beq.w	8003662 <__kernel_rem_pio2+0x336>
 80034f0:	9b00      	ldr	r3, [sp, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d14c      	bne.n	8003590 <__kernel_rem_pio2+0x264>
 80034f6:	4642      	mov	r2, r8
 80034f8:	464b      	mov	r3, r9
 80034fa:	2000      	movs	r0, #0
 80034fc:	4947      	ldr	r1, [pc, #284]	@ (800361c <__kernel_rem_pio2+0x2f0>)
 80034fe:	f7fc ffc1 	bl	8000484 <__aeabi_dsub>
 8003502:	4680      	mov	r8, r0
 8003504:	4689      	mov	r9, r1
 8003506:	2c00      	cmp	r4, #0
 8003508:	d042      	beq.n	8003590 <__kernel_rem_pio2+0x264>
 800350a:	4652      	mov	r2, sl
 800350c:	2000      	movs	r0, #0
 800350e:	4943      	ldr	r1, [pc, #268]	@ (800361c <__kernel_rem_pio2+0x2f0>)
 8003510:	f000 fa32 	bl	8003978 <scalbn>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4640      	mov	r0, r8
 800351a:	4649      	mov	r1, r9
 800351c:	f7fc ffb2 	bl	8000484 <__aeabi_dsub>
 8003520:	4680      	mov	r8, r0
 8003522:	4689      	mov	r9, r1
 8003524:	e034      	b.n	8003590 <__kernel_rem_pio2+0x264>
 8003526:	2200      	movs	r2, #0
 8003528:	4b3d      	ldr	r3, [pc, #244]	@ (8003620 <__kernel_rem_pio2+0x2f4>)
 800352a:	4620      	mov	r0, r4
 800352c:	4629      	mov	r1, r5
 800352e:	f7fc fe7b 	bl	8000228 <__aeabi_dmul>
 8003532:	f7fd f9e7 	bl	8000904 <__aeabi_d2iz>
 8003536:	f7fd f8f3 	bl	8000720 <__aeabi_i2d>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	e9cd 2300 	strd	r2, r3, [sp]
 8003542:	2200      	movs	r2, #0
 8003544:	4b37      	ldr	r3, [pc, #220]	@ (8003624 <__kernel_rem_pio2+0x2f8>)
 8003546:	f7fc fe6f 	bl	8000228 <__aeabi_dmul>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4620      	mov	r0, r4
 8003550:	4629      	mov	r1, r5
 8003552:	f7fc ff97 	bl	8000484 <__aeabi_dsub>
 8003556:	f7fd f9d5 	bl	8000904 <__aeabi_d2iz>
 800355a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800355e:	f849 0b04 	str.w	r0, [r9], #4
 8003562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003566:	f7fc ff8f 	bl	8000488 <__adddf3>
 800356a:	3f01      	subs	r7, #1
 800356c:	4604      	mov	r4, r0
 800356e:	460d      	mov	r5, r1
 8003570:	e763      	b.n	800343a <__kernel_rem_pio2+0x10e>
 8003572:	d106      	bne.n	8003582 <__kernel_rem_pio2+0x256>
 8003574:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003578:	aa0c      	add	r2, sp, #48	@ 0x30
 800357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357e:	15db      	asrs	r3, r3, #23
 8003580:	e79d      	b.n	80034be <__kernel_rem_pio2+0x192>
 8003582:	2200      	movs	r2, #0
 8003584:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <__kernel_rem_pio2+0x2fc>)
 8003586:	f7fd f9a9 	bl	80008dc <__aeabi_dcmpge>
 800358a:	2800      	cmp	r0, #0
 800358c:	d13f      	bne.n	800360e <__kernel_rem_pio2+0x2e2>
 800358e:	9000      	str	r0, [sp, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	2300      	movs	r3, #0
 8003594:	4640      	mov	r0, r8
 8003596:	4649      	mov	r1, r9
 8003598:	f7fd f982 	bl	80008a0 <__aeabi_dcmpeq>
 800359c:	2800      	cmp	r0, #0
 800359e:	f000 80af 	beq.w	8003700 <__kernel_rem_pio2+0x3d4>
 80035a2:	2200      	movs	r2, #0
 80035a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80035a8:	9902      	ldr	r1, [sp, #8]
 80035aa:	428b      	cmp	r3, r1
 80035ac:	da61      	bge.n	8003672 <__kernel_rem_pio2+0x346>
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	d076      	beq.n	80036a0 <__kernel_rem_pio2+0x374>
 80035b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80035b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80035bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f6      	beq.n	80035b2 <__kernel_rem_pio2+0x286>
 80035c4:	4652      	mov	r2, sl
 80035c6:	2000      	movs	r0, #0
 80035c8:	4914      	ldr	r1, [pc, #80]	@ (800361c <__kernel_rem_pio2+0x2f0>)
 80035ca:	f000 f9d5 	bl	8003978 <scalbn>
 80035ce:	465d      	mov	r5, fp
 80035d0:	4606      	mov	r6, r0
 80035d2:	460f      	mov	r7, r1
 80035d4:	f04f 0900 	mov.w	r9, #0
 80035d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80035da:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8003620 <__kernel_rem_pio2+0x2f4>
 80035de:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80035e2:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 80035e6:	2d00      	cmp	r5, #0
 80035e8:	f280 80c0 	bge.w	800376c <__kernel_rem_pio2+0x440>
 80035ec:	465d      	mov	r5, fp
 80035ee:	2d00      	cmp	r5, #0
 80035f0:	f2c0 80f0 	blt.w	80037d4 <__kernel_rem_pio2+0x4a8>
 80035f4:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <__kernel_rem_pio2+0x300>)
 80035f6:	f04f 0900 	mov.w	r9, #0
 80035fa:	9306      	str	r3, [sp, #24]
 80035fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80035fe:	f04f 0a00 	mov.w	sl, #0
 8003602:	2700      	movs	r7, #0
 8003604:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8003608:	ebab 0605 	sub.w	r6, fp, r5
 800360c:	e0d6      	b.n	80037bc <__kernel_rem_pio2+0x490>
 800360e:	2302      	movs	r3, #2
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	e758      	b.n	80034c6 <__kernel_rem_pio2+0x19a>
 8003614:	08004240 	.word	0x08004240
 8003618:	40200000 	.word	0x40200000
 800361c:	3ff00000 	.word	0x3ff00000
 8003620:	3e700000 	.word	0x3e700000
 8003624:	41700000 	.word	0x41700000
 8003628:	3fe00000 	.word	0x3fe00000
 800362c:	08004200 	.word	0x08004200
 8003630:	f856 3b04 	ldr.w	r3, [r6], #4
 8003634:	b944      	cbnz	r4, 8003648 <__kernel_rem_pio2+0x31c>
 8003636:	b123      	cbz	r3, 8003642 <__kernel_rem_pio2+0x316>
 8003638:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800363c:	f846 3c04 	str.w	r3, [r6, #-4]
 8003640:	2301      	movs	r3, #1
 8003642:	461c      	mov	r4, r3
 8003644:	3201      	adds	r2, #1
 8003646:	e745      	b.n	80034d4 <__kernel_rem_pio2+0x1a8>
 8003648:	1acb      	subs	r3, r1, r3
 800364a:	e7f7      	b.n	800363c <__kernel_rem_pio2+0x310>
 800364c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003650:	ab0c      	add	r3, sp, #48	@ 0x30
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800365a:	a90c      	add	r1, sp, #48	@ 0x30
 800365c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003660:	e746      	b.n	80034f0 <__kernel_rem_pio2+0x1c4>
 8003662:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003666:	ab0c      	add	r3, sp, #48	@ 0x30
 8003668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003670:	e7f3      	b.n	800365a <__kernel_rem_pio2+0x32e>
 8003672:	a90c      	add	r1, sp, #48	@ 0x30
 8003674:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003678:	3b01      	subs	r3, #1
 800367a:	430a      	orrs	r2, r1
 800367c:	e794      	b.n	80035a8 <__kernel_rem_pio2+0x27c>
 800367e:	3401      	adds	r4, #1
 8003680:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003684:	2a00      	cmp	r2, #0
 8003686:	d0fa      	beq.n	800367e <__kernel_rem_pio2+0x352>
 8003688:	9b08      	ldr	r3, [sp, #32]
 800368a:	aa20      	add	r2, sp, #128	@ 0x80
 800368c:	445b      	add	r3, fp
 800368e:	f10b 0801 	add.w	r8, fp, #1
 8003692:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003696:	445c      	add	r4, fp
 8003698:	4544      	cmp	r4, r8
 800369a:	da04      	bge.n	80036a6 <__kernel_rem_pio2+0x37a>
 800369c:	46a3      	mov	fp, r4
 800369e:	e6bf      	b.n	8003420 <__kernel_rem_pio2+0xf4>
 80036a0:	2401      	movs	r4, #1
 80036a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036a4:	e7ec      	b.n	8003680 <__kernel_rem_pio2+0x354>
 80036a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036a8:	46ab      	mov	fp, r5
 80036aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80036ae:	f7fd f837 	bl	8000720 <__aeabi_i2d>
 80036b2:	f04f 0900 	mov.w	r9, #0
 80036b6:	2600      	movs	r6, #0
 80036b8:	2700      	movs	r7, #0
 80036ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036bc:	e9c5 0100 	strd	r0, r1, [r5]
 80036c0:	3b08      	subs	r3, #8
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	9b06      	ldr	r3, [sp, #24]
 80036c6:	4599      	cmp	r9, r3
 80036c8:	dd07      	ble.n	80036da <__kernel_rem_pio2+0x3ae>
 80036ca:	9b07      	ldr	r3, [sp, #28]
 80036cc:	f108 0801 	add.w	r8, r8, #1
 80036d0:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 80036d4:	3508      	adds	r5, #8
 80036d6:	9307      	str	r3, [sp, #28]
 80036d8:	e7de      	b.n	8003698 <__kernel_rem_pio2+0x36c>
 80036da:	9900      	ldr	r1, [sp, #0]
 80036dc:	f109 0901 	add.w	r9, r9, #1
 80036e0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80036e4:	9100      	str	r1, [sp, #0]
 80036e6:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 80036ea:	f7fc fd9d 	bl	8000228 <__aeabi_dmul>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4630      	mov	r0, r6
 80036f4:	4639      	mov	r1, r7
 80036f6:	f7fc fec7 	bl	8000488 <__adddf3>
 80036fa:	4606      	mov	r6, r0
 80036fc:	460f      	mov	r7, r1
 80036fe:	e7e1      	b.n	80036c4 <__kernel_rem_pio2+0x398>
 8003700:	f1ca 0200 	rsb	r2, sl, #0
 8003704:	4640      	mov	r0, r8
 8003706:	4649      	mov	r1, r9
 8003708:	f000 f936 	bl	8003978 <scalbn>
 800370c:	2200      	movs	r2, #0
 800370e:	4b97      	ldr	r3, [pc, #604]	@ (800396c <__kernel_rem_pio2+0x640>)
 8003710:	4604      	mov	r4, r0
 8003712:	460d      	mov	r5, r1
 8003714:	f7fd f8e2 	bl	80008dc <__aeabi_dcmpge>
 8003718:	b300      	cbz	r0, 800375c <__kernel_rem_pio2+0x430>
 800371a:	2200      	movs	r2, #0
 800371c:	4b94      	ldr	r3, [pc, #592]	@ (8003970 <__kernel_rem_pio2+0x644>)
 800371e:	4620      	mov	r0, r4
 8003720:	4629      	mov	r1, r5
 8003722:	f7fc fd81 	bl	8000228 <__aeabi_dmul>
 8003726:	f7fd f8ed 	bl	8000904 <__aeabi_d2iz>
 800372a:	4606      	mov	r6, r0
 800372c:	f7fc fff8 	bl	8000720 <__aeabi_i2d>
 8003730:	2200      	movs	r2, #0
 8003732:	4b8e      	ldr	r3, [pc, #568]	@ (800396c <__kernel_rem_pio2+0x640>)
 8003734:	f7fc fd78 	bl	8000228 <__aeabi_dmul>
 8003738:	460b      	mov	r3, r1
 800373a:	4602      	mov	r2, r0
 800373c:	4629      	mov	r1, r5
 800373e:	4620      	mov	r0, r4
 8003740:	f7fc fea0 	bl	8000484 <__aeabi_dsub>
 8003744:	f7fd f8de 	bl	8000904 <__aeabi_d2iz>
 8003748:	ab0c      	add	r3, sp, #48	@ 0x30
 800374a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800374e:	f10b 0b01 	add.w	fp, fp, #1
 8003752:	f10a 0a18 	add.w	sl, sl, #24
 8003756:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800375a:	e733      	b.n	80035c4 <__kernel_rem_pio2+0x298>
 800375c:	4620      	mov	r0, r4
 800375e:	4629      	mov	r1, r5
 8003760:	f7fd f8d0 	bl	8000904 <__aeabi_d2iz>
 8003764:	ab0c      	add	r3, sp, #48	@ 0x30
 8003766:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800376a:	e72b      	b.n	80035c4 <__kernel_rem_pio2+0x298>
 800376c:	ab0c      	add	r3, sp, #48	@ 0x30
 800376e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003772:	f7fc ffd5 	bl	8000720 <__aeabi_i2d>
 8003776:	4632      	mov	r2, r6
 8003778:	463b      	mov	r3, r7
 800377a:	f7fc fd55 	bl	8000228 <__aeabi_dmul>
 800377e:	464a      	mov	r2, r9
 8003780:	e868 0102 	strd	r0, r1, [r8], #-8
 8003784:	4653      	mov	r3, sl
 8003786:	4630      	mov	r0, r6
 8003788:	4639      	mov	r1, r7
 800378a:	f7fc fd4d 	bl	8000228 <__aeabi_dmul>
 800378e:	3d01      	subs	r5, #1
 8003790:	4606      	mov	r6, r0
 8003792:	460f      	mov	r7, r1
 8003794:	e727      	b.n	80035e6 <__kernel_rem_pio2+0x2ba>
 8003796:	f8dd c018 	ldr.w	ip, [sp, #24]
 800379a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800379e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80037a2:	f8cd c018 	str.w	ip, [sp, #24]
 80037a6:	f7fc fd3f 	bl	8000228 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4648      	mov	r0, r9
 80037b0:	4651      	mov	r1, sl
 80037b2:	f7fc fe69 	bl	8000488 <__adddf3>
 80037b6:	4681      	mov	r9, r0
 80037b8:	468a      	mov	sl, r1
 80037ba:	3701      	adds	r7, #1
 80037bc:	9b02      	ldr	r3, [sp, #8]
 80037be:	429f      	cmp	r7, r3
 80037c0:	dc01      	bgt.n	80037c6 <__kernel_rem_pio2+0x49a>
 80037c2:	42be      	cmp	r6, r7
 80037c4:	dae7      	bge.n	8003796 <__kernel_rem_pio2+0x46a>
 80037c6:	ab48      	add	r3, sp, #288	@ 0x120
 80037c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80037cc:	e9c6 9a00 	strd	r9, sl, [r6]
 80037d0:	3d01      	subs	r5, #1
 80037d2:	e70c      	b.n	80035ee <__kernel_rem_pio2+0x2c2>
 80037d4:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	dc09      	bgt.n	80037ee <__kernel_rem_pio2+0x4c2>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	dc2c      	bgt.n	8003838 <__kernel_rem_pio2+0x50c>
 80037de:	d04e      	beq.n	800387e <__kernel_rem_pio2+0x552>
 80037e0:	9b05      	ldr	r3, [sp, #20]
 80037e2:	f003 0007 	and.w	r0, r3, #7
 80037e6:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80037ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ee:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d1f5      	bne.n	80037e0 <__kernel_rem_pio2+0x4b4>
 80037f4:	ab48      	add	r3, sp, #288	@ 0x120
 80037f6:	441c      	add	r4, r3
 80037f8:	4625      	mov	r5, r4
 80037fa:	46da      	mov	sl, fp
 80037fc:	f1ba 0f00 	cmp.w	sl, #0
 8003800:	dc63      	bgt.n	80038ca <__kernel_rem_pio2+0x59e>
 8003802:	4625      	mov	r5, r4
 8003804:	46da      	mov	sl, fp
 8003806:	f1ba 0f01 	cmp.w	sl, #1
 800380a:	dc7b      	bgt.n	8003904 <__kernel_rem_pio2+0x5d8>
 800380c:	2000      	movs	r0, #0
 800380e:	2100      	movs	r1, #0
 8003810:	f1bb 0f01 	cmp.w	fp, #1
 8003814:	f300 8093 	bgt.w	800393e <__kernel_rem_pio2+0x612>
 8003818:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800381c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8003820:	9b00      	ldr	r3, [sp, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 8092 	bne.w	800394c <__kernel_rem_pio2+0x620>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	e9c3 7800 	strd	r7, r8, [r3]
 800382e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003832:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003836:	e7d3      	b.n	80037e0 <__kernel_rem_pio2+0x4b4>
 8003838:	465d      	mov	r5, fp
 800383a:	2000      	movs	r0, #0
 800383c:	2100      	movs	r1, #0
 800383e:	ab48      	add	r3, sp, #288	@ 0x120
 8003840:	441c      	add	r4, r3
 8003842:	2d00      	cmp	r5, #0
 8003844:	da32      	bge.n	80038ac <__kernel_rem_pio2+0x580>
 8003846:	9b00      	ldr	r3, [sp, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d035      	beq.n	80038b8 <__kernel_rem_pio2+0x58c>
 800384c:	4602      	mov	r2, r0
 800384e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003852:	9c04      	ldr	r4, [sp, #16]
 8003854:	2501      	movs	r5, #1
 8003856:	e9c4 2300 	strd	r2, r3, [r4]
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003862:	f7fc fe0f 	bl	8000484 <__aeabi_dsub>
 8003866:	ac48      	add	r4, sp, #288	@ 0x120
 8003868:	45ab      	cmp	fp, r5
 800386a:	da28      	bge.n	80038be <__kernel_rem_pio2+0x592>
 800386c:	9b00      	ldr	r3, [sp, #0]
 800386e:	b113      	cbz	r3, 8003876 <__kernel_rem_pio2+0x54a>
 8003870:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003874:	4619      	mov	r1, r3
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800387c:	e7b0      	b.n	80037e0 <__kernel_rem_pio2+0x4b4>
 800387e:	2000      	movs	r0, #0
 8003880:	2100      	movs	r1, #0
 8003882:	ab48      	add	r3, sp, #288	@ 0x120
 8003884:	441c      	add	r4, r3
 8003886:	f1bb 0f00 	cmp.w	fp, #0
 800388a:	da08      	bge.n	800389e <__kernel_rem_pio2+0x572>
 800388c:	9b00      	ldr	r3, [sp, #0]
 800388e:	b113      	cbz	r3, 8003896 <__kernel_rem_pio2+0x56a>
 8003890:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003894:	4619      	mov	r1, r3
 8003896:	9b04      	ldr	r3, [sp, #16]
 8003898:	e9c3 0100 	strd	r0, r1, [r3]
 800389c:	e7a0      	b.n	80037e0 <__kernel_rem_pio2+0x4b4>
 800389e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80038a2:	f7fc fdf1 	bl	8000488 <__adddf3>
 80038a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80038aa:	e7ec      	b.n	8003886 <__kernel_rem_pio2+0x55a>
 80038ac:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80038b0:	f7fc fdea 	bl	8000488 <__adddf3>
 80038b4:	3d01      	subs	r5, #1
 80038b6:	e7c4      	b.n	8003842 <__kernel_rem_pio2+0x516>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	e7c9      	b.n	8003852 <__kernel_rem_pio2+0x526>
 80038be:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80038c2:	f7fc fde1 	bl	8000488 <__adddf3>
 80038c6:	3501      	adds	r5, #1
 80038c8:	e7ce      	b.n	8003868 <__kernel_rem_pio2+0x53c>
 80038ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80038ce:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80038d2:	4640      	mov	r0, r8
 80038d4:	4649      	mov	r1, r9
 80038d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038da:	f7fc fdd5 	bl	8000488 <__adddf3>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4606      	mov	r6, r0
 80038e4:	460f      	mov	r7, r1
 80038e6:	4640      	mov	r0, r8
 80038e8:	4649      	mov	r1, r9
 80038ea:	f7fc fdcb 	bl	8000484 <__aeabi_dsub>
 80038ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038f2:	f7fc fdc9 	bl	8000488 <__adddf3>
 80038f6:	e865 0102 	strd	r0, r1, [r5], #-8
 80038fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038fe:	e9c5 6700 	strd	r6, r7, [r5]
 8003902:	e77b      	b.n	80037fc <__kernel_rem_pio2+0x4d0>
 8003904:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003908:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800390c:	4640      	mov	r0, r8
 800390e:	4649      	mov	r1, r9
 8003910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003914:	f7fc fdb8 	bl	8000488 <__adddf3>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4606      	mov	r6, r0
 800391e:	460f      	mov	r7, r1
 8003920:	4640      	mov	r0, r8
 8003922:	4649      	mov	r1, r9
 8003924:	f7fc fdae 	bl	8000484 <__aeabi_dsub>
 8003928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800392c:	f7fc fdac 	bl	8000488 <__adddf3>
 8003930:	e865 0102 	strd	r0, r1, [r5], #-8
 8003934:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003938:	e9c5 6700 	strd	r6, r7, [r5]
 800393c:	e763      	b.n	8003806 <__kernel_rem_pio2+0x4da>
 800393e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003942:	f7fc fda1 	bl	8000488 <__adddf3>
 8003946:	f10b 3bff 	add.w	fp, fp, #4294967295
 800394a:	e761      	b.n	8003810 <__kernel_rem_pio2+0x4e4>
 800394c:	9b04      	ldr	r3, [sp, #16]
 800394e:	9a04      	ldr	r2, [sp, #16]
 8003950:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8003954:	601f      	str	r7, [r3, #0]
 8003956:	605c      	str	r4, [r3, #4]
 8003958:	609d      	str	r5, [r3, #8]
 800395a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003964:	6110      	str	r0, [r2, #16]
 8003966:	6153      	str	r3, [r2, #20]
 8003968:	e73a      	b.n	80037e0 <__kernel_rem_pio2+0x4b4>
 800396a:	bf00      	nop
 800396c:	41700000 	.word	0x41700000
 8003970:	3e700000 	.word	0x3e700000
 8003974:	00000000 	.word	0x00000000

08003978 <scalbn>:
 8003978:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800397c:	4616      	mov	r6, r2
 800397e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003982:	4683      	mov	fp, r0
 8003984:	468c      	mov	ip, r1
 8003986:	460b      	mov	r3, r1
 8003988:	b982      	cbnz	r2, 80039ac <scalbn+0x34>
 800398a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800398e:	4303      	orrs	r3, r0
 8003990:	d039      	beq.n	8003a06 <scalbn+0x8e>
 8003992:	4b2f      	ldr	r3, [pc, #188]	@ (8003a50 <scalbn+0xd8>)
 8003994:	2200      	movs	r2, #0
 8003996:	f7fc fc47 	bl	8000228 <__aeabi_dmul>
 800399a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a54 <scalbn+0xdc>)
 800399c:	4683      	mov	fp, r0
 800399e:	429e      	cmp	r6, r3
 80039a0:	468c      	mov	ip, r1
 80039a2:	da0d      	bge.n	80039c0 <scalbn+0x48>
 80039a4:	a326      	add	r3, pc, #152	@ (adr r3, 8003a40 <scalbn+0xc8>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	e01b      	b.n	80039e4 <scalbn+0x6c>
 80039ac:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80039b0:	42ba      	cmp	r2, r7
 80039b2:	d109      	bne.n	80039c8 <scalbn+0x50>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f7fc fd67 	bl	8000488 <__adddf3>
 80039ba:	4683      	mov	fp, r0
 80039bc:	468c      	mov	ip, r1
 80039be:	e022      	b.n	8003a06 <scalbn+0x8e>
 80039c0:	460b      	mov	r3, r1
 80039c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80039c6:	3a36      	subs	r2, #54	@ 0x36
 80039c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80039cc:	428e      	cmp	r6, r1
 80039ce:	dd0c      	ble.n	80039ea <scalbn+0x72>
 80039d0:	a31d      	add	r3, pc, #116	@ (adr r3, 8003a48 <scalbn+0xd0>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	461c      	mov	r4, r3
 80039d8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80039dc:	f361 74df 	bfi	r4, r1, #31, #1
 80039e0:	4621      	mov	r1, r4
 80039e2:	481d      	ldr	r0, [pc, #116]	@ (8003a58 <scalbn+0xe0>)
 80039e4:	f7fc fc20 	bl	8000228 <__aeabi_dmul>
 80039e8:	e7e7      	b.n	80039ba <scalbn+0x42>
 80039ea:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80039ee:	4432      	add	r2, r6
 80039f0:	428a      	cmp	r2, r1
 80039f2:	dced      	bgt.n	80039d0 <scalbn+0x58>
 80039f4:	2a00      	cmp	r2, #0
 80039f6:	dd0a      	ble.n	8003a0e <scalbn+0x96>
 80039f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80039fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003a00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003a04:	46ac      	mov	ip, r5
 8003a06:	4658      	mov	r0, fp
 8003a08:	4661      	mov	r1, ip
 8003a0a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003a0e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003a12:	da09      	bge.n	8003a28 <scalbn+0xb0>
 8003a14:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8003a18:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8003a1c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8003a20:	480e      	ldr	r0, [pc, #56]	@ (8003a5c <scalbn+0xe4>)
 8003a22:	f041 011f 	orr.w	r1, r1, #31
 8003a26:	e7bd      	b.n	80039a4 <scalbn+0x2c>
 8003a28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003a2c:	3236      	adds	r2, #54	@ 0x36
 8003a2e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003a32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003a36:	4658      	mov	r0, fp
 8003a38:	4629      	mov	r1, r5
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <scalbn+0xe8>)
 8003a3e:	e7d1      	b.n	80039e4 <scalbn+0x6c>
 8003a40:	c2f8f359 	.word	0xc2f8f359
 8003a44:	01a56e1f 	.word	0x01a56e1f
 8003a48:	8800759c 	.word	0x8800759c
 8003a4c:	7e37e43c 	.word	0x7e37e43c
 8003a50:	43500000 	.word	0x43500000
 8003a54:	ffff3cb0 	.word	0xffff3cb0
 8003a58:	8800759c 	.word	0x8800759c
 8003a5c:	c2f8f359 	.word	0xc2f8f359
 8003a60:	3c900000 	.word	0x3c900000
 8003a64:	00000000 	.word	0x00000000

08003a68 <floor>:
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003a70:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8003a74:	2e13      	cmp	r6, #19
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	4680      	mov	r8, r0
 8003a80:	dc35      	bgt.n	8003aee <floor+0x86>
 8003a82:	2e00      	cmp	r6, #0
 8003a84:	da17      	bge.n	8003ab6 <floor+0x4e>
 8003a86:	a334      	add	r3, pc, #208	@ (adr r3, 8003b58 <floor+0xf0>)
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f7fc fcfc 	bl	8000488 <__adddf3>
 8003a90:	2200      	movs	r2, #0
 8003a92:	2300      	movs	r3, #0
 8003a94:	f7fc ff2c 	bl	80008f0 <__aeabi_dcmpgt>
 8003a98:	b150      	cbz	r0, 8003ab0 <floor+0x48>
 8003a9a:	2c00      	cmp	r4, #0
 8003a9c:	da57      	bge.n	8003b4e <floor+0xe6>
 8003a9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003aa2:	432c      	orrs	r4, r5
 8003aa4:	2500      	movs	r5, #0
 8003aa6:	42ac      	cmp	r4, r5
 8003aa8:	4c2d      	ldr	r4, [pc, #180]	@ (8003b60 <floor+0xf8>)
 8003aaa:	bf08      	it	eq
 8003aac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	462a      	mov	r2, r5
 8003ab4:	e024      	b.n	8003b00 <floor+0x98>
 8003ab6:	4f2b      	ldr	r7, [pc, #172]	@ (8003b64 <floor+0xfc>)
 8003ab8:	4137      	asrs	r7, r6
 8003aba:	ea01 0c07 	and.w	ip, r1, r7
 8003abe:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003ac2:	d01d      	beq.n	8003b00 <floor+0x98>
 8003ac4:	a324      	add	r3, pc, #144	@ (adr r3, 8003b58 <floor+0xf0>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fcdd 	bl	8000488 <__adddf3>
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f7fc ff0d 	bl	80008f0 <__aeabi_dcmpgt>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d0ea      	beq.n	8003ab0 <floor+0x48>
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	bfbe      	ittt	lt
 8003ade:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8003ae2:	4133      	asrlt	r3, r6
 8003ae4:	18e4      	addlt	r4, r4, r3
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	ea24 0407 	bic.w	r4, r4, r7
 8003aec:	e7e0      	b.n	8003ab0 <floor+0x48>
 8003aee:	2e33      	cmp	r6, #51	@ 0x33
 8003af0:	dd0a      	ble.n	8003b08 <floor+0xa0>
 8003af2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003af6:	d103      	bne.n	8003b00 <floor+0x98>
 8003af8:	f7fc fcc6 	bl	8000488 <__adddf3>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b08:	f04f 3cff 	mov.w	ip, #4294967295
 8003b0c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003b10:	fa2c f707 	lsr.w	r7, ip, r7
 8003b14:	4207      	tst	r7, r0
 8003b16:	d0f3      	beq.n	8003b00 <floor+0x98>
 8003b18:	a30f      	add	r3, pc, #60	@ (adr r3, 8003b58 <floor+0xf0>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f7fc fcb3 	bl	8000488 <__adddf3>
 8003b22:	2200      	movs	r2, #0
 8003b24:	2300      	movs	r3, #0
 8003b26:	f7fc fee3 	bl	80008f0 <__aeabi_dcmpgt>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d0c0      	beq.n	8003ab0 <floor+0x48>
 8003b2e:	2c00      	cmp	r4, #0
 8003b30:	da0a      	bge.n	8003b48 <floor+0xe0>
 8003b32:	2e14      	cmp	r6, #20
 8003b34:	d101      	bne.n	8003b3a <floor+0xd2>
 8003b36:	3401      	adds	r4, #1
 8003b38:	e006      	b.n	8003b48 <floor+0xe0>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003b40:	40b3      	lsls	r3, r6
 8003b42:	441d      	add	r5, r3
 8003b44:	4545      	cmp	r5, r8
 8003b46:	d3f6      	bcc.n	8003b36 <floor+0xce>
 8003b48:	ea25 0507 	bic.w	r5, r5, r7
 8003b4c:	e7b0      	b.n	8003ab0 <floor+0x48>
 8003b4e:	2500      	movs	r5, #0
 8003b50:	462c      	mov	r4, r5
 8003b52:	e7ad      	b.n	8003ab0 <floor+0x48>
 8003b54:	f3af 8000 	nop.w
 8003b58:	8800759c 	.word	0x8800759c
 8003b5c:	7e37e43c 	.word	0x7e37e43c
 8003b60:	bff00000 	.word	0xbff00000
 8003b64:	000fffff 	.word	0x000fffff

08003b68 <_init>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr

08003b74 <_fini>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr
